using System.Collections.Generic;

namespace Hime.Kernel.Documentation
{
    public interface MHTMLSource
    {
        string ContentType { get; }
        string ContentTransferEncoding { get; }
        string ContentLocation { get; }
        string Read();
        void Close();
    }

    public abstract class MHTMLSourceFile : MHTMLSource
    {
        private const int bufferSize = 900;
        protected string mime;
        protected string location;
        protected string file;
        private System.IO.Stream stream;
        private byte[] buffer;

        public virtual string ContentType { get { return mime; } }
        public string ContentTransferEncoding { get { return "base64"; } }
        public string ContentLocation { get { return location; } }

        public MHTMLSourceFile(string mime, string location, string file)
        {
            this.mime = mime;
            this.location = location;
            this.file = file;
        }

        public string Read()
        {
            if (stream == null)
            {
                stream = new System.IO.FileStream(file, System.IO.FileMode.Open, System.IO.FileAccess.Read, System.IO.FileShare.None);
                buffer = new byte[bufferSize];
            }

            int read = stream.Read(buffer, 0, bufferSize);
            if (read == 0)
                return null;
            return System.Convert.ToBase64String(buffer, 0, read);
        }
        public void Close()
        {
            if (stream != null)
                stream.Close();
        }
    }

    public abstract class MHTMLSourceStream : MHTMLSource
    {
        private const int bufferSize = 900;
        protected string mime;
        protected string location;
        private System.IO.Stream stream;
        private byte[] buffer;

        public virtual string ContentType { get { return mime; } }
        public string ContentTransferEncoding { get { return "base64"; } }
        public string ContentLocation { get { return location; } }

        public MHTMLSourceStream(string mime, string location, System.IO.Stream stream)
        {
            this.mime = mime;
            this.location = location;
            this.stream = stream;
            this.buffer = new byte[bufferSize];
        }

        public string Read()
        {
            int read = stream.Read(buffer, 0, bufferSize);
            if (read == 0)
                return null;
            return System.Convert.ToBase64String(buffer, 0, read);
        }
        public void Close() { }
    }

    public class MHTMLSourceFileText : MHTMLSourceFile
    {
        private string charset;
        public override string ContentType { get { return mime + "; charset=\"" + charset + "\""; } }
        public MHTMLSourceFileText(string mime, string charset, string location, string file)
            : base(mime, location, file)
        {
            this.charset = charset;
        }
    }
    public class MHTMLSourceFileImage : MHTMLSourceFile
    {
        public MHTMLSourceFileImage(string mime, string location, string file)
            : base(mime, location, file)
        { }
    }

    public class MHTMLSourceStreamText : MHTMLSourceStream
    {
        private string charset;
        public override string ContentType { get { return mime + "; charset=\"" + charset + "\""; } }
        public MHTMLSourceStreamText(string mime, string charset, string location, System.IO.Stream stream)
            : base(mime, location, stream)
        {
            this.charset = charset;
        }
    }
    public class MHTMLSourceStreamImage : MHTMLSourceStream
    {
        public MHTMLSourceStreamImage(string mime, string location, System.IO.Stream stream)
            : base(mime, location, stream)
        { }
    }

    public class MHTMLCompiler
    {
        private List<MHTMLSource> sources;
        private string from;
        private string title;
        private string boundary;
        private int linebreak;

        public string From { get { return from; } set { from = value; } }
        public string Title { get { return title; } set { title = value; } }

        public MHTMLCompiler()
        {
            sources = new List<MHTMLSource>();
            from = "Generated by " + (typeof(MHTMLCompiler)).Name;
            title = "Some documentation";
            boundary = "----=_NextPart_000_0000_01CC2201.CF84F290";
            linebreak = 76;
        }

        public void AddSource(MHTMLSource source) { sources.Add(source); }

        public void CompileTo(string file)
        {
            System.IO.StreamWriter writer = new System.IO.StreamWriter(file, false, System.Text.Encoding.UTF8);
            writer.Write("From: ");
            writer.WriteLine("\"" + from + "\"");
            writer.Write("Subject: ");
            writer.WriteLine(title);
            writer.Write("Date: ");
            writer.WriteLine(System.DateTime.Now.ToLongDateString());
            writer.WriteLine("MIME-Version: 1.0");
            writer.WriteLine("Content-Type: multipart/related;");
            writer.WriteLine("\ttype=\"text/html\";");
            writer.WriteLine("\tboundary=\"" + boundary + "\"");

            foreach (MHTMLSource source in sources)
            {
                writer.WriteLine();
                writer.WriteLine();
                writer.WriteLine("--" + boundary);
                writer.Write("Content-Type: ");
                writer.WriteLine(source.ContentType);
                writer.Write("Content-Transfer-Encoding: ");
                writer.WriteLine(source.ContentTransferEncoding);
                writer.Write("Content-Location: ");
                writer.WriteLine(source.ContentLocation);
                writer.WriteLine();

                int length = 0;
                byte[] buffer = new byte[1024];
                string text = source.Read();
                while (text != null)
                {
                    while (linebreak < (length + text.Length))
                    {
                        string part1 = text.Substring(0, linebreak - length);
                        text = text.Substring(linebreak - length);
                        writer.WriteLine(part1);
                        length = 0;
                    }
                    length += text.Length;
                    writer.Write(text);
                    text = source.Read();
                }
                source.Close();
            }

            writer.WriteLine();
            writer.WriteLine();
            writer.WriteLine("--" + boundary + "--");
            writer.Close();
        }
    }
}