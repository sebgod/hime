namespace Hime.Earth.Java
{
	public grammar cf GrammarJavaBytecode
	{
		options
		{
			Axiom = "inst";
		}
		rules
		{
			inst_operand_index8		-> 0xXX ;
			inst_operand_index16	-> 0xXXXX ;
			inst_operand_offset16	-> 0xXXXX ;
			inst_operand_offset32	-> 0xXXXXXXXX ;
			inst_operand_byte		-> 0xXX ;
			inst_operand_short		-> 0xXXXX ;
			
			
			
			
			/* Push T Constant */
			inst_Tconst			-> inst_aconst^ | inst_iconst^
								|  inst_lconst^ | inst_fconst^ | inst_dconst^ ;
			inst_aconst			-> inst_aconst_null^ ;
			inst_aconst_null	-> 0x01;
			inst_iconst			-> inst_iconst_m1^ | inst_iconst_0^
								|  inst_iconst_1^ | inst_iconst_2^
								|  inst_iconst_3^ | inst_iconst_4^
								|  inst_iconst_5^ ;
			inst_iconst_m1		-> 0x02;
			inst_iconst_0		-> 0x03;
			inst_iconst_1		-> 0x04;
			inst_iconst_2		-> 0x05;
			inst_iconst_3		-> 0x06;
			inst_iconst_4		-> 0x07;
			inst_iconst_5		-> 0x08;
			inst_lconst			-> inst_lconst_0^ | inst_lconst_1^ ;
			inst_lconst_0		-> 0x09;
			inst_lconst_1		-> 0x0A;
			inst_fconst			-> inst_fconst_0^ | inst_fconst_1^ | inst_fconst_2^ ;
			inst_fconst_0		-> 0x0B;
			inst_fconst_1		-> 0x0C;
			inst_fconst_2		-> 0x0D;
			inst_dconst			-> inst_dconst_0^ | inst_dconst_1^ ;
			inst_dconst_0		-> 0x0E;
			inst_dconst_1		-> 0x0F;
			
			/* Push T Value */
			inst_Tipush			-> inst_bipush^ | inst_sipush^ ;
			inst_bipush			-> 0x10! inst_operand_byte;
			inst_sipush			-> 0x11! inst_operand_short;
			
			/* Load and Push T */
			inst_Tload			-> inst_iload^ | inst_lload^ | inst_fload^ | inst_dload^ | inst_aload^
								|  inst_iload_index^ | inst_lload_index^ | inst_fload_index^ | inst_dload_index^ | inst_aload_index^ ;
			inst_iload			-> 0x15! inst_operand_index8;
			inst_lload			-> 0x16! inst_operand_index8;
			inst_fload			-> 0x17! inst_operand_index8;
			inst_dload			-> 0x18! inst_operand_index8;
			inst_aload			-> 0x19! inst_operand_index8;
			inst_iload_index	-> inst_iload_0^ | inst_iload_1^ | inst_iload_2^ | inst_iload_3^ ;
			inst_iload_0		-> 0x1A;
			inst_iload_1		-> 0x1B;
			inst_iload_2		-> 0x1C;
			inst_iload_3		-> 0x1D;
			inst_lload_index	-> inst_lload_0^ | inst_lload_1^ | inst_lload_2^ | inst_lload_3^ ;
			inst_lload_0		-> 0x1E;
			inst_lload_1		-> 0x1F;
			inst_lload_2		-> 0x20;
			inst_lload_3		-> 0x21;
			inst_fload_index	-> inst_fload_0^ | inst_fload_1^ | inst_fload_2^ | inst_fload_3^ ;
			inst_fload_0		-> 0x22;
			inst_fload_1		-> 0x23;
			inst_fload_2		-> 0x24;
			inst_fload_3		-> 0x25;
			inst_dload_index	-> inst_dload_0^ | inst_dload_1^ | inst_dload_2^ | inst_dload_3^ ;
			inst_dload_0		-> 0x26;
			inst_dload_1		-> 0x27;
			inst_dload_2		-> 0x28;
			inst_dload_3		-> 0x29;
			inst_aload_index	-> inst_aload_0^ | inst_aload_1^ | inst_aload_2^ | inst_aload_3^ ;
			inst_aload_0		-> 0x2A;
			inst_aload_1		-> 0x2B;
			inst_aload_2		-> 0x2C;
			inst_aload_3		-> 0x2D;
			
			/* Load from Array and Push T */
			inst_Taload			-> inst_iaload^ | inst_laload^ | inst_faload^ | inst_daload^ | inst_aaload^ | inst_baload^ | inst_caload^ | inst_saload^ ;
			inst_iaload			-> 0x2E;
			inst_laload			-> 0x2F;
			inst_faload			-> 0x30;
			inst_daload			-> 0x31;
			inst_aaload			-> 0x32;
			inst_baload			-> 0x33;
			inst_caload			-> 0x34;
			inst_saload			-> 0x35;
			
			/* Store T */
			inst_Tstore			-> inst_istore^ | inst_lstore^ | inst_fstore^ | inst_dstore^ | inst_astore^
								|  inst_istore_index^ | inst_lstore_index^ | inst_fstore_index^ | inst_dstore_index^ | inst_astore_index^ ;
			inst_istore			-> 0x36! inst_operand_index8;
			inst_lstore			-> 0x37! inst_operand_index8;
			inst_fstore			-> 0x38! inst_operand_index8;
			inst_dstore			-> 0x39! inst_operand_index8;
			inst_astore			-> 0x3A! inst_operand_index8;
			inst_istore_index	-> inst_istore_0^ | inst_istore_1^ | inst_istore_2^ | inst_istore_3^ ;
			inst_istore_0		-> 0x3B;
			inst_istore_1		-> 0x3C;
			inst_istore_2		-> 0x3D;
			inst_istore_3		-> 0x3E;
			inst_lstore_index	-> inst_lstore_0^ | inst_lstore_1^ | inst_lstore_2^ | inst_lstore_3^ ;
			inst_lstore_0		-> 0x3F;
			inst_lstore_1		-> 0x40;
			inst_lstore_2		-> 0x41;
			inst_lstore_3		-> 0x42;
			inst_fstore_index	-> inst_fstore_0^ | inst_fstore_1^ | inst_fstore_2^ | inst_fstore_3^ ;
			inst_fstore_0		-> 0x43;
			inst_fstore_1		-> 0x44;
			inst_fstore_2		-> 0x45;
			inst_fstore_3		-> 0x46;
			inst_dstore_index	-> inst_dstore_0^ | inst_dstore_1^ | inst_dstore_2^ | inst_dstore_3^ ;
			inst_dstore_0		-> 0x47;
			inst_dstore_1		-> 0x48;
			inst_dstore_2		-> 0x49;
			inst_dstore_3		-> 0x4A;
			inst_astore_index	-> inst_astore_0^ | inst_astore_1^ | inst_astore_2^ | inst_astore_3^ ;
			inst_astore_0		-> 0x4B;
			inst_astore_1		-> 0x4C;
			inst_astore_2		-> 0x4D;
			inst_astore_3		-> 0x4E;
			
			/* Store to Array T */
			inst_Tastore		-> inst_iastore^ | inst_lastore^ | inst_fastore^ | inst_dastore^ | inst_aastore^ | inst_bastore^ | inst_castore^ | inst_sastore^ ;
			inst_iastore		-> 0x4F;
			inst_lastore		-> 0x50;
			inst_fastore		-> 0x51;
			inst_dastore		-> 0x52;
			inst_aastore		-> 0x53;
			inst_bastore		-> 0x54;
			inst_castore		-> 0x55;
			inst_sastore		-> 0x56;
			
			/* Increment T */
			inst_Tinc			-> inst_iinc^ ;
			inst_iinc			-> 0x84! inst_operand_index8 inst_operand_byte;
			
			/* Addition T */
			inst_Tadd			-> inst_iadd^ | inst_ladd^ | inst_fadd^ | inst_dadd^ ;
			inst_iadd			-> 0x60;
			inst_ladd			-> 0x61;
			inst_fadd			-> 0x62;
			inst_dadd			-> 0x63;
			
			/* Substraction T */
			inst_Tsub			-> inst_isub^ | inst_lsub^ | inst_fsub^ | inst_dsub^ ;
			inst_isub			-> 0x64;
			inst_lsub			-> 0x65;
			inst_fsub			-> 0x66;
			inst_dsub			-> 0x67;
			
			/* Multiplication T */
			inst_imul			-> 0x68;
			inst_lmul			-> 0x69;
			inst_fmul			-> 0x6A;
			inst_dmul			-> 0x6B;
			
			/* Division T */
			inst_Tdiv			-> inst_idiv^ | inst_ldiv^ | inst_fdiv^ | inst_ddiv^ ;
			inst_idiv			-> 0x6C;
			inst_ldiv			-> 0x6D;
			inst_fdiv			-> 0x6E;
			inst_ddiv			-> 0x6F;
			
			/* Remainder T */
			inst_Trem			-> inst_irem^ | inst_lrem^ | inst_frem^ | inst_drem^ ;
			inst_irem			-> 0x70;
			inst_lrem			-> 0x71;
			inst_frem			-> 0x72;
			inst_drem			-> 0x73;
			
			/* Negate T */
			inst_Tneg			-> inst_ineg^ | inst_lneg^ | inst_fneg^ | inst_dneg^ ;
			inst_ineg			-> 0x74;
			inst_lneg			-> 0x75;
			inst_fneg			-> 0x76;
			inst_dneg			-> 0x77;
			
			/* Shift Left T */
			inst_Tshl			-> inst_ishl^ | inst_lshl^ ;
			inst_ishl			-> 0x78;
			inst_lshl			-> 0x79;
			
			/* Shift Right T */
			inst_Tshr			-> inst_ishr^ | inst_lshr^ ;
			inst_ishr			-> 0x7A;
			inst_lshr			-> 0x7B;
			
			/* Logical Shift Right T */
			inst_Tushr			-> inst_iushr^ | inst_lushr^ ;
			inst_iushr			-> 0x7C;
			inst_lushr			-> 0x7D;
			
			/* Boolean Bitwise And T */
			inst_Tand			-> inst_iand^ | inst_land^ ;
			inst_iand			-> 0x7E;
			inst_land			-> 0x7F;
			
			/* Boolean Bitwise Or T */
			inst_Tor			-> inst_ior^ | inst_lor^ ;
			inst_ior			-> 0x80;
			inst_lor			-> 0x81;
			
			/* Boolean Bitwise Xor T */
			inst_Txor			-> inst_ixor^ | inst_lxor^ ;
			inst_ixor			-> 0x82;
			inst_lxor			-> 0x83;
			
			/* T 2 T Casts */
			inst_T2T			-> inst_i2T^ | inst_l2T^ | inst_f2T^ | inst_d2T^ ;
			inst_i2T			-> inst_i2l^ | inst_i2f^ | inst_i2d^ | inst_i2b^ | inst_i2c^ | inst_i2s^ ;
			inst_i2l			-> 0x85;
			inst_i2f			-> 0x86;
			inst_i2d			-> 0x87;
			inst_i2b			-> 0x91;
			inst_i2c			-> 0x92;
			inst_i2s			-> 0x93;
			inst_l2T			-> inst_l2i^ | inst_l2f^ | inst_l2d^ ;
			inst_l2i			-> 0x88;
			inst_l2f			-> 0x89;
			inst_l2d			-> 0x8A;
			inst_f2T			-> inst_f2i^ | inst_f2l^ | inst_f2d^ ;
			inst_f2i			-> 0x8B;
			inst_f2l			-> 0x8C;
			inst_f2d			-> 0x8D;
			inst_d2T			-> inst_d2i^ | inst_d2l^ | inst_d2f^ ;
			inst_d2i			-> 0x8E;
			inst_d2l			-> 0x8F;
			inst_d2f			-> 0x90;
			
			/* T Compare */
			inst_Tcompare		-> inst_Tcmp^ | inst_Tcmpl^ | inst_Tcmpg^ ;
			inst_Tcmp			-> inst_lcmp^ ;
			inst_lcmp			-> 0x94;
			inst_Tcmpl			-> inst_fcmpl^ | inst_dcmpl^ ;
			inst_fcmpl			-> 0x95;
			inst_dcmpl			-> 0x97;
			inst_Tcmpg			-> inst_fcmpg^ | inst_dcmpg^ ;
			inst_fcmpg			-> 0x96;
			inst_dcmpg			-> 0x98;
			
			/* Branch */
			inst_branch			-> inst_if^ | inst_tableswitch^ | inst_lookupswitch^
								|  inst_goto^ | inst_goto_w^ | inst_jsr^ | inst_jsr_w^ | inst_ret^ ;
			/* Branch If */
			inst_if				-> inst_ifOP^ | inst_if_icmpOP^ | inst_if_acmpOP^ | inst_ifnull^ | inst_ifnonnull^ ;
			inst_ifnull			-> 0xC6! inst_operand_offset16;
			inst_ifnonnull		-> 0xC7! inst_operand_offset16;
			inst_ifOP			-> inst_ifeq^ | inst_ifne^ | inst_iflt^ | inst_ifge^ | inst_ifgt^ | inst_ifle^ ;
			inst_ifeq			-> 0x99! inst_operand_offset16;
			inst_ifne			-> 0x9A! inst_operand_offset16;
			inst_iflt			-> 0x9B! inst_operand_offset16;
			inst_ifge			-> 0x9C! inst_operand_offset16;
			inst_ifgt			-> 0x9D! inst_operand_offset16;
			inst_ifle			-> 0x9E! inst_operand_offset16;
			inst_if_icmpOP		-> inst_if_icmpeq^ | inst_if_icmpne^ |  inst_if_icmplt^ | inst_if_icmpge^ |  inst_if_icmpgt^ | inst_if_icmple^ ;
			inst_if_icmpeq		-> 0x9F! inst_operand_offset16;
			inst_if_icmpne		-> 0xA0! inst_operand_offset16;
			inst_if_icmplt		-> 0xA1! inst_operand_offset16;
			inst_if_icmpge		-> 0xA2! inst_operand_offset16;
			inst_if_icmpgt		-> 0xA3! inst_operand_offset16;
			inst_if_icmple		-> 0xA4! inst_operand_offset16;
			inst_if_acmpOP		-> inst_if_acmpeq^ | inst_if_acmpne^ ;
			inst_if_acmpeq		-> 0xA5! inst_operand_offset16;
			inst_if_acmpne		-> 0xA6! inst_operand_offset16;
			/* Branch Switch */
			inst_tableswitch	-> 0xAA;
			inst_lookupswitch	-> 0xAB;
			/* Branch unconditional */
			inst_goto			-> 0xA7! inst_operand_offset16;
			inst_goto_w			-> 0xC8! inst_operand_offset32;
			inst_jsr			-> 0xA8! inst_operand_offset16;
			inst_jsr_w			-> 0xC9! inst_operand_offset32;
			inst_ret			-> 0xA9! inst_operand_index8;
			
			/* T Return */
			inst_Treturn		-> inst_ireturn^ | inst_lreturn^ | inst_freturn^ | inst_dreturn^ | inst_areturn^ | inst_return^ ;
			inst_ireturn		-> 0xAC;
			inst_lreturn		-> 0xAD;
			inst_freturn		-> 0xAE;
			inst_dreturn		-> 0xAF;
			inst_areturn		-> 0xB0;
			inst_return			-> 0xB1;
			
			
			
			
			inst_nop			-> 0x00;
			inst_ldc			-> 0x12;
			inst_ldc_w			-> 0x13;
			inst_ldc2_w			-> 0x14;
			inst_pop			-> 0x57;
			inst_pop2			-> 0x58;
			inst_dup			-> 0x59;
			inst_dup_x1			-> 0x5A;
			inst_dup_x2			-> 0x5B;
			inst_dup2			-> 0x5C;
			inst_dup2_x1		-> 0x5D;
			inst_dup2_x2		-> 0x5E;
			inst_swap			-> 0x5F;
			inst_getstatic		-> 0xB2;
			inst_putstatic		-> 0xB3;
			inst_getfield		-> 0xB4;
			inst_putfield		-> 0xB5;
			inst_invokevirtual	-> 0xB6;
			inst_invokespecial	-> 0xB7;
			inst_invokestatic	-> 0xB8;
			inst_invokeinterface-> 0xB9;
			inst_xxxunusedxxx1	-> 0xBA;
			inst_new			-> 0xBB;
			inst_newarray		-> 0xBC;
			inst_anewarray		-> 0xBD;
			inst_arraylength	-> 0xBE;
			inst_athrow			-> 0xBF;
			inst_checkcast		-> 0xC0;
			inst_instanceof		-> 0xC1;
			inst_monitorenter	-> 0xC2;
			inst_monitorexit	-> 0xC3;
			inst_wide			-> 0xC4;
			inst_multianewarray	-> 0xC5;
			inst_breakpoint		-> 0xCA;
			inst_impdep1		-> 0xFE;
			inst_impdep2		-> 0xFF;
		}
	}
}