namespace Hime.Earth.Asm
{
	public grammar cf GrammarAsmx86
	{
		options
		{
			Axiom = "inst";
		}
		rules
		{
			reg_8_al		-> 0b000;
			reg_8_cl		-> 0b001;
			reg_8_dl		-> 0b010;
			reg_8_bl		-> 0b011;
			reg_8_ah		-> 0b100;
			reg_8_ch		-> 0b101;
			reg_8_dh		-> 0b110;
			reg_8_bh		-> 0b111;
			reg_8			-> reg_8_al | reg_8_cl | reg_8_dl | reg_8_bl | reg_8_ah | reg_8_ch | reg_8_dh | reg_8_bh ;
			
			reg_16_ax		-> 0b000;
			reg_16_cx		-> 0b001;
			reg_16_dx		-> 0b010;
			reg_16_bx		-> 0b011;
			reg_16_sp		-> 0b100;
			reg_16_bp		-> 0b101;
			reg_16_si		-> 0b110;
			reg_16_di		-> 0b111;
			reg_16			-> reg_16_ax | reg_16_cx | reg_16_dx | reg_16_bx | reg_16_sp | reg_16_bp | reg_16_si | reg_16_di ;
			
			reg_32_eax		-> 0b000;
			reg_32_ecx		-> 0b001;
			reg_32_edx		-> 0b010;
			reg_32_ebx		-> 0b011;
			reg_32_esp		-> 0b100;
			reg_32_ebp		-> 0b101;
			reg_32_esi		-> 0b110;
			reg_32_edi		-> 0b111;
			reg_32			-> reg_32_eax | reg_32_ecx | reg_32_edx | reg_32_ebx | reg_32_esp | reg_32_ebp | reg_32_esi | reg_32_edi ;
			
			reg_mm_mm0		-> 0b000;
			reg_mm_mm1		-> 0b001;
			reg_mm_mm2		-> 0b010;
			reg_mm_mm3		-> 0b011;
			reg_mm_mm4		-> 0b100;
			reg_mm_mm5		-> 0b101;
			reg_mm_mm6		-> 0b110;
			reg_mm_mm7		-> 0b111;
			reg_mm			-> reg_mm_mm0 | reg_mm_mm1 | reg_mm_mm2 | reg_mm_mm3 | reg_mm_mm4 | reg_mm_mm5 | reg_mm_mm6 | reg_mm_mm7 ;
			
			reg_xmm_xmm0	-> 0b000;
			reg_xmm_xmm1	-> 0b001;
			reg_xmm_xmm2	-> 0b010;
			reg_xmm_xmm3	-> 0b011;
			reg_xmm_xmm4	-> 0b100;
			reg_xmm_xmm5	-> 0b101;
			reg_xmm_xmm6	-> 0b110;
			reg_xmm_xmm7	-> 0b111;
			reg_xmm			-> reg_xmm_xmm0 | reg_xmm_xmm1 | reg_xmm_xmm2 | reg_xmm_xmm3 | reg_xmm_xmm4 | reg_xmm_xmm5 | reg_xmm_xmm6 | reg_xmm_xmm7 ;
			
			sreg2_es		-> 0b00;
			sreg2_cs		-> 0b01;
			sreg2_ss		-> 0b10;
			sreg2_ds		-> 0b11;
			sreg2			-> sreg2_es | sreg2_cs | sreg2_ss | sreg2_ds ;
			
			sreg3_es		-> 0b000;
			sreg3_cs		-> 0b001;
			sreg3_ss		-> 0b010;
			sreg3_ds		-> 0b011;
			sreg3_fs		-> 0b100;
			sreg3_gs		-> 0b101;
			sreg3			-> sreg3_es | sreg3_cs | sreg3_ss | sreg3_ds | sreg3_fs | sreg3_gs ;
			
			eee_control_cr0	-> 0b000;
			eee_control_cr2	-> 0b010;
			eee_control_cr3	-> 0b011;
			eee_control_cr4	-> 0b100;
			eee_control		-> eee_control_cr0 | eee_control_cr2 | eee_control_cr3 | eee_control_cr4 ;
			eee_debug_dr0	-> 0b000;
			eee_debug_dr1	-> 0b001;
			eee_debug_dr2	-> 0b010;
			eee_debug_dr3	-> 0b011;
			eee_debug_dr6	-> 0b110;
			eee_debug_dr7	-> 0b111;
			eee_debug		-> eee_debug_dr0 | eee_debug_dr1 | eee_debug_dr2 | eee_debug_dr3 | eee_debug_dr6 | eee_debug_dr7 ;
			
			tttn_o			-> 0b0000;
			tttn_no			-> 0b0001;
			tttn_b_nae		-> 0b0010;
			tttn_nb_ae		-> 0b0011;
			tttn_e_z		-> 0b0100;
			tttn_ne_nz		-> 0b0101;
			tttn_be_na		-> 0b0110;
			tttn_nbe_a		-> 0b0111;
			tttn_s			-> 0b1000;
			tttn_ns			-> 0b1001;
			tttn_p_pe		-> 0b1010;
			tttn_np_po		-> 0b1011;
			tttn_l_nge		-> 0b1100;
			tttn_nl_ge		-> 0b1101;
			tttn_le_ng		-> 0b1110;
			tttn_nle_g		-> 0b1111;
			tttn			-> tttn_o | tttn_no | tttn_b_nae | tttn_nb_ae | tttn_e_z | tttn_ne_nz
							|  tttn_be_na | tttn_nbe_a | tttn_s | tttn_ns | tttn_p_pe | tttn_np_po
							|  tttn_l_nge | tttn_nl_ge | tttn_le_ng | tttn_nle_g ;
			
			
			
			
			modrm16_disp8		-> 0xXX ;
			modrm16_disp16		-> 0xXXXX ;
			modrm16_reg1_bxsi	-> 0b000;
			modrm16_reg1_bxdi	-> 0b001;
			modrm16_reg1_bpsi	-> 0b010;
			modrm16_reg1_bpdi	-> 0b011;
			modrm16_reg1_si		-> 0b100;
			modrm16_reg1_di		-> 0b101;
			modrm16_reg1_bp		-> 0b110;
			modrm16_reg1_disp16	-> 0b110;
			modrm16_reg1_bx		-> 0b111;
			modrm16_reg1_mod00	-> modrm16_reg1_bxsi | modrm16_reg1_bxdi | modrm16_reg1_bpsi | modrm16_reg1_bpdi | modrm16_reg1_si | modrm16_reg1_di | modrm16_reg1_bx ;
			modrm16_reg1		-> modrm16_reg1_bxsi | modrm16_reg1_bxdi | modrm16_reg1_bpsi | modrm16_reg1_bpdi | modrm16_reg1_si | modrm16_reg1_di | modrm16_reg1_bp | modrm16_reg1_bx ;
			
			modrm16_atadd<reg_opcode>		-> 0b00 reg_opcode modrm16_reg1_disp16 modrm16_disp16 ;
			modrm16_atreg<reg_opcode>		-> 0b00 reg_opcode modrm16_reg1_mod00 ;
			modrm16_atreg_disp8<reg_opcode>	-> 0b01 reg_opcode modrm16_reg1 modrm16_disp8 ;
			modrm16_atreg_disp16<reg_opcode>-> 0b01 reg_opcode modrm16_reg1 modrm16_disp16 ;
			modrm16_inreg<reg_opcode, reg1>	-> 0b11 reg_opcode reg1 ;
			modrm16<reg_opcode, reg1>		-> modrm16_atadd<reg_opcode>
											|  modrm16_atreg<reg_opcode>
											|  modrm16_atreg_disp8<reg_opcode>
											|  modrm16_atreg_disp16<reg_opcode>
											|  modrm16_inreg<reg_opcode, reg1> ;
			modrm16<reg_opcode>				-> modrm16_atadd<reg_opcode>
											|  modrm16_atreg<reg_opcode>
											|  modrm16_atreg_disp8<reg_opcode>
											|  modrm16_atreg_disp16<reg_opcode>
											|  modrm16_inreg<reg_opcode, reg_32> ;
			
			
			modrm32_disp8		-> 0xXX ;
			modrm32_disp32		-> 0xXXXXXXXX ;
			modrm32_reg1_sib	-> 0b100;
			modrm32_reg1_disp32	-> 0b101;
			modrm32_reg1_mod00	-> reg_32_eax | reg_32_ecx | reg_32_edx | reg_32_ebx | reg_32_esi | reg_32_edi ;
			modrm32_reg1_mod01	-> reg_32_eax | reg_32_ecx | reg_32_edx | reg_32_ebx | reg_32_ebp | reg_32_esi | reg_32_edi ;
			modrm32_reg1_mod10	-> reg_32_eax | reg_32_ecx | reg_32_edx | reg_32_ebx | reg_32_ebp | reg_32_esi | reg_32_edi ;
			
			modrm32_atadd<reg_opcode>		-> 0b00 reg_opcode modrm32_reg1_disp32 modrm32_disp32 ;
			modrm32_atreg<reg_opcode>		-> 0b00 reg_opcode modrm32_reg1_mod00
											|  0b00 reg_opcode modrm32_reg1_sib sib_mod00 ;
			modrm32_atreg_disp8<reg_opcode>	-> 0b01 reg_opcode modrm32_reg1_mod01 modrm32_disp8
											|  0b01 reg_opcode modrm32_reg1_sib sib modrm32_disp8 ;
			modrm32_atreg_disp32<reg_opcode>-> 0b10 reg_opcode modrm32_reg1_mod10 modrm32_disp32
											|  0b10 reg_opcode modrm32_reg1_sib sib modrm32_disp32;
			modrm32_inreg<reg_opcode, reg1>	-> 0b11 reg_opcode reg1 ;
			modrm32<reg_opcode, reg1>		-> modrm32_atadd<reg_opcode>
											|  modrm32_atreg<reg_opcode>
											|  modrm32_atreg_disp8<reg_opcode>
											|  modrm32_atreg_disp32<reg_opcode>
											|  modrm32_inreg<reg_opcode, reg1> ;
			modrm32<reg_opcode>				-> modrm32_atadd<reg_opcode>
											|  modrm32_atreg<reg_opcode>
											|  modrm32_atreg_disp8<reg_opcode>
											|  modrm32_atreg_disp32<reg_opcode>
											|  modrm32_inreg<reg_opcode, reg_32> ;
			
			
			sib_scale1		-> 0b00;
			sib_scale2		-> 0b01;
			sib_scale4		-> 0b10;
			sib_scale8		-> 0b11;
			sib_scale		-> sib_scale1 | sib_scale2 | sib_scale4 | sib_scale8 ;
			sib_index_none	-> 0b100 ;
			sib_index		-> reg_32_eax | reg_32_ecx | reg_32_edx | reg_32_ebx | reg_32_ebp | reg_32_esi | reg_32_edi ;
			sib_base_none	-> 0b101 ;
			sib_base		-> reg_32_eax | reg_32_ecx | reg_32_edx | reg_32_ebx | reg_32_esp | reg_32_ebp | reg_32_esi | reg_32_edi ;
			sib_base_mod00	-> reg_32_eax | reg_32_ecx | reg_32_edx | reg_32_ebx | reg_32_esp | reg_32_esi | reg_32_edi ;
			
			sib				-> sib_scale sib_index sib_base ;
			sib_mod00		-> sib_scale sib_index sib_base_mod00
							|  sib_scale sib_index sib_base_none modrm32_disp32 ;
			
			
			
			
			/* Instruction opcode prefixes */
			inst_pre_lr_lock	-> 0xF0 ;
			inst_pre_lr_repne	-> 0xF2 ;
			inst_pre_lr_rep		-> 0xF3 ;
			inst_pre_lr_repe	-> 0xF3 ;
			inst_pre_lr_ssimde	-> 0xF3 ;
			inst_pre_so_cs		-> 0x2E ;
			inst_pre_so_ss		-> 0x36 ;
			inst_pre_so_ds		-> 0x3E ;
			inst_pre_so_es		-> 0x26 ;
			inst_pre_so_fs		-> 0x64 ;
			inst_pre_so_gs		-> 0x65 ;
			inst_pre_oso		-> 0x66 ;
			inst_pre_aso		-> 0x67 ;
			
			/* Instruction opcode flags */
			inst_w0			-> 0b0;		/* Operand size = 8 bits */
			inst_w1			-> 0b1;		/* Operand size = 16 bits or 32 bits */
			inst_s0			-> 0b0;
			inst_s1			-> 0b1;
			inst_opcode_0	-> 0b000;
			inst_opcode_1	-> 0b001;
			inst_opcode_2	-> 0b010;
			inst_opcode_3	-> 0b011;
			inst_opcode_4	-> 0b100;
			inst_opcode_5	-> 0b101;
			inst_opcode_6	-> 0b110;
			inst_opcode_7	-> 0b111;
			inst_imm8		-> 0xXX;
			inst_imm16		-> 0xXXXX;
			inst_imm32		-> 0xXXXXXXXX;
			
			/* ASCII */
			inst_aaa	-> 0x37 ;
			inst_aad	-> 0xD5 0x0A ;
			inst_aam	-> 0xD4 0x0A ;
			inst_aas	-> 0x3F ;
			
			/* ADC */
			inst_adc_reg_mem<w, modrm>			-> 0b0001 0b000 w modrm ;
			inst_adc_mem_reg<w, modrm>			-> 0b0001 0b001 w modrm ;
			inst_adc_imm_acc<w, imm>			-> 0b0001 0b010 w imm ;
			inst_adc_imm_mem<s, w, modrm, imm>	-> 0b1000 0b00 s w modrm imm ;
			
			inst16_adc	-> inst_adc_reg_mem<inst_w0, modrm16<reg_8, reg_8>>
						|  inst_adc_reg_mem<inst_w1, modrm16<reg_16, reg_16>>
						|  inst_adc_mem_reg<inst_w0, modrm16<reg_8, reg_8>>
						|  inst_adc_mem_reg<inst_w1, modrm16<reg_16, reg_16>>
						|  inst_adc_imm_acc<inst_w0, inst_imm8>
						|  inst_adc_imm_acc<inst_w1, inst_imm16>
						|  inst_adc_imm_mem<inst_s0, inst_w0, modrm16<inst_opcode_2, reg_8>, inst_imm8>
						|  inst_adc_imm_mem<inst_s1, inst_w0, modrm16<inst_opcode_2, reg_16>, inst_imm8>
						|  inst_adc_imm_mem<inst_s0, inst_w1, modrm16<inst_opcode_2, reg_16>, inst_imm16>
						|  inst_adc_imm_mem<inst_s1, inst_w1, modrm16<inst_opcode_2, reg_16>, inst_imm16> ;
			
			inst32_adc	-> inst_adc_reg_mem<inst_w0, modrm32<reg_8, reg_8>>
						|  inst_adc_reg_mem<inst_w1, modrm32<reg_32, reg_32>>
						|  inst_adc_mem_reg<inst_w0, modrm32<reg_8, reg_8>>
						|  inst_adc_mem_reg<inst_w1, modrm32<reg_32, reg_32>>
						|  inst_adc_imm_acc<inst_w0, inst_imm8>
						|  inst_adc_imm_acc<inst_w1, inst_imm32>
						|  inst_adc_imm_mem<inst_s0, inst_w0, modrm32<inst_opcode_2, reg_8>, inst_imm8>
						|  inst_adc_imm_mem<inst_s1, inst_w0, modrm32<inst_opcode_2, reg_32>, inst_imm8>
						|  inst_adc_imm_mem<inst_s0, inst_w1, modrm32<inst_opcode_2, reg_32>, inst_imm32>
						|  inst_adc_imm_mem<inst_s1, inst_w1, modrm32<inst_opcode_2, reg_32>, inst_imm32> ;
			
			/* ADD */
			inst_add_reg_mem<w, modrm>			-> 0b0000 0b000 w modrm ;
			inst_add_mem_reg<w, modrm>			-> 0b0000 0b001 w modrm ;
			inst_add_imm_acc<w, imm>			-> 0b0000 0b010 w imm ;
			inst_add_imm_mem<s, w, modrm, imm>	-> 0b1000 0b00 s w modrm imm ;
			
			inst16_add	-> inst_add_reg_mem<inst_w0, modrm16<reg_8, reg_8>>
						|  inst_add_reg_mem<inst_w1, modrm16<reg_16, reg_16>>
						|  inst_add_mem_reg<inst_w0, modrm16<reg_8, reg_8>>
						|  inst_add_mem_reg<inst_w1, modrm16<reg_16, reg_16>>
						|  inst_add_imm_acc<inst_w0, inst_imm8>
						|  inst_add_imm_acc<inst_w1, inst_imm16>
						|  inst_add_imm_mem<inst_s0, inst_w0, modrm16<inst_opcode_0, reg_8>, inst_imm8>
						|  inst_add_imm_mem<inst_s1, inst_w0, modrm16<inst_opcode_0, reg_16>, inst_imm8>
						|  inst_add_imm_mem<inst_s0, inst_w1, modrm16<inst_opcode_0, reg_16>, inst_imm16>
						|  inst_add_imm_mem<inst_s1, inst_w1, modrm16<inst_opcode_0, reg_16>, inst_imm16> ;
			
			inst32_add	-> inst_add_reg_mem<inst_w0, modrm32<reg_8, reg_8>>
						|  inst_add_reg_mem<inst_w1, modrm32<reg_32, reg_32>>
						|  inst_add_mem_reg<inst_w0, modrm32<reg_8, reg_8>>
						|  inst_add_mem_reg<inst_w1, modrm32<reg_32, reg_32>>
						|  inst_add_imm_acc<inst_w0, inst_imm8>
						|  inst_add_imm_acc<inst_w1, inst_imm32>
						|  inst_add_imm_mem<inst_s0, inst_w0, modrm32<inst_opcode_0, reg_8>, inst_imm8>
						|  inst_add_imm_mem<inst_s1, inst_w0, modrm32<inst_opcode_0, reg_32>, inst_imm8>
						|  inst_add_imm_mem<inst_s0, inst_w1, modrm32<inst_opcode_0, reg_32>, inst_imm32>
						|  inst_add_imm_mem<inst_s1, inst_w1, modrm32<inst_opcode_0, reg_32>, inst_imm32> ;
			
			/* AND */
			inst_and_reg_mem<w, modrm>			-> 0b0010 0b000 w modrm ;
			inst_and_mem_reg<w, modrm>			-> 0b0010 0b001 w modrm ;
			inst_and_imm_acc<w, imm>			-> 0b0010 0b010 w imm ;
			inst_and_imm_mem<s, w, modrm, imm>	-> 0b1000 0b00 s w modrm imm ;
			
			inst16_and	-> inst_and_reg_mem<inst_w0, modrm16<reg_8, reg_8>>
						|  inst_and_reg_mem<inst_w1, modrm16<reg_16, reg_16>>
						|  inst_and_mem_reg<inst_w0, modrm16<reg_8, reg_8>>
						|  inst_and_mem_reg<inst_w1, modrm16<reg_16, reg_16>>
						|  inst_and_imm_acc<inst_w0, inst_imm8>
						|  inst_and_imm_acc<inst_w1, inst_imm16>
						|  inst_and_imm_mem<inst_s0, inst_w0, modrm16<inst_opcode_4, reg_8>, inst_imm8>
						|  inst_and_imm_mem<inst_s1, inst_w0, modrm16<inst_opcode_4, reg_16>, inst_imm8>
						|  inst_and_imm_mem<inst_s0, inst_w1, modrm16<inst_opcode_4, reg_16>, inst_imm16>
						|  inst_and_imm_mem<inst_s1, inst_w1, modrm16<inst_opcode_4, reg_16>, inst_imm16> ;
			
			inst32_and	-> inst_and_reg_mem<inst_w0, modrm32<reg_8, reg_8>>
						|  inst_and_reg_mem<inst_w1, modrm32<reg_32, reg_32>>
						|  inst_and_mem_reg<inst_w0, modrm32<reg_8, reg_8>>
						|  inst_and_mem_reg<inst_w1, modrm32<reg_32, reg_32>>
						|  inst_and_imm_acc<inst_w0, inst_imm8>
						|  inst_and_imm_acc<inst_w1, inst_imm32>
						|  inst_and_imm_mem<inst_s0, inst_w0, modrm32<inst_opcode_4, reg_8>, inst_imm8>
						|  inst_and_imm_mem<inst_s1, inst_w0, modrm32<inst_opcode_4, reg_32>, inst_imm8>
						|  inst_and_imm_mem<inst_s0, inst_w1, modrm32<inst_opcode_4, reg_32>, inst_imm32>
						|  inst_and_imm_mem<inst_s1, inst_w1, modrm32<inst_opcode_4, reg_32>, inst_imm32> ;
			
			/* ARPL */
			inst_arpl<modrm>	-> 0x63 modrm ;
			inst16_arpl			-> inst_arpl<modrm16<reg_16, reg_16>> ;
			inst32_arpl			-> inst_arpl<modrm32<reg_32, reg_32>> ;
			
			/* BOUND */
			inst_bound<modrm>	-> 0x62 modrm ;
			inst16_bound		-> inst_bound<modrm16<reg_16, reg_16>> ;
			inst32_bound		-> inst_bound<modrm32<reg_32, reg_32>> ;
			
			/* BSF */
			inst_bsf<modrm>		-> 0x0F 0xBC modrm ;
			inst16_bsf			-> inst_bsf<modrm16<reg_16, reg_16>> ;
			inst32_bsf			-> inst_bsf<modrm32<reg_32, reg_32>> ;
			
			/* BSR */
			inst_bsr<modrm>		-> 0x0F 0xBD modrm ;
			inst16_bsr			-> inst_bsr<modrm16<reg_16, reg_16>> ;
			inst32_bsr			-> inst_bsr<modrm32<reg_32, reg_32>> ;
			
			/* BSWAP */
			inst16_bswap		-> 0x0F 0b11001 reg_16 ;
			inst32_bswap		-> 0x0F 0b11001 reg_32 ;
			
			/* BT */
			inst_bt_mem_imm<modrm>	-> 0x0F 0xBA modrm inst_imm8 ;
			inst_bt_mem_reg<modrm>	-> 0x0F 0xA3 modrm ;
			inst16_bt	-> inst_bt_mem_imm<modrm16<inst_opcode_4, reg_16>>
						|  inst_bt_mem_reg<modrm16<reg_16, reg_16>> ;
			inst32_bt	-> inst_bt_mem_imm<modrm32<inst_opcode_4, reg_32>>
						|  inst_bt_mem_reg<modrm16<reg_32, reg_32>> ;
			
			
			
			
			inst16 -> inst_aaa | inst_aad | inst_aam | inst_aas | inst16_adc | inst16_add | inst16_and
					| inst16_arpl | inst16_bound | inst16_bsf | inst16_bsr | inst16_bswap | inst16_bt;
			inst32 -> inst_aaa | inst_aad | inst_aam | inst_aas | inst32_adc | inst32_add | inst32_and
					| inst32_arpl | inst32_bound | inst32_bsf | inst32_bsr | inst32_bswap | inst32_bt;
			
			inst -> inst32 ;
		}
	}
}