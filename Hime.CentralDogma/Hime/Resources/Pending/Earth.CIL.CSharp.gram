namespace Hime.Earth.CIL
{
	public grammar cf GrammarCSharp
	{
		options
		{
			Axiom = "compilation_unit";
			Separator = "SEPARATOR";
		}
		terminals
		{
			NEW_LINE		-> 0x000D /* CR */
							|  0x000A /* LF */
							|  0x000D 0x000A /* CR LF */
							|  0x2028 /* LS */
							|  0x2029 /* PS */ ;
			WHITE_SPACE		-> 0x0020 | 0x0009 | 0x000B | 0x000C ;
			COMMENT_LINE	-> '//' (0x0000 .. 0xFFFF - NEW_LINE) NEW_LINE ;
			COMMENT_BLOCK	-> '/*' ([^*] | '*' [^/])* '*/' ;
			SEPARATOR		-> (NEW_LINE | WHITE_SPACE | COMMENT_LINE | COMMENT_BLOCK)+;
			
			NULL_LITTERAL				-> 'null' ;
			BOOLEAN_LITTERAL_TRUE		-> 'true' ;
			BOOLEAN_LITTERAL_FALSE		-> 'false' ;
			INTEGER_LITTERAL_SUFFIX		-> 'U' | 'u' | 'L' | 'l' | 'UL' | 'Ul' | 'uL' | 'ul' | 'LU' | 'Lu' | 'lU' | 'lu' ;
			INTEGER_LITTERAL_DECIMAL	-> [1-9] [0-9]* | '0' INTEGER_LITTERAL_SUFFIX? ;
			INTEGER_LITTERAL_HEXA		-> '0' ('x' | 'X') [a-fA-F0-9]+ INTEGER_LITTERAL_SUFFIX? ;
			REAL_LITTERAL_SUFFIX		-> 'F' | 'f' | 'D' | 'd' | 'M' | 'm' ;
			REAL_LITTERAL				-> INTEGER_LITTERAL_DECIMAL? '.' INTEGER_LITTERAL_DECIMAL  (('e' | 'E') ('+' | '-')? INTEGER_LITTERAL_DECIMAL)? REAL_LITTERAL_SUFFIX?
										|  INTEGER_LITTERAL_DECIMAL ('e' | 'E') ('+' | '-')? INTEGER_LITTERAL_DECIMAL REAL_LITTERAL_SUFFIX?
										|  INTEGER_LITTERAL_DECIMAL REAL_LITTERAL_SUFFIX ;
			CHARACTER_LITTERAL			-> '\'' ( (0x0000 .. 0xFFFF - ('\'' | '\\' | NEW_LINE))
												| '\\' ('\'' | '"' | '\'' | '\\' | [0abfnrtv])
												| '\\' 'x' [a-fA-F0-9] [a-fA-F0-9]? [a-fA-F0-9]? [a-fA-F0-9]?
												| '\\' ('u' | 'U') [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] ([a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9])?
											) '\'' ;
			STRING_LITTERAL_REGULAR		-> '"'  ( (0x0000 .. 0xFFFF - ('"' | '\\' | NEW_LINE))
												| '\\' ('\'' | '"' | '\'' | '\\' | [0abfnrtv])
												| '\\' 'x' [a-fA-F0-9] [a-fA-F0-9]? [a-fA-F0-9]? [a-fA-F0-9]?
												| '\\' ('u' | 'U') [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] ([a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9])?
											)* '"' ;
			STRING_LITTERAL_VERBATIM	-> '@' '"' ([^"] | '""')* '"' ;
			
			IDENTIFIER		-> '@'? [a-zA-Z] [a-zA-Z0-9_]* ;
		}
		rules
		{
			qualified_name		-> IDENTIFIER ('.' IDENTIFIER)* ;
			
			/* Types grammar */
			type					-> type_non_array
									|  type_array ;
			type_non_array			-> type_object
									|  type_simple ;
			type_object				-> 'object'
									|  'string'
									|  qualified_name ;
			type_simple				-> 'bool'
									|  'decimal'
									|  type_simple_integral
									|  type_simple_float ;
			type_simple_integral	-> 'sbyte'
									|  'byte'
									|  'short'
									|  'ushort'
									|  'int'
									|  'uint'
									|  'long'
									|  'ulong'
									|  'char' ;
			type_simple_float		-> 'float' | 'double' ;
			type_array				-> type_non_array type_array_rank+ ;
			type_array_rank			-> '[' type_array_rank_dim ']' ;
			type_array_rank_dim		-> ','* ;
			type_predefined			-> 'bool' | 'byte' | 'char' | 'decimal' | 'double' | 'float' | 'int' | 'long'
									|  'object' | 'sbyte' | 'short' | 'string' | 'uint' | 'ulong' | 'ushort' ;
			type_return				-> 'void' | type ;
			
			
			/* Expressions grammar */
			exp_atom				-> NULL_LITTERAL
									|  BOOLEAN_LITTERAL_TRUE
									|  BOOLEAN_LITTERAL_FALSE
									|  INTEGER_LITTERAL_DECIMAL
									|  INTEGER_LITTERAL_HEXA
									|  REAL_LITTERAL
									|  CHARACTER_LITTERAL
									|  STRING_LITTERAL_REGULAR
									|  STRING_LITTERAL_VERBATIM
									|  IDENTIFIER
									|  'this'
									|  'base'
									|  '(' expression ')' ;
			
			exp_op0_invoke			-> exp_op0 '(' exp_argument_list? ')' ;
			exp_op0_obj_creation	-> 'new' type '(' exp_argument_list? ')' ;
			exp_op0_post_increment	-> exp_op0 '++' ;
			exp_op0_post_decrement	-> exp_op0 '--' ;
			exp_op0_member_access	-> exp_op0 '.' IDENTIFIER
									|  type_predefined '.' IDENTIFIER ;
			exp_op0_element_access	-> exp_op0_no_array '[' exp_expression_list? ']' ;
			exp_op0_typeof			-> 'typeof' '(' type_return ')' ;
			exp_op0_checked			-> 'checked' '(' expression ')' ;
			exp_op0_unchecked		-> 'unchecked' '(' expression ')' ;
			exp_op0_array_creation	-> 'new' type_non_array '[' exp_expression_list ']' type_array_rank?  array_initializer?
									|  'new' type_array array_initializer ;
			exp_op0_no_array		-> exp_atom
									|  exp_op0_invoke
									|  exp_op0_obj_creation
									|  exp_op0_post_increment
									|  exp_op0_post_decrement
									|  exp_op0_member_access
									|  exp_op0_typeof
									|  exp_op0_checked
									|  exp_op0_unchecked ;
			exp_op0					-> exp_op0_no_array
									|  exp_op0_array_creation ;
			
			exp_op1_pre_increment	-> '++' exp_op1 ;
			exp_op1_pre_decrement	-> '--' exp_op1 ;
			exp_op1_cast			-> '(' type ')' exp_op1 ;
			exp_op1					-> exp_op0
									|  '+' exp_op1
									|  '-' exp_op1
									|  '!' exp_op1
									|  '~' exp_op1
									|  exp_op1_pre_increment
									|  exp_op1_pre_decrement
									|  exp_op1_cast ;
			
			exp_op2					-> exp_op1
									|  exp_op2 '*' exp_op1
									|  exp_op2 '/' exp_op1
									|  exp_op2 '%' exp_op1 ;
			exp_op3					-> exp_op2
									|  exp_op3 '+' exp_op2
									|  exp_op3 '-' exp_op2 ;
			exp_op4					-> exp_op3
									|  exp_op4 '<<' exp_op3
									|  exp_op4 '>>' exp_op3 ;
			exp_op5					-> exp_op4
									|  exp_op5 '<' exp_op4
									|  exp_op5 '<=' exp_op4
									|  exp_op5 '>' exp_op4
									|  exp_op5 '>=' exp_op4
									|  exp_op5 'is' exp_op4
									|  exp_op5 'as' exp_op4 ;
			exp_op6					-> exp_op5
									|  exp_op6 '==' exp_op5
									|  exp_op6 '!=' exp_op5 ;
			exp_op7					-> exp_op6
									|  exp_op7 '&' exp_op6 ;
			exp_op8					-> exp_op7
									|  exp_op8 '^' exp_op7 ;
			exp_op9					-> exp_op8
									|  exp_op9 '|' exp_op8 ;
			exp_op10				-> exp_op9
									|  exp_op10 '&&' exp_op9 ;
			exp_op11				-> exp_op10
									|  exp_op11 '||' exp_op10 ;
			
			exp_op12_conditional	-> exp_op11
									|  exp_op11 '?' expression ':' expression ;
			exp_op13_assigment		-> exp_op1 '=' expression
									|  exp_op1 '+=' expression
									|  exp_op1 '-=' expression
									|  exp_op1 '*=' expression
									|  exp_op1 '/=' expression
									|  exp_op1 '%=' expression
									|  exp_op1 '&=' expression
									|  exp_op1 '|=' expression
									|  exp_op1 '^=' expression
									|  exp_op1 '<<=' expression
									|  exp_op1 '>>=' expression ;
			
			expression				-> exp_op12_conditional
									|  exp_op13_assigment ;
			exp_expression_list		-> expression
									|  exp_expression_list ',' expression ;
			exp_argument_list		-> exp_argument
									|  exp_argument_list ',' exp_argument ;
			exp_argument			-> expression
									|  'ref' expression
									|  'out' expression ;


			/* Method parameters grammar */
			method_parameter_modifier	-> 'ref' | 'out' ;
			method_parameter_fixed		-> attributes method_parameter_modifier? type IDENTIFIER ;
			method_parameter_array		-> attributes 'params' type_array IDENTIFIER ;
			method_parameter_fixed_list	-> method_parameter_fixed
										|  method_parameter_fixed_list ',' method_parameter_fixed ;
			method_parameters			-> method_parameter_fixed_list (',' method_parameter_array)?
										|  method_parameter_array ;
			
			/* Variables and array grammar */
			array_initializer			-> '{' variable_initializer_list '}' ;
			variable_initializer		-> expression
										|  array_initializer ;
			variable_initializer_list	-> (variable_initializer (',' variable_initializer)*)? ;
			variable_declarator			-> IDENTIFIER
										|  IDENTIFIER '=' variable_initializer ;
			variable_declarators		-> variable_declarator (',' variable_declarator)* ;
			
			
			/* Statements grammar */
			stmt_empty					-> ';' ;
			stmt_labeled				-> IDENTIFIER ':' statement ;
			stmt_variable_declaration	-> type variable_declarators ';' ;
			stmt_constant_declaration	-> 'const' type variable_declarators ';' ;
			
			stmt_exp					-> exp_op0_invoke
										|  exp_op0_obj_creation
										|  exp_op13_assigment
										|  exp_op0_post_increment
										|  exp_op0_post_decrement
										|  exp_op1_pre_increment
										|  exp_op1_pre_decrement ;
			stmt_exp_list				-> stmt_exp (',' stmt_exp)* ;
			stmt_expression				-> stmt_exp ';' ;
			
			stmt_if_matched				-> 'if' '(' expression ')' (stmt_embedded_base | stmt_if_matched) 'else' (stmt_embedded_base | stmt_if_matched) ;
			stmt_if_open				-> 'if' '(' expression ')' stmt_embedded
										|  'if' '(' expression ')' (stmt_embedded_base | stmt_if_matched) 'else' stmt_if_open ;
			stmt_switch_label			-> 'case' expression ':'
										|  'default' ':' ;
			stmt_switch_section			-> stmt_switch_label+ stmt_list ;
			stmt_switch_block			-> '{' stmt_switch_section* '}' ;
			stmt_switch					-> 'switch' '(' expression ')' stmt_switch_block ;
			stmt_do						-> 'do' stmt_embedded 'while' '(' expression ')' ';' ;
			stmt_while					-> 'while' '(' expression ')' stmt_embedded ;
			stmt_for_initializer		-> type variable_declarators
										|  stmt_exp_list ;
			stmt_for_condition			-> expression ;
			stmt_for_iterator			-> stmt_exp_list ;
			stmt_for					-> 'for' '(' stmt_for_initializer? ';' stmt_for_condition? ';' stmt_for_iterator? ')' stmt_embedded ;
			stmt_foreach				-> 'foreach' '(' type IDENTIFIER 'in' expression ')' stmt_embedded ;
			stmt_jump_break				-> 'break' ';' ;
			stmt_jump_continue			-> 'continue' ';' ;
			stmt_jump_goto				-> 'goto' IDENTIFIER ';'
										|  'goto' 'case' expression ';'
										|  'goto' 'default' ';' ;
			stmt_jump_return			-> 'return' expression? ';' ;
			stmt_jump_throw				-> 'throw' expression? ';' ;
			stmt_try_clause_catch_gen	-> 'catch' stmt_block ;
			stmt_try_clause_catch_spec	-> 'catch' '(' type_object IDENTIFIER? ')' stmt_block ;
			stmt_try_clause_finally		-> 'finally' stmt_block ;
			stmt_try_clauses			-> stmt_try_clause_catch_spec+ stmt_try_clause_catch_gen? stmt_try_clause_finally?
										|  stmt_try_clause_catch_gen stmt_try_clause_finally?
										|  stmt_try_clause_finally ;
			stmt_try					-> 'try' stmt_block stmt_try_clauses ;
			stmt_unchecked				-> 'unchecked' stmt_block ;
			stmt_checked				-> 'checked' stmt_block ;
			stmt_lock					-> 'lock' '(' expression ')' stmt_block ;
			stmt_using_resource			-> type variable_declarators
										|  expression ;
			stmt_using					-> 'using' '(' stmt_using_resource ')' stmt_embedded ;
			
			stmt_embedded_base			-> stmt_block
										|  stmt_empty
										|  stmt_expression
										|  stmt_switch
										|  stmt_do
										|  stmt_while
										|  stmt_for
										|  stmt_foreach
										|  stmt_jump_break
										|  stmt_jump_continue
										|  stmt_jump_goto
										|  stmt_jump_return
										|  stmt_jump_throw
										|  stmt_try
										|  stmt_unchecked
										|  stmt_checked
										|  stmt_lock
										|  stmt_using ;
			stmt_embedded				-> stmt_embedded_base
										|  stmt_if_matched
										|  stmt_if_open ;
			statement					-> stmt_embedded
										|  stmt_labeled
										|  stmt_variable_declaration
										|  stmt_constant_declaration ;
			stmt_list					-> statement+ ;
			stmt_block					-> '{' stmt_list? '}' ;
			

			/* Classes grammar */
			obj_accessor_body				-> ';' | stmt_block ;
			obj_accessor_get_declaration	-> attributes? 'get' obj_accessor_body ;
			obj_accessor_set_declaration	-> attributes? 'set' obj_accessor_body ;
			obj_accessor_add_declaration	-> attributes? 'add'  stmt_block ;
			obj_accessor_remove_declaration	-> attributes? 'remove' stmt_block ;
			
			obj_const_modifier				-> 'new' | 'public' | 'protected' | 'internal' | 'private' ;
			obj_const_modifiers				-> obj_const_modifier* ;
			obj_const_declarator			-> IDENTIFIER '=' expression ;
			obj_const_declarators			-> obj_const_declarator (',' obj_const_declarator)* ;
			obj_const_declaration			-> attributes obj_const_modifiers 'const' type obj_const_declarators ';' ;
			
			obj_field_modifier				-> 'new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'readonly' | 'volatile' ;
			obj_field_modifiers				-> obj_field_modifier* ;
			obj_field_declaration			-> attributes obj_field_modifiers type variable_declarators ';' ;
			
			obj_method_modifier				-> 'new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'virtual' | 'sealed' | 'override' | 'abstract' | 'extern' ;
			obj_method_modifiers			-> obj_method_modifier* ;
			obj_method_header				-> attributes obj_method_modifiers type_return qualified_name '(' method_parameters? ')' ;
			obj_method_body					-> stmt_block | ';' ;
			obj_method_declaration			-> obj_method_header obj_method_body ;
			
			obj_property_modifier			-> 'new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'virtual' | 'sealed' | 'override' | 'abstract' | 'extern';
			obj_property_modifiers			-> obj_property_modifier* ;
			obj_property_accessors			-> obj_accessor_get_declaration obj_accessor_set_declaration?
											|  obj_accessor_set_declaration obj_accessor_get_declaration? ;
			obj_property_declaration		-> attributes obj_property_modifiers type qualified_name '{' obj_property_accessors '}' ;
			
			obj_event_modifier				-> 'new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'virtual' | 'sealed' | 'override' | 'abstract' | 'extern' ;
			obj_event_modifiers				-> obj_event_modifier* ;
			obj_event_accessors				-> obj_accessor_add_declaration obj_accessor_remove_declaration
											|  obj_accessor_remove_declaration obj_accessor_add_declaration ;
			obj_event_declaration			-> attributes obj_event_modifiers 'event' type variable_declarators ';'
											|  attributes obj_event_modifiers 'event' type qualified_name '{' obj_event_accessors '}' ;
			
			obj_indexer_modifier			-> 'new' | 'public' | 'protected' | 'internal' | 'private' | 'virtual' | 'sealed' | 'override' | 'abstract' | 'extern' ;
			obj_indexer_modifiers			-> obj_indexer_modifier* ;
			obj_indexer_declarator			-> type 'this' '[' method_parameters? ']'
											|  type qualified_name '.' 'this' '[' method_parameters? ']' ;
			obj_indexer_declaration			-> attributes obj_indexer_modifiers obj_indexer_declarator '{' obj_property_accessors '}' ;
			
			obj_operator_modifier			-> 'public' | 'static' | 'extern' ;
			obj_operator_modifiers			-> obj_operator_modifier* ;
			obj_operator_binary				-> '+' | '-' | '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>>' | '==' | '!=' | '>' | '<' | '>=' | '<=' ;
			obj_operator_unary				-> '+' | '-' | '!' | '~' | '++' | '--' | 'true' | 'false' ;
			obj_operator_body				-> ';' | stmt_block ;
			obj_operator_binary_declarator	-> type 'operator' obj_operator_binary '(' type IDENTIFIER ',' type IDENTIFIER ')' ;
			obj_operator_unary_declarator	-> type 'operator' obj_operator_unary '(' type IDENTIFIER ')' ;
			obj_operator_conv_declarator	-> ('implicit' | 'explicit') 'operator' type '(' type IDENTIFIER ')' ;
			obj_operator_declarator			-> obj_operator_binary_declarator | obj_operator_unary_declarator | obj_operator_conv_declarator ;
			obj_operator_declaration		-> attributes obj_operator_modifiers obj_operator_declarator obj_operator_body ;
			
			obj_ctor_modifier				-> 'public' | 'protected' | 'internal' | 'private' | 'extern' ;
			obj_ctor_modifiers				-> obj_ctor_modifier* ;
			obj_ctor_body					-> ';' | stmt_block ;
			obj_ctor_initializer			-> ':' ('base' | 'this') '(' exp_argument_list? ')' ;
			obj_ctor_declarator				-> IDENTIFIER '(' method_parameters? ')' obj_ctor_initializer ;
			obj_ctor_declaration			-> attributes obj_ctor_modifiers obj_ctor_declarator obj_ctor_body ;
			
			obj_static_ctor_modifiers		-> 'extern'? 'static'
											|  'static' 'extern'? ;
			obj_static_ctor_body			-> ';' | stmt_block ;
			obj_static_ctor_declaration		-> attributes obj_static_ctor_modifiers IDENTIFIER '(' ')' obj_static_ctor_body ;
			
			obj_destructor_body				-> ';' | stmt_block ;
			obj_destructor_declaration		-> attributes 'extern'? '~' IDENTIFIER '(' ')' obj_destructor_body ;
			
			obj_type_declaration			-> /*class_declaration
											|  struct_declaration
											|  */ interface_declaration
											|  enum_declaration
											|  delegate_declaration ;
			obj_type_modifier				-> 'new' | 'public' | 'protected' | 'internal' | 'private' ;
			obj_type_modifiers				-> obj_type_modifier* ;
			
			class_modifiers					-> obj_type_modifiers ('abstract' | 'sealed')? ;
			class_base_list					-> qualified_name (',' qualified_name)* ;
			class_base						-> (':' class_base_list)? ;
			class_member_declaration		-> obj_const_declaration
											|  obj_field_declaration
											|  obj_method_declaration
											|  obj_property_declaration
											|  obj_event_declaration
											|  obj_indexer_declaration
											|  obj_operator_declaration
											|  obj_ctor_declaration
											|  obj_static_ctor_declaration
											|  obj_destructor_declaration
											|  obj_type_declaration ;
			class_members					-> class_member_declaration* ;
			class_body						-> '{' class_members '}' ;
			class_declaration				-> attributes class_modifiers 'class' IDENTIFIER class_base class_body ';'? ;
			
			
			/* Structs grammar */
			struct_base_list				-> qualified_name (',' qualified_name)* ;
			struct_base						-> (':' struct_base_list)? ;
			struct_member_declaration		-> obj_const_declaration
											|  obj_field_declaration
											|  obj_method_declaration
											|  obj_property_declaration
											|  obj_event_declaration
											|  obj_indexer_declaration
											|  obj_operator_declaration
											|  obj_ctor_declaration
											|  obj_static_ctor_declaration
											|  obj_type_declaration ;
			struct_members					-> struct_member_declaration* ;
			struct_body						-> '{' struct_members '}' ;
			struct_declaration				-> attributes obj_type_modifiers 'struct' IDENTIFIER struct_base struct_body ';'? ;
			
			
			/* Interfaces grammar */
			interface_accessors				-> attributes 'get' ';' (attributes 'set' ';')?
											|  attributes 'set' ';' (attributes 'get' ';')? ;
			interface_indexer_declaration	-> attributes 'new'? type 'this' '[' method_parameters? ']' '{' interface_accessors '}' ;
			interface_event_declaration		-> attributes 'new'? 'event' type IDENTIFIER ';' ;
			interface_property_declaration	-> attributes 'new'? type IDENTIFIER '{' interface_accessors '}' ;
			interface_method_declaration	-> attributes 'new'? type_return IDENTIFIER '(' method_parameters? ')' ';' ;
			interface_member_declaration	-> interface_indexer_declaration
											|  interface_event_declaration
											|  interface_property_declaration
											|  interface_method_declaration ;
			interface_body					-> '{' interface_member_declaration* '}' ;
			interface_base_list				-> qualified_name (',' qualified_name)* ;
			interface_base					-> (':'  interface_base_list)? ;
			interface_declaration			-> attributes obj_type_modifiers 'interface' IDENTIFIER interface_base interface_body ';'? ;
			
			
			/* Enum grammar */
			enum_member_declaration			-> attributes IDENTIFIER '=' expression ;
			enum_member_declaration_list	-> (enum_member_declaration (',' enum_member_declaration)*)? ;
			enum_body						-> '{' enum_member_declaration_list '}' ;
			enum_base						-> (':' type_simple_integral)? ;
			enum_declaration				-> attributes obj_type_modifiers 'enum' IDENTIFIER enum_base enum_body ';'? ;
			
			
			/* Delegates grammar */
			delegate_declaration	-> attributes obj_type_modifiers 'delegate' type_return IDENTIFIER '(' method_parameters? ')' ';' ;
			
			
			/* Attributes grammar */
			attribute_argument_positional		-> exp_op12_conditional ;
			attribute_argument_named			-> IDENTIFIER '=' exp_op12_conditional ;
			attribute_argument_positional_list	-> attribute_argument_positional
												|  attribute_argument_positional_list ',' attribute_argument_positional ;
			attribute_argument_named_list		-> attribute_argument_named
												|  attribute_argument_named_list ',' attribute_argument_named ;
			attribute_argument_list				-> attribute_argument_positional_list?
												|  attribute_argument_positional_list ',' attribute_argument_named_list
												|  attribute_argument_named_list ;
			
			attribute_arguments					-> '(' attribute_argument_list ')' ;
			attribute							-> qualified_name attribute_arguments? ;
			
			attribute_list						-> attribute (',' attribute)* ;
			attribute_target					-> 'field' | 'event' | 'method' | 'param' | 'property' | 'return' | 'type';
			attribute_section					-> '[' (attribute_target ':')? attribute_list ']' ;
			attributes							-> attribute_section* ;
			
			global_attribute_target				-> 'assembly' | 'module' ;
			global_attribute_section			-> '[' global_attribute_target ':' attribute_list ']' ;
			global_attributes					-> global_attribute_section* ;
			
			
			/* Namespaces grammar */
			directive_using_namespace		-> 'using' qualified_name ';' ;
			directive_using_alias			-> 'using' IDENTIFIER '=' qualified_name ';' ;
			directive						-> directive_using_namespace | directive_using_alias ;
			directives						-> directive* ;
			
			namespace_member_declaration	-> obj_type_declaration
											|  namespace_declaration ;
			namespace_members				-> namespace_member_declaration* ;
			namespace_body					-> '{' directives namespace_members '}' ;
			namespace_declaration			-> 'namespace' qualified_name namespace_body ';'? ;
			
			compilation_unit				-> /*directives global_attributes*/ namespace_members ;
		}
	}
}