namespace Hime.Kernel
{
	public grammar cf GrammarKernel
	{
		options {}
		terminals
		{
			NEW_LINE		-> 0x000D /* CR */
							|  0x000A /* LF */
							|  0x000D 0x000A /* CR LF */
							|  0x2028 /* LS */
							|  0x2029 /* PS */ ;
			WHITE_SPACE		-> 0x0020 | 0x0009 | 0x000B | 0x000C ;
			COMMENT_LINE	-> '//' ((0x0000 .. 0xFFFF)* - ((0x0000 .. 0xFFFF)* NEW_LINE (0x0000 .. 0xFFFF)*)) NEW_LINE ;
			COMMENT_BLOCK	-> '/*' ([^*] | '*' [^/])* '*/' ;
			SEPARATOR		-> (NEW_LINE | WHITE_SPACE | COMMENT_LINE | COMMENT_BLOCK)+;
			
			NAME_CHARACTER_FIRST	-> [_a-zA-Z] | \ub{IsGreek};
			NAME_CHARACTER			-> NAME_CHARACTER_FIRST | [0-9] ;
			NAME					-> '@'? NAME_CHARACTER_FIRST NAME_CHARACTER* ;
		}
		rules
		{
			qualified_name		-> NAME ('.'! NAME)* ;
			
			symbol_access_public		-> "access_public"^    'public'! ;
			symbol_access_private		-> "access_private"^   'private'! ;
			symbol_access_protected		-> "access_protected"^ 'protected'! ;
			symbol_access_internal		-> "access_internal"^  'internal'! ;
			
			Namespace_child_symbol		-> Namespace^ ;
			Namespace_content			-> Namespace_child_symbol* ;
			Namespace					-> 'namespace'! qualified_name '{'! Namespace_content '}'! ;
		}
	}
	
	
	
	public grammar cf FileCentralDogma : GrammarKernel, Hime.Generators.Parsers.GrammarContextFree, Hime.Generators.Parsers.GrammarContextSensitive
	{
		options
		{
			Axiom = "file";
			Separator = "SEPARATOR";
		}
		terminals {}
		rules
		{
			file_item	-> Namespace_child_symbol^ ;
			file		-> file_item+;
		}
	}
}