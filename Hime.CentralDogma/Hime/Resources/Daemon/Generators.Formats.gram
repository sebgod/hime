namespace Hime.Generators.Formats
{
	public grammar cf GrammarFormat : Parsers.GrammarContextFree, Kernel.GrammarKernel
	{
		options { }
		terminals
		{
			SYMBOL_VALUE_BASE10	-> '0' | [1-9] [0-9]* ;
		}
		rules
		{
			type_atom_string	-> 'string'^ ;
			type_atom_int		-> 'byte'^
								|  'int16'^
								|  'int32'^
								|  'int64'^ ;
			type_atom			-> type_atom_int^
								|  type_atom_string^ ;
			type_named			-> qualified_name^ ;
			type_non_array		-> type_atom^
								|  type_named^ ;
			type_array			-> type_non_array '['! ']'! ;
			type				-> type_non_array^
								|  type_array^ ;
			
			exp_atom_value		-> SYMBOL_VALUE_UINT8^
								|  SYMBOL_VALUE_UINT16^
								|  SYMBOL_VALUE_UINT32^
								|  SYMBOL_VALUE_UINT64^
								|  SYMBOL_VALUE_UINT128^
								|  SYMBOL_VALUE_BINARY^
								|  SYMBOL_VALUE_BASE10^ ;
			exp_atom			-> '('! expression^ ')'!
								|  qualified_name^
								|  exp_atom_value^ ;
			exp_l0				-> exp_atom^
								|  '-' exp_l0^
								|  '+' exp_l0^ ;
			exp_l1				-> exp_l0^
								|  exp_l1 '*'^ exp_l0
								|  exp_l1 '/'^ exp_l0
								|  exp_l1 '%'^ exp_l0 ;
			exp_l2				-> exp_l1^
								|  exp_l2 '+'^ exp_l1
								|  exp_l2 '-'^ exp_l1 ;
			expression			-> exp_l2^ ;
			

			struct_field_access				-> symbol_access_public^
											|  symbol_access_private^
											|  symbol_access_protected^
											|  symbol_access_internal^ ;
			struct_field_attribute_pad_ref		-> 'padref'! '('! ('struct' | expression) ')'! ;
			struct_field_attribute_pad_begin	-> 'padbegin'! '('! expression ')'! ;
			struct_field_attribute_pad_end		-> 'padend'! '('! expression ')'! ;
			struct_field_attribute_at_address	-> 'address'! '('! expression ')'! ;
			struct_field_attribute_at_offset	-> 'offset'! '('! expression ')'! ;
			struct_field_attribute_length		-> 'length'! '('! expression ')'! ;
			struct_field_attribute_encoding		-> 'encoding'! '('! ('unicode' | 'utf-8' | 'utf-16' | 'ascii' | 'ansi') ')'! ;
			struct_field_attribute_null_term	-> 'nullterminated'! ;
			struct_field_attribute_array_length	-> 'arraylength'! '('! expression ')'! ;
			struct_field_attribute				-> struct_field_attribute_pad_ref^
												|  struct_field_attribute_pad_begin^
												|  struct_field_attribute_pad_end^
												|  struct_field_attribute_at_address^
												|  struct_field_attribute_at_offset^
												|  struct_field_attribute_length^
												|  struct_field_attribute_encoding^
												|  struct_field_attribute_null_term^
												|  struct_field_attribute_array_length^ ;
			struct_field_attributes			-> ( '['! struct_field_attribute (','! struct_field_attribute)* ']'! )? ;
			struct_field_value				-> ('='! expression)? ;
			struct_field					-> struct_field_access struct_field_attribute type NAME struct_field_value ';' ;
			
			struct_parency		-> (':'! qualified_name (','! qualified_name)*)? ;
			struct_access		-> symbol_access_public^
								|  symbol_access_private^
								|  symbol_access_protected^
								|  symbol_access_internal^ ;
			struct_modifiers	-> ('abstract')? ;
			struct_content		-> struct_field*;
			Struct				-> struct_access struct_modifiers 'struct'! NAME struct_parency
								   '{'! struct_content '}'! ;
			
			flag_member<Tval>	-> NAME '='! Tval ';'! ;
			flag_content<Tval>	-> flag_member<Tval>* ;
			flag_parency<Tint>	-> ':' Tint ;
			flag_access			-> symbol_access_public^
								|  symbol_access_private^
								|  symbol_access_protected^
								|  symbol_access_internal^ ;
			flag_T<Tint, Tval>	-> flag_access 'flag'! NAME flag_parency<Tint>
									'{'! flag_content<Tval> '}'! ;
			Flag				-> flag_T<int8, SYMBOL_VALUE_UINT8>
								|  flag_T<int16, SYMBOL_VALUE_UINT16>
								|  flag_T<int32, SYMBOL_VALUE_UINT32>
								|  flag_T<int64, SYMBOL_VALUE_UINT64> ;
			
			directive_axiom		-> '#axiom'! qualified_name ';'! ;
			directive			-> directive_axiom^ ;
			
			
			
			Namespace_child_symbol	-> Struct^ ;
			Namespace_child_symbol	-> Flag^ ;
			file_item				-> directive^ ;
		}
	}
}