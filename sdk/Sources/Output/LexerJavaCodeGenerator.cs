/*******************************************************************************
 * Copyright (c) 2017 Association Cénotélie (cenotelie.fr)
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this program.
 * If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/

using System.IO;
using Hime.Redist.Utils;
using Hime.SDK.Grammars;

namespace Hime.SDK.Output
{
	/// <summary>
	/// Represents a generator for lexer code for the Java platform
	/// </summary>
	public class LexerJavaCodeGenerator : Generator
	{
		/// <summary>
		/// The nmespace of the generated code
		/// </summary>
		private readonly string nmespace;
		/// <summary>
		/// The visibility modifier for the generated code
		/// </summary>
		private readonly Modifier modifier;
		/// <summary>
		/// The name of the generated lexer
		/// </summary>
		private readonly string name;
		/// <summary>
		/// Path to the automaton's binary resource
		/// </summary>
		private readonly string binResource;
		/// <summary>
		/// The terminals for the lexer
		/// </summary>
		private readonly ROList<Terminal> terminals;
		/// <summary>
		/// The contexts for the lexer
		/// </summary>
		private readonly ROList<string> contexts;
		/// <summary>
		/// The separator terminal
		/// </summary>
		private readonly Terminal separator;

		/// <summary>
		/// Initializes this code generator
		/// </summary>
		/// <param name="unit">The unit to generate code for</param>
		/// <param name="binResource">Path to the automaton's binary resource</param>
		public LexerJavaCodeGenerator(Unit unit, string binResource)
		{
			nmespace = unit.Namespace;
			modifier = unit.Modifier;
			name = unit.Name;
			this.binResource = binResource;
			terminals = unit.Expected;
			contexts = unit.Grammar.Contexts;
			separator = unit.Separator;
		}

		/// <summary>
		/// Writes a generated .Net file header
		/// </summary>
		/// <param name="writer">The writer to write to</param>
		private void WriteHeader(StreamWriter writer)
		{
			writer.WriteLine("/*");
			writer.WriteLine(" * WARNING: this file has been generated by");
			writer.WriteLine(" * Hime Parser Generator " + CompilationTask.Version);
			writer.WriteLine(" */");
		}

		/// <summary>
		/// Generates code for the specified file
		/// </summary>
		/// <param name="file">The target file to generate code in</param>
		public void Generate(string file)
		{
			string baseLexer = contexts.Count > 1 ? "ContextSensitiveLexer" : "ContextFreeLexer";
			StreamWriter writer = new StreamWriter(file, false, new System.Text.UTF8Encoding(false));

			WriteHeader(writer);

			writer.WriteLine();
			writer.WriteLine("package " + nmespace + ";");
			writer.WriteLine();
			writer.WriteLine("import fr.cenotelie.hime.redist.Symbol;");
			writer.WriteLine("import fr.cenotelie.hime.redist.lexer.Automaton;");
			if (contexts.Count > 1)
				writer.WriteLine("import fr.cenotelie.hime.redist.lexer.ContextSensitiveLexer;");
			else
				writer.WriteLine("import fr.cenotelie.hime.redist.lexer.ContextFreeLexer;");
			writer.WriteLine();
			writer.WriteLine("import java.io.InputStreamReader;");
			writer.WriteLine();

			string mod = modifier == Modifier.Public ? "public " : "";

			writer.WriteLine("/**");
			writer.WriteLine(" * Represents a lexer");
			writer.WriteLine(" */");
			writer.WriteLine(mod + "class " + name + "Lexer extends " + baseLexer + " {");

			writer.WriteLine("    /**");
			writer.WriteLine("     * The automaton for this lexer");
			writer.WriteLine("     */");
			writer.WriteLine("    private static final Automaton commonAutomaton = Automaton.find(" + name + "Lexer.class, \"" + binResource + "\");");

			writer.WriteLine("    /**");
			writer.WriteLine("     * Contains the constant IDs for the terminals for this lexer");
			writer.WriteLine("     */");
			writer.WriteLine("    public static class ID {");
			for (int i = 2; i != terminals.Count; i++)
			{
				Terminal terminal = terminals[i];
				if (terminal.Name.StartsWith(Grammar.PREFIX_GENERATED_TERMINAL))
					continue;
				writer.WriteLine("        /**");
				writer.WriteLine("         * The unique identifier for terminal " + terminal.Name);
				writer.WriteLine("         */");
				writer.WriteLine("        public static final int {0} = 0x{1};", Helper.SanitizeNameJava(terminal.Name), terminal.ID.ToString("X4"));
			}
			writer.WriteLine("    }");

			writer.WriteLine("    /**");
			writer.WriteLine("     * Contains the constant IDs for the contexts for this lexer");
			writer.WriteLine("     */");
			writer.WriteLine("    public static class Context {");
			writer.WriteLine("        /**");
			writer.WriteLine("         * The unique identifier for the default context");
			writer.WriteLine("         */");
			writer.WriteLine("        public static final int DEFAULT = 0;");
			for (int i = 1; i != contexts.Count; i++)
			{
				string context = contexts[i];
				writer.WriteLine("        /**");
				writer.WriteLine("         * The unique identifier for context " + context);
				writer.WriteLine("         */");
				writer.WriteLine("        public static final int {0} = 0x{1};", context, i.ToString("X4"));
			}
			writer.WriteLine("    }");

			writer.WriteLine("    /**");
			writer.WriteLine("     * The collection of terminals matched by this lexer");
			writer.WriteLine("     *");
			writer.WriteLine("     * The terminals are in an order consistent with the automaton,");
			writer.WriteLine("     * so that terminal indices in the automaton can be used to retrieve the terminals in this table");
			writer.WriteLine("     */");
			writer.WriteLine("    private static final Symbol[] terminals = {");
			bool first = true;
			foreach (Terminal terminal in terminals)
			{
				if (!first)
					writer.WriteLine(",");
				writer.Write("        ");
				writer.Write("new Symbol(0x" + terminal.ID.ToString("X4") + ", \"" + terminal.ToString().Replace("\"", "\\\"") + "\")");
				first = false;
			}
			writer.WriteLine(" };");

			string sep = "FFFF";
			if (separator != null)
				sep = separator.ID.ToString("X4");

			writer.WriteLine("    /**");
			writer.WriteLine("     * Initializes a new instance of the lexer");
			writer.WriteLine("     *");
			writer.WriteLine("     * @param input The lexer's input");
			writer.WriteLine("     */");
			writer.WriteLine("    public " + name + "Lexer(String input) {");
			writer.WriteLine("        super(commonAutomaton, terminals, 0x" + sep + ", input);");
			writer.WriteLine("    }");

			writer.WriteLine("    /**");
			writer.WriteLine("     * Initializes a new instance of the lexer");
			writer.WriteLine("     *");
			writer.WriteLine("     * @param input The lexer's input");
			writer.WriteLine("     */");
			writer.WriteLine("    public " + name + "Lexer(InputStreamReader input) {");
			writer.WriteLine("        super(commonAutomaton, terminals, 0x" + sep + ", input);");
			writer.WriteLine("    }");
			writer.WriteLine("}");

			writer.Close();
		}
	}
}