/*
 * WARNING: this file has been generated by
 * Hime Parser Generator 1.0.0.0
 */

using System.Collections.Generic;
using Hime.Redist;
using Hime.Redist.Lexer;

namespace Hime.CentralDogma.Input
{
	/// <summary>
	/// Represents a lexer
	/// </summary>
	internal class FileCentralDogmaLexer : Lexer
	{
		/// <summary>
		/// The automaton for this lexer
		/// </summary>
		private static readonly Automaton automaton = Automaton.Find(typeof(FileCentralDogmaLexer), "FileCentralDogmaLexer.bin");
		/// <summary>
		/// The unique identifier for terminal NAME
		/// </summary>
		public const int NAME = 0xA;
		/// <summary>
		/// The unique identifier for terminal _t2A
		/// </summary>
		public const int _t2A = 0x61;
		/// <summary>
		/// The unique identifier for terminal INTEGER
		/// </summary>
		public const int INTEGER = 0xB;
		/// <summary>
		/// The unique identifier for terminal _t3
		/// </summary>
		public const int _t3 = 0x14;
		/// <summary>
		/// The unique identifier for terminal _t4
		/// </summary>
		public const int _t4 = 0x15;
		/// <summary>
		/// The unique identifier for terminal _t5
		/// </summary>
		public const int _t5 = 0x16;
		/// <summary>
		/// The unique identifier for terminal _t6
		/// </summary>
		public const int _t6 = 0x17;
		/// <summary>
		/// The unique identifier for terminal _t8
		/// </summary>
		public const int _t8 = 0x19;
		/// <summary>
		/// The unique identifier for terminal _t9
		/// </summary>
		public const int _t9 = 0x1A;
		/// <summary>
		/// The unique identifier for terminal _tA
		/// </summary>
		public const int _tA = 0x1B;
		/// <summary>
		/// The unique identifier for terminal _tB
		/// </summary>
		public const int _tB = 0x1C;
		/// <summary>
		/// The unique identifier for terminal _tC
		/// </summary>
		public const int _tC = 0x1D;
		/// <summary>
		/// The unique identifier for terminal _tD
		/// </summary>
		public const int _tD = 0x1E;
		/// <summary>
		/// The unique identifier for terminal _tE
		/// </summary>
		public const int _tE = 0x1F;
		/// <summary>
		/// The unique identifier for terminal _tF
		/// </summary>
		public const int _tF = 0x20;
		/// <summary>
		/// The unique identifier for terminal _t11
		/// </summary>
		public const int _t11 = 0x21;
		/// <summary>
		/// The unique identifier for terminal _t13
		/// </summary>
		public const int _t13 = 0x22;
		/// <summary>
		/// The unique identifier for terminal _t17
		/// </summary>
		public const int _t17 = 0x25;
		/// <summary>
		/// The unique identifier for terminal _t19
		/// </summary>
		public const int _t19 = 0x26;
		/// <summary>
		/// The unique identifier for terminal _t1A
		/// </summary>
		public const int _t1A = 0x27;
		/// <summary>
		/// The unique identifier for terminal _t1B
		/// </summary>
		public const int _t1B = 0x28;
		/// <summary>
		/// The unique identifier for terminal _t26
		/// </summary>
		public const int _t26 = 0x2C;
		/// <summary>
		/// The unique identifier for terminal _t2B
		/// </summary>
		public const int _t2B = 0x62;
		/// <summary>
		/// The unique identifier for terminal SEPARATOR
		/// </summary>
		public const int SEPARATOR = 0x7;
		/// <summary>
		/// The unique identifier for terminal _t28
		/// </summary>
		public const int _t28 = 0x2D;
		/// <summary>
		/// The unique identifier for terminal _t2D
		/// </summary>
		public const int _t2D = 0x63;
		/// <summary>
		/// The unique identifier for terminal QUOTED_DATA
		/// </summary>
		public const int QUOTED_DATA = 0xC;
		/// <summary>
		/// The unique identifier for terminal _t15
		/// </summary>
		public const int _t15 = 0x23;
		/// <summary>
		/// The unique identifier for terminal _t7
		/// </summary>
		public const int _t7 = 0x18;
		/// <summary>
		/// The unique identifier for terminal _t16
		/// </summary>
		public const int _t16 = 0x24;
		/// <summary>
		/// The unique identifier for terminal ESCAPEES
		/// </summary>
		public const int ESCAPEES = 0xD;
		/// <summary>
		/// The unique identifier for terminal SYMBOL_TERMINAL_TEXT
		/// </summary>
		public const int SYMBOL_TERMINAL_TEXT = 0xE;
		/// <summary>
		/// The unique identifier for terminal SYMBOL_TERMINAL_SET
		/// </summary>
		public const int SYMBOL_TERMINAL_SET = 0xF;
		/// <summary>
		/// The unique identifier for terminal SYMBOL_VALUE_UINT8
		/// </summary>
		public const int SYMBOL_VALUE_UINT8 = 0x12;
		/// <summary>
		/// The unique identifier for terminal SYMBOL_TERMINAL_UBLOCK
		/// </summary>
		public const int SYMBOL_TERMINAL_UBLOCK = 0x10;
		/// <summary>
		/// The unique identifier for terminal SYMBOL_TERMINAL_UCAT
		/// </summary>
		public const int SYMBOL_TERMINAL_UCAT = 0x11;
		/// <summary>
		/// The unique identifier for terminal _t24
		/// </summary>
		public const int _t24 = 0x2B;
		/// <summary>
		/// The unique identifier for terminal SYMBOL_VALUE_UINT16
		/// </summary>
		public const int SYMBOL_VALUE_UINT16 = 0x13;
		/// <summary>
		/// The unique identifier for terminal _t20
		/// </summary>
		public const int _t20 = 0x29;
		/// <summary>
		/// The unique identifier for terminal _t29
		/// </summary>
		public const int _t29 = 0x2E;
		/// <summary>
		/// The unique identifier for terminal _t22
		/// </summary>
		public const int _t22 = 0x2A;
		/// <summary>
		/// The collection of terminals matched by this lexer
		/// </summary>
		/// <remarks>
		/// The terminals are in an order consistent with the automaton,
		/// so that terminal indices in the automaton can be used to retrieve the terminals in this table
		/// </remarks>
		private static readonly Symbol[] terminals = {
			new Symbol(0x1, "Îµ"),
			new Symbol(0x2, "$"),
			new Symbol(0xA, "NAME"),
			new Symbol(0x61, "["),
			new Symbol(0xB, "INTEGER"),
			new Symbol(0x14, "="),
			new Symbol(0x15, ";"),
			new Symbol(0x16, "."),
			new Symbol(0x17, "~"),
			new Symbol(0x19, "("),
			new Symbol(0x1A, ")"),
			new Symbol(0x1B, "*"),
			new Symbol(0x1C, "+"),
			new Symbol(0x1D, "?"),
			new Symbol(0x1E, "{"),
			new Symbol(0x1F, ","),
			new Symbol(0x20, "}"),
			new Symbol(0x21, "-"),
			new Symbol(0x22, "|"),
			new Symbol(0x25, "<"),
			new Symbol(0x26, ">"),
			new Symbol(0x27, "^"),
			new Symbol(0x28, "!"),
			new Symbol(0x2C, ":"),
			new Symbol(0x62, "]"),
			new Symbol(0x7, "SEPARATOR"),
			new Symbol(0x2D, "cf"),
			new Symbol(0x63, "cs"),
			new Symbol(0xC, "QUOTED_DATA"),
			new Symbol(0x23, "=>"),
			new Symbol(0x18, ".."),
			new Symbol(0x24, "->"),
			new Symbol(0xD, "ESCAPEES"),
			new Symbol(0xE, "SYMBOL_TERMINAL_TEXT"),
			new Symbol(0xF, "SYMBOL_TERMINAL_SET"),
			new Symbol(0x12, "SYMBOL_VALUE_UINT8"),
			new Symbol(0x10, "SYMBOL_TERMINAL_UBLOCK"),
			new Symbol(0x11, "SYMBOL_TERMINAL_UCAT"),
			new Symbol(0x2B, "rules"),
			new Symbol(0x13, "SYMBOL_VALUE_UINT16"),
			new Symbol(0x29, "options"),
			new Symbol(0x2E, "grammar"),
			new Symbol(0x2A, "terminals") };
		/// <summary>
		/// Initializes a new instance of the lexer
		/// </summary>
		/// <param name="input">The lexer's input</param>
		public FileCentralDogmaLexer(string input) : base(automaton, terminals, 0x7, new System.IO.StringReader(input)) {}
		/// <summary>
		/// Initializes a new instance of the lexer
		/// </summary>
		/// <param name="input">The lexer's input</param>
		public FileCentralDogmaLexer(System.IO.TextReader input) : base(automaton, terminals, 0x7, input) {}
	}
}
