/*
 * WARNING: this file has been generated by
 * Hime Parser Generator 1.0.0.0
 */

using System.Collections.Generic;
using Hime.Redist;
using Hime.Redist.Parsers;

namespace Hime.CentralDogma.Input
{
	/// <summary>
	/// Represents a parser
	/// </summary>
	internal class FileCentralDogmaParser : LRkParser
	{
        private static readonly LRkAutomaton automaton = LRkAutomaton.Find(typeof(FileCentralDogmaParser), "FileCentralDogmaParser.bin");
		/// <summary>
		/// The collection of variables matched by this parser
		/// </summary>
		/// <remarks>
		/// The variables are in an order consistent with the automaton,
		/// so that variable indices in the automaton can be used to retrieve the variables in this table
		/// </remarks>
		private static readonly Symbol[] variables = {
			new Symbol(0x2F, "option"), 
			new Symbol(0x30, "terminal_def_atom_any"), 
			new Symbol(0x31, "terminal_def_atom_unicode"), 
			new Symbol(0x32, "terminal_def_atom_text"), 
			new Symbol(0x33, "terminal_def_atom_set"), 
			new Symbol(0x34, "terminal_def_atom_ublock"), 
			new Symbol(0x35, "terminal_def_atom_ucat"), 
			new Symbol(0x36, "terminal_def_atom_span"), 
			new Symbol(0x37, "terminal_def_atom"), 
			new Symbol(0x38, "terminal_def_element"), 
			new Symbol(0x39, "terminal_def_cardinalilty"), 
			new Symbol(0x3A, "terminal_def_repetition"), 
			new Symbol(0x3B, "terminal_def_fragment"), 
			new Symbol(0x3C, "terminal_def_restrict"), 
			new Symbol(0x3D, "terminal_definition"), 
			new Symbol(0x3E, "terminal_subgrammar"), 
			new Symbol(0x3F, "terminal"), 
			new Symbol(0x40, "rule_sym_action"), 
			new Symbol(0x41, "rule_sym_virtual"), 
			new Symbol(0x42, "rule_sym_ref_params"), 
			new Symbol(0x43, "rule_sym_ref_template"), 
			new Symbol(0x44, "rule_sym_ref_simple"), 
			new Symbol(0x45, "rule_def_atom"), 
			new Symbol(0x46, "rule_def_element"), 
			new Symbol(0x47, "rule_def_tree_action"), 
			new Symbol(0x48, "rule_def_repetition"), 
			new Symbol(0x49, "rule_def_fragment"), 
			new Symbol(0x4A, "rule_def_restrict"), 
			new Symbol(0x4B, "rule_def_choice"), 
			new Symbol(0x4C, "rule_definition"), 
			new Symbol(0x4D, "rule_template_params"), 
			new Symbol(0x4E, "cf_rule_template"), 
			new Symbol(0x4F, "cf_rule_simple"), 
			new Symbol(0x50, "grammar_options"), 
			new Symbol(0x51, "grammar_terminals"), 
			new Symbol(0x52, "grammar_cf_rules"), 
			new Symbol(0x53, "grammar_parency"), 
			new Symbol(0x54, "cf_grammar"), 
			new Symbol(0x55, "_v10"), 
			new Symbol(0x56, "_v12"), 
			new Symbol(0x57, "_v14"), 
			new Symbol(0x58, "_v18"), 
			new Symbol(0x59, "_v1C"), 
			new Symbol(0x5A, "_v1D"), 
			new Symbol(0x5B, "_v1E"), 
			new Symbol(0x5C, "_v1F"), 
			new Symbol(0x5D, "_v21"), 
			new Symbol(0x5E, "_v23"), 
			new Symbol(0x5F, "_v25"), 
			new Symbol(0x60, "_v27"), 
			new Symbol(0x64, "cs_rule_context"), 
			new Symbol(0x65, "cs_rule_template"), 
			new Symbol(0x66, "cs_rule_simple"), 
			new Symbol(0x67, "grammar_cs_rules"), 
			new Symbol(0x68, "cs_grammar"), 
			new Symbol(0x69, "_v2C"), 
			new Symbol(0x6A, "file_item"), 
			new Symbol(0x6B, "file"), 
			new Symbol(0x6C, "_v2E"), 
			new Symbol(0x6D, "_Axiom_") };
		/// <summary>
		/// The unique identifier for variable option
		/// </summary>
		public const int option = 0x2F;
		/// <summary>
		/// The unique identifier for variable terminal_def_atom_any
		/// </summary>
		public const int terminal_def_atom_any = 0x30;
		/// <summary>
		/// The unique identifier for variable terminal_def_atom_unicode
		/// </summary>
		public const int terminal_def_atom_unicode = 0x31;
		/// <summary>
		/// The unique identifier for variable terminal_def_atom_text
		/// </summary>
		public const int terminal_def_atom_text = 0x32;
		/// <summary>
		/// The unique identifier for variable terminal_def_atom_set
		/// </summary>
		public const int terminal_def_atom_set = 0x33;
		/// <summary>
		/// The unique identifier for variable terminal_def_atom_ublock
		/// </summary>
		public const int terminal_def_atom_ublock = 0x34;
		/// <summary>
		/// The unique identifier for variable terminal_def_atom_ucat
		/// </summary>
		public const int terminal_def_atom_ucat = 0x35;
		/// <summary>
		/// The unique identifier for variable terminal_def_atom_span
		/// </summary>
		public const int terminal_def_atom_span = 0x36;
		/// <summary>
		/// The unique identifier for variable terminal_def_atom
		/// </summary>
		public const int terminal_def_atom = 0x37;
		/// <summary>
		/// The unique identifier for variable terminal_def_element
		/// </summary>
		public const int terminal_def_element = 0x38;
		/// <summary>
		/// The unique identifier for variable terminal_def_cardinalilty
		/// </summary>
		public const int terminal_def_cardinalilty = 0x39;
		/// <summary>
		/// The unique identifier for variable terminal_def_repetition
		/// </summary>
		public const int terminal_def_repetition = 0x3A;
		/// <summary>
		/// The unique identifier for variable terminal_def_fragment
		/// </summary>
		public const int terminal_def_fragment = 0x3B;
		/// <summary>
		/// The unique identifier for variable terminal_def_restrict
		/// </summary>
		public const int terminal_def_restrict = 0x3C;
		/// <summary>
		/// The unique identifier for variable terminal_definition
		/// </summary>
		public const int terminal_definition = 0x3D;
		/// <summary>
		/// The unique identifier for variable terminal_subgrammar
		/// </summary>
		public const int terminal_subgrammar = 0x3E;
		/// <summary>
		/// The unique identifier for variable terminal
		/// </summary>
		public const int terminal = 0x3F;
		/// <summary>
		/// The unique identifier for variable rule_sym_action
		/// </summary>
		public const int rule_sym_action = 0x40;
		/// <summary>
		/// The unique identifier for variable rule_sym_virtual
		/// </summary>
		public const int rule_sym_virtual = 0x41;
		/// <summary>
		/// The unique identifier for variable rule_sym_ref_params
		/// </summary>
		public const int rule_sym_ref_params = 0x42;
		/// <summary>
		/// The unique identifier for variable rule_sym_ref_template
		/// </summary>
		public const int rule_sym_ref_template = 0x43;
		/// <summary>
		/// The unique identifier for variable rule_sym_ref_simple
		/// </summary>
		public const int rule_sym_ref_simple = 0x44;
		/// <summary>
		/// The unique identifier for variable rule_def_atom
		/// </summary>
		public const int rule_def_atom = 0x45;
		/// <summary>
		/// The unique identifier for variable rule_def_element
		/// </summary>
		public const int rule_def_element = 0x46;
		/// <summary>
		/// The unique identifier for variable rule_def_tree_action
		/// </summary>
		public const int rule_def_tree_action = 0x47;
		/// <summary>
		/// The unique identifier for variable rule_def_repetition
		/// </summary>
		public const int rule_def_repetition = 0x48;
		/// <summary>
		/// The unique identifier for variable rule_def_fragment
		/// </summary>
		public const int rule_def_fragment = 0x49;
		/// <summary>
		/// The unique identifier for variable rule_def_restrict
		/// </summary>
		public const int rule_def_restrict = 0x4A;
		/// <summary>
		/// The unique identifier for variable rule_def_choice
		/// </summary>
		public const int rule_def_choice = 0x4B;
		/// <summary>
		/// The unique identifier for variable rule_definition
		/// </summary>
		public const int rule_definition = 0x4C;
		/// <summary>
		/// The unique identifier for variable rule_template_params
		/// </summary>
		public const int rule_template_params = 0x4D;
		/// <summary>
		/// The unique identifier for variable cf_rule_template
		/// </summary>
		public const int cf_rule_template = 0x4E;
		/// <summary>
		/// The unique identifier for variable cf_rule_simple
		/// </summary>
		public const int cf_rule_simple = 0x4F;
		/// <summary>
		/// The unique identifier for variable grammar_options
		/// </summary>
		public const int grammar_options = 0x50;
		/// <summary>
		/// The unique identifier for variable grammar_terminals
		/// </summary>
		public const int grammar_terminals = 0x51;
		/// <summary>
		/// The unique identifier for variable grammar_cf_rules
		/// </summary>
		public const int grammar_cf_rules = 0x52;
		/// <summary>
		/// The unique identifier for variable grammar_parency
		/// </summary>
		public const int grammar_parency = 0x53;
		/// <summary>
		/// The unique identifier for variable cf_grammar
		/// </summary>
		public const int cf_grammar = 0x54;
		/// <summary>
		/// The unique identifier for variable _v10
		/// </summary>
		public const int _v10 = 0x55;
		/// <summary>
		/// The unique identifier for variable _v12
		/// </summary>
		public const int _v12 = 0x56;
		/// <summary>
		/// The unique identifier for variable _v14
		/// </summary>
		public const int _v14 = 0x57;
		/// <summary>
		/// The unique identifier for variable _v18
		/// </summary>
		public const int _v18 = 0x58;
		/// <summary>
		/// The unique identifier for variable _v1C
		/// </summary>
		public const int _v1C = 0x59;
		/// <summary>
		/// The unique identifier for variable _v1D
		/// </summary>
		public const int _v1D = 0x5A;
		/// <summary>
		/// The unique identifier for variable _v1E
		/// </summary>
		public const int _v1E = 0x5B;
		/// <summary>
		/// The unique identifier for variable _v1F
		/// </summary>
		public const int _v1F = 0x5C;
		/// <summary>
		/// The unique identifier for variable _v21
		/// </summary>
		public const int _v21 = 0x5D;
		/// <summary>
		/// The unique identifier for variable _v23
		/// </summary>
		public const int _v23 = 0x5E;
		/// <summary>
		/// The unique identifier for variable _v25
		/// </summary>
		public const int _v25 = 0x5F;
		/// <summary>
		/// The unique identifier for variable _v27
		/// </summary>
		public const int _v27 = 0x60;
		/// <summary>
		/// The unique identifier for variable cs_rule_context
		/// </summary>
		public const int cs_rule_context = 0x64;
		/// <summary>
		/// The unique identifier for variable cs_rule_template
		/// </summary>
		public const int cs_rule_template = 0x65;
		/// <summary>
		/// The unique identifier for variable cs_rule_simple
		/// </summary>
		public const int cs_rule_simple = 0x66;
		/// <summary>
		/// The unique identifier for variable grammar_cs_rules
		/// </summary>
		public const int grammar_cs_rules = 0x67;
		/// <summary>
		/// The unique identifier for variable cs_grammar
		/// </summary>
		public const int cs_grammar = 0x68;
		/// <summary>
		/// The unique identifier for variable _v2C
		/// </summary>
		public const int _v2C = 0x69;
		/// <summary>
		/// The unique identifier for variable file_item
		/// </summary>
		public const int file_item = 0x6A;
		/// <summary>
		/// The unique identifier for variable file
		/// </summary>
		public const int file = 0x6B;
		/// <summary>
		/// The unique identifier for variable _v2E
		/// </summary>
		public const int _v2E = 0x6C;
		/// <summary>
		/// The unique identifier for variable _Axiom_
		/// </summary>
		public const int _Axiom_ = 0x6D;
		/// <summary>
		/// The collection of virtuals matched by this parser
		/// </summary>
		/// <remarks>
		/// The virtuals are in an order consistent with the automaton,
		/// so that virtual indices in the automaton can be used to retrieve the virtuals in this table
		/// </remarks>
		private static readonly Symbol[] virtuals = {
			new Symbol(0, "range"), 
			new Symbol(0, "concat"), 
			new Symbol(0, "emptypart") };
		/// <summary>
		/// The unique identifier for virtual range
		/// </summary>
		public const int range = 0x0;
		/// <summary>
		/// The unique identifier for virtual concat
		/// </summary>
		public const int concat = 0x0;
		/// <summary>
		/// The unique identifier for virtual emptypart
		/// </summary>
		public const int emptypart = 0x0;
		/// <summary>
		/// Initializes a new instance of the parser
		/// </summary>
		/// <param name="lexer">The input lexer</param>
		public FileCentralDogmaParser(FileCentralDogmaLexer lexer) : base (automaton, variables, virtuals, null, lexer) { }
	}
}
