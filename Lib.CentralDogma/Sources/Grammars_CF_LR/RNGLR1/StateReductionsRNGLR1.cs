/**********************************************************************
* Copyright (c) 2013 Laurent Wouters and others
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as
* published by the Free Software Foundation, either version 3
* of the License, or (at your option) any later version.
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
* 
* You should have received a copy of the GNU Lesser General
* Public License along with this program.
* If not, see <http://www.gnu.org/licenses/>.
* 
* Contributors:
*     Laurent Wouters - lwouters@xowl.org
**********************************************************************/

using System.Collections.Generic;

namespace Hime.CentralDogma.Grammars.ContextFree.LR
{
    class StateReductionsRNGLR1 : StateReductions
    {
        public override TerminalSet ExpectedTerminals
        {
            get
            {
                TerminalSet Set = new TerminalSet();
                foreach (StateActionReduce Reduction in this)
                    Set.Add(Reduction.Lookahead);
                return Set;
            }
        }

        public StateReductionsRNGLR1() { }

        public override void Build(State Set)
        {
            // Build shift actions
            foreach (Symbol Next in Set.Children.Keys)
            {
                List<StateAction> Actions = new List<StateAction>();
                Actions.Add(new StateActionShift(Next, Set.Children[Next]));
            }

            // Redutions dictionnary for the given set
            Dictionary<Terminal, ItemLR1> Reductions = new Dictionary<Terminal, ItemLR1>();
            // Construct reductions
            foreach (ItemLR1 Item in Set.Items)
            {
                // Check for right nulled reduction
                if (Item.Action == ItemAction.Shift && !Item.BaseRule.CFBody.GetChoiceAt(Item.DotPosition).Firsts.Contains(Epsilon.Instance))
                    continue;
                bool rightnulled = (Item.DotPosition != Item.BaseRule.CFBody.GetChoiceAt(0).Length);
                // There is already a shift action for the lookahead => conflict
                if (Set.Children.ContainsKey(Item.Lookahead))
                {
                    StateReductionsLR1.HandleConflict_ShiftReduce("RNGLR(1)", conflicts, Item, Set, Item.Lookahead);
                    StateActionRNReduce Reduction = new StateActionRNReduce(Item.Lookahead, Item.BaseRule, Item.DotPosition);
                    this.Add(Reduction);
                }
                // There is already a reduction action for the lookahead => conflict
                else if (Reductions.ContainsKey(Item.Lookahead))
                {
                    StateReductionsLR1.HandleConflict_ReduceReduce("RNGLR(1)", conflicts, Item, Reductions[Item.Lookahead], Set, Item.Lookahead);
                    StateActionRNReduce Reduction = new StateActionRNReduce(Item.Lookahead, Item.BaseRule, Item.DotPosition);
                    this.Add(Reduction);
                }
                else // No conflict
                {
                    // hide conflicts generated by reducing using right-nulled rules
                    if (!rightnulled)
                        Reductions.Add(Item.Lookahead, Item);
                    StateActionRNReduce Reduction = new StateActionRNReduce(Item.Lookahead, Item.BaseRule, Item.DotPosition);
                    this.Add(Reduction);
                }
            }
        }
    }
}
