/**********************************************************************
* Copyright (c) 2014 Laurent Wouters and others
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as
* published by the Free Software Foundation, either version 3
* of the License, or (at your option) any later version.
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
* 
* You should have received a copy of the GNU Lesser General
* Public License along with this program.
* If not, see <http://www.gnu.org/licenses/>.
* 
* Contributors:
*     Laurent Wouters - lwouters@xowl.org
**********************************************************************/

using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;

namespace Hime.CentralDogma
{
	/// <summary>
	/// Contains a set of helper methods for the support of Unicode
	/// </summary>
	/// <remarks>
	/// The current supported Unicode version is 6.3.0
	/// </remarks>
	public class UnicodeHelper
	{
		/// <summary>
		/// The URL of the latest specification of Unicode blocks
		/// </summary>
		public const string urlUnicodeBlocks = "http://www.unicode.org/Public/UCD/latest/ucd/Blocks.txt";
		/// <summary>
		/// The URL of the latest specification of Unicode code points
		/// </summary>
		public const string urlUnicodeData = "http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt";

		/// <summary>
		/// Gets the latest unicode blocks from the Unicode web site
		/// </summary>
		/// <returns>
		/// The latest unicode blocks
		/// </returns>
		public static ICollection<UnicodeBlock> GetLatestUnicodeBlocks()
		{
			System.Net.WebClient client = new System.Net.WebClient();
			byte[] buffer = client.DownloadData(urlUnicodeBlocks);
			string content = Encoding.UTF8.GetString(buffer);
			string[] lines = content.Split(new char[] { '\n' });
			Regex exp = new Regex("(?<begin>[0-9A-F]+)\\.\\.(?<end>[0-9A-F]+);\\s+(?<name>(\\w|\\s|-)+)");
			List<UnicodeBlock> blocks = new List<UnicodeBlock>();
			foreach (string line in lines)
			{
				if (line.Length == 0)
					continue;
				if (line.StartsWith("#"))
					continue;
				Match m = exp.Match(line);
				if (!m.Success)
					continue;
				int begin = System.Convert.ToInt32(m.Groups["begin"].Value, 16);
				int end = System.Convert.ToInt32(m.Groups["end"].Value, 16);
				string name = m.Groups["name"].Value;
				// filter out the Surrogate-related blocks
				if (name.Contains("Surrogate"))
					continue;
				name = name.Replace(" ", "");
				blocks.Add(new UnicodeBlock(name, begin, end));
			}
			return blocks;
		}

		/// <summary>
		/// Generates the code for the Unicode blocks data
		/// </summary>
		public static void GenerateBlocksDB()
		{
			ICollection<UnicodeBlock> blocks = GetLatestUnicodeBlocks();

			StreamWriter writer = new StreamWriter ("UnicodeBlocks.cs", false, new UTF8Encoding (false));
			writer.WriteLine("/*");
			writer.WriteLine(" * WARNING: this file has been generated by");
			writer.WriteLine(" * Hime Parser Generator");
			writer.WriteLine(" */");
			writer.WriteLine();
			writer.WriteLine("using System.Collections.Generic;");
			writer.WriteLine();
			writer.WriteLine("namespace Hime.CentralDogma");
			writer.WriteLine("{");
			writer.WriteLine("\t/// <summary>");
			writer.WriteLine("\t/// Contains the supported Unicode blocks");
			writer.WriteLine("\t/// </summary>");
			writer.WriteLine("\tpublic class UnicodeBlocks");
			writer.WriteLine("\t{");
			foreach (UnicodeBlock block in blocks)
			{
				string csName = block.Name.Replace("-", "");
				writer.WriteLine("\t\t/// <summary>");
				writer.WriteLine("\t\t/// Constant for block " + block.Name);
				writer.WriteLine("\t\t/// </summary>");
				writer.WriteLine("\t\tpublic static readonly UnicodeBlock " + csName + " = new UnicodeBlock(\"" + block.Name + "\", 0x" + block.Span.Begin.Value.ToString("X") + ", 0x" + block.Span.End.Value.ToString("X") + ");");
			}

			writer.WriteLine();
			writer.WriteLine("\t\t/// <summary>");
			writer.WriteLine("\t\t/// The database of Unicode blocks accesible by names");
			writer.WriteLine("\t\t/// </summary>");
			writer.WriteLine("\t\tprivate static Dictionary<string, UnicodeBlock> db = null;");

			writer.WriteLine("\t\t/// <summary>");
			writer.WriteLine("\t\t/// Builds the blocks database");
			writer.WriteLine("\t\t/// </summary>");
			writer.WriteLine("\t\tprivate static void BuildDB()");
			writer.WriteLine("\t\t{");
			writer.WriteLine("\t\t\tdb = new Dictionary<string, UnicodeBlock>();");
			foreach (UnicodeBlock block in blocks)
			{
				string csName = block.Name.Replace("-", "");
				writer.WriteLine("\t\t\tdb.Add(\"" + block.Name + "\", " + csName + ");");
			}
			writer.WriteLine("\t\t}");

			writer.WriteLine("\t\t/// <summary>");
			writer.WriteLine("\t\t/// Gets the block with the given name");
			writer.WriteLine("\t\t/// </summary>");
			writer.WriteLine("\t\t/// <param name=\"name\">A Unicode block name</param>");
			writer.WriteLine("\t\t/// <returns>The corresponding block, or null if it does not exists</returns>");
			writer.WriteLine("\t\tpublic static UnicodeBlock GetBlock(string name)");
			writer.WriteLine("\t\t{");
			writer.WriteLine("\t\t\tif (db == null) BuildDB();");
			writer.WriteLine("\t\t\tif (!db.ContainsKey(name)) return null;");
			writer.WriteLine("\t\t\treturn db[name];");
			writer.WriteLine("\t\t}");

			writer.WriteLine("\t}");
			writer.WriteLine("}");
			writer.Close();
		}
	}
}