/*
 * WARNING: this file has been generated by
 * Hime Parser Generator 0.4.0.0
 */

using System.Collections.Generic;
using Hime.Redist.Parsers;

namespace Hime.Parsers.Input
{
    public class FileCentralDogmaParser : LRkParser
    {
        private static readonly LRkAutomaton automaton = LRkAutomaton.FindAutomaton(typeof(FileCentralDogmaParser));
        public static readonly SymbolVariable[] variables = {
            new SymbolVariable(0x2E, "option"), 
            new SymbolVariable(0x2F, "terminal_def_atom_any"), 
            new SymbolVariable(0x30, "terminal_def_atom_unicode"), 
            new SymbolVariable(0x31, "terminal_def_atom_text"), 
            new SymbolVariable(0x32, "terminal_def_atom_set"), 
            new SymbolVariable(0x33, "terminal_def_atom_ublock"), 
            new SymbolVariable(0x34, "terminal_def_atom_ucat"), 
            new SymbolVariable(0x35, "terminal_def_atom_span"), 
            new SymbolVariable(0x36, "terminal_def_atom"), 
            new SymbolVariable(0x37, "terminal_def_element"), 
            new SymbolVariable(0x38, "terminal_def_cardinalilty"), 
            new SymbolVariable(0x39, "terminal_def_repetition"), 
            new SymbolVariable(0x3A, "terminal_def_fragment"), 
            new SymbolVariable(0x3B, "terminal_def_restrict"), 
            new SymbolVariable(0x3C, "terminal_definition"), 
            new SymbolVariable(0x3D, "terminal_subgrammar"), 
            new SymbolVariable(0x3E, "terminal"), 
            new SymbolVariable(0x3F, "rule_sym_action"), 
            new SymbolVariable(0x40, "rule_sym_virtual"), 
            new SymbolVariable(0x41, "rule_sym_ref_params"), 
            new SymbolVariable(0x42, "rule_sym_ref_template"), 
            new SymbolVariable(0x43, "rule_sym_ref_simple"), 
            new SymbolVariable(0x44, "rule_def_atom"), 
            new SymbolVariable(0x45, "rule_def_element"), 
            new SymbolVariable(0x46, "rule_def_tree_action"), 
            new SymbolVariable(0x47, "rule_def_repetition"), 
            new SymbolVariable(0x48, "rule_def_fragment"), 
            new SymbolVariable(0x49, "rule_def_restrict"), 
            new SymbolVariable(0x4A, "rule_def_choice"), 
            new SymbolVariable(0x4B, "rule_definition"), 
            new SymbolVariable(0x4C, "rule_template_params"), 
            new SymbolVariable(0x4D, "cf_rule_template"), 
            new SymbolVariable(0x4E, "cf_rule_simple"), 
            new SymbolVariable(0x4F, "grammar_options"), 
            new SymbolVariable(0x50, "grammar_terminals"), 
            new SymbolVariable(0x51, "grammar_cf_rules"), 
            new SymbolVariable(0x52, "grammar_parency"), 
            new SymbolVariable(0x53, "cf_grammar"), 
            new SymbolVariable(0x54, "_v56B23039"), 
            new SymbolVariable(0x55, "_v754C29F7"), 
            new SymbolVariable(0x56, "_v118A2E7F"), 
            new SymbolVariable(0x57, "_v77ADD2DA"), 
            new SymbolVariable(0x58, "_vB82F485"), 
            new SymbolVariable(0x59, "_v6DFC6F07"), 
            new SymbolVariable(0x5A, "_v7C68EB2B"), 
            new SymbolVariable(0x5B, "_vC1CF708"), 
            new SymbolVariable(0x5C, "_v7683BD4"), 
            new SymbolVariable(0x5D, "_v7AF69AF6"), 
            new SymbolVariable(0x5E, "_vF7064F8"), 
            new SymbolVariable(0x5F, "_v32249C11"), 
            new SymbolVariable(0x63, "cs_rule_context"), 
            new SymbolVariable(0x64, "cs_rule_template"), 
            new SymbolVariable(0x65, "cs_rule_simple"), 
            new SymbolVariable(0x66, "grammar_cs_rules"), 
            new SymbolVariable(0x67, "cs_grammar"), 
            new SymbolVariable(0x68, "_v14511847"), 
            new SymbolVariable(0x69, "file_item"), 
            new SymbolVariable(0x6A, "file"), 
            new SymbolVariable(0x6B, "_v290B9CBC"), 
            new SymbolVariable(0x6C, "_Axiom_") };
        private static readonly SymbolVirtual[] virtuals = {
            new SymbolVirtual("range"), 
            new SymbolVirtual("concat"), 
            new SymbolVirtual("emptypart") };
        private static readonly ParserAction[] pactions = {
 };
        private static readonly RecognizerAction[] ractions = {
 };
        public FileCentralDogmaParser(FileCentralDogmaLexer lexer) : base (automaton, variables, virtuals, pactions, ractions, lexer) {  }
    }
}
