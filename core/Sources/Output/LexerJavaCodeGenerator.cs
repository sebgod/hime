/**********************************************************************
* Copyright (c) 2013 Laurent Wouters and others
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as
* published by the Free Software Foundation, either version 3
* of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General
* Public License along with this program.
* If not, see <http://www.gnu.org/licenses/>.
*
* Contributors:
*     Laurent Wouters - lwouters@xowl.org
**********************************************************************/
using Hime.CentralDogma.Grammars;
using System.IO;

namespace Hime.CentralDogma.Output
{
	/// <summary>
	/// Represents a generator for lexer code for the Java platform
	/// </summary>
	public class LexerJavaCodeGenerator : Generator
	{
		/// <summary>
		/// The nmespace of the generated code
		/// </summary>
		private string nmespace;
		/// <summary>
		/// The visibility modifier for the generated code
		/// </summary>
		private Modifier modifier;
		/// <summary>
		/// The name of the generated lexer
		/// </summary>
		private string name;
		/// <summary>
		/// Path to the automaton's binary resource
		/// </summary>
		private string binResource;
		/// <summary>
		/// The terminals for the lexer
		/// </summary>
		private ROList<Terminal> terminals;
		/// <summary>
		/// The separator terminal
		/// </summary>
		private Terminal separator;

		/// <summary>
		/// Initializes this code generator
		/// </summary>
		/// <param name="nmespace">The nmespace of the generated code</param>
		/// <param name="modifier">The visibility modifier for the generated code</param>
		/// <param name="name">The name of the generated lexer</param>
		/// <param name="binResource">Path to the automaton's binary resource</param>
		/// <param name="terminals">The terminals for the lexer</param>
		/// <param name="separator">The separator terminal</param>
		public LexerJavaCodeGenerator(string nmespace, Modifier modifier, string name, string binResource, ROList<Terminal> terminals, Terminal separator)
		{
			this.nmespace = nmespace;
			this.modifier = modifier;
			this.name = name;
			this.binResource = binResource;
			this.terminals = terminals;
			this.separator = separator;
		}

		/// <summary>
		/// Writes a generated .Net file header
		/// </summary>
		/// <param name="writer">The writer to write to</param>
		protected void WriteHeader(StreamWriter writer)
		{
			writer.WriteLine("/*");
			writer.WriteLine(" * WARNING: this file has been generated by");
			writer.WriteLine(" * Hime Parser Generator " + CompilationTask.Version);
			writer.WriteLine(" */");
		}

		/// <summary>
		/// Generates code for the specified file
		/// </summary>
		/// <param name="file">The target file to generate code in</param>
		public void Generate(string file)
		{
			StreamWriter writer = new StreamWriter(file, false, new System.Text.UTF8Encoding(false));

			WriteHeader(writer);

			writer.WriteLine();
			writer.WriteLine("package " + nmespace + ";");
			writer.WriteLine();
			writer.WriteLine("import org.xowl.hime.redist.Symbol;");
			writer.WriteLine("import org.xowl.hime.redist.lexer.Automaton;");
			writer.WriteLine("import org.xowl.hime.redist.lexer.PrefetchedLexer;");
			writer.WriteLine();
			writer.WriteLine("import java.io.InputStream;");
			writer.WriteLine("import java.io.IOException;");
			writer.WriteLine();

			string mod = modifier == Modifier.Public ? "public" : "";

			writer.WriteLine("/**");
			writer.WriteLine(" * Represents a lexer");
			writer.WriteLine(" */");
			writer.WriteLine(mod + " class " + name + "Lexer extends PrefetchedLexer {");

			writer.WriteLine("    /**");
			writer.WriteLine("     * The automaton for this lexer");
			writer.WriteLine("     */");
			writer.WriteLine("    private static final Automaton automaton = Automaton.find(" + name + "Lexer.class, \"" + binResource + "\");");

			writer.WriteLine("    /**");
			writer.WriteLine("     * Contains the constant IDs for the terminals for this lexer");
			writer.WriteLine("     */");
			writer.WriteLine("    public static class ID {");
			for (int i = 2; i != terminals.Count; i++)
			{
				Grammars.Terminal terminal = terminals[i];
				if (terminal.Name.StartsWith(Grammars.Grammar.prefixGeneratedTerminal))
					continue;
				writer.WriteLine("        /**");
				writer.WriteLine("         * The unique identifier for terminal " + terminal.Name);
				writer.WriteLine("         */");
				writer.WriteLine("        public static final int {0} = 0x{1};", Helper.SanitizeName(terminal), terminal.ID.ToString("X4"));
			}
			writer.WriteLine("    }");

			writer.WriteLine("    /**");
			writer.WriteLine("     * The collection of terminals matched by this lexer");
			writer.WriteLine("     *");
			writer.WriteLine("     * The terminals are in an order consistent with the automaton,");
			writer.WriteLine("     * so that terminal indices in the automaton can be used to retrieve the terminals in this table");
			writer.WriteLine("     */");
			writer.WriteLine("    private static final Symbol[] terminals = {");
			bool first = true;
			foreach (Grammars.Terminal terminal in terminals)
			{
				if (!first)
					writer.WriteLine(",");
				writer.Write("        ");
				writer.Write("new Symbol(0x" + terminal.ID.ToString("X4") + ", \"" + terminal.ToString().Replace("\"", "\\\"") + "\")");
				first = false;
			}
			writer.WriteLine(" };");

			string sep = "FFFF";
			if (separator != null)
				sep = separator.ID.ToString("X4");

			writer.WriteLine("    /**");
			writer.WriteLine("     * Initializes a new instance of the lexer");
			writer.WriteLine("     *");
			writer.WriteLine("     * @param input The lexer's input");
			writer.WriteLine("     */");
			writer.WriteLine("    public " + name + "Lexer(String input) {");
			writer.WriteLine("        super(automaton, terminals, 0x" + sep + ", input);");
			writer.WriteLine("    }");

			writer.WriteLine("    /**");
			writer.WriteLine("     * Initializes a new instance of the lexer");
			writer.WriteLine("     *");
			writer.WriteLine("     * @param input The lexer's input");
			writer.WriteLine("     */");
			writer.WriteLine("    public " + name + "Lexer(InputStream input) throws IOException {");
			writer.WriteLine("        super(automaton, terminals, 0x" + sep + ", input);");
			writer.WriteLine("    }");
			writer.WriteLine("}");

			writer.Close();
		}
	}
}