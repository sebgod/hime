/**********************************************************************
* Copyright (c) 2013 Laurent Wouters and others
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as
* published by the Free Software Foundation, either version 3
* of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General
* Public License along with this program.
* If not, see <http://www.gnu.org/licenses/>.
*
* Contributors:
*     Laurent Wouters - lwouters@xowl.org
**********************************************************************/
using Hime.CentralDogma.Grammars;
using System.IO;

namespace Hime.CentralDogma.Output
{
	/// <summary>
	/// Represents a generator for lexer code for the .Net platform
	/// </summary>
	public class LexerPythonCodeGenerator : Generator
	{
		/// <summary>
		/// The name of the generated lexer
		/// </summary>
		private string name;
		/// <summary>
		/// Path to the automaton's binary resource
		/// </summary>
		private string binResource;
		/// <summary>
		/// The terminals for the lexer
		/// </summary>
		private ROList<Terminal> terminals;
		/// <summary>
		/// The separator terminal
		/// </summary>
		private Terminal separator;

		/// <summary>
		/// Initializes this code generator
		/// </summary>
		/// <param name="unit">The unit to generate code for</param>
		/// <param name="binResource">Path to the automaton's binary resource</param>
		public LexerPythonCodeGenerator(Unit unit, string binResource)
		{
			this.name = (unit.Modifier == Modifier.Internal ? "_" : "") + name;
			this.binResource = binResource;
			this.terminals = unit.Expected;
			this.separator = unit.Separator;
		}

		/// <summary>
		/// Writes a generated .Net file header
		/// </summary>
		/// <param name="writer">The writer to write to</param>
		protected void WriteHeader(StreamWriter writer)
		{
			writer.WriteLine("#######################################################################");
			writer.WriteLine("# WARNING: this file has been generated by");
			writer.WriteLine("# Hime Parser Generator " + CompilationTask.Version);
			writer.WriteLine("#######################################################################");
		}

		/// <summary>
		/// Generates code for the specified file
		/// </summary>
		/// <param name="file">The target file to generate code in</param>
		public void Generate(string file)
		{
			StreamWriter writer = new StreamWriter(file, false, new System.Text.UTF8Encoding(false));

			WriteHeader(writer);

			writer.WriteLine();
			writer.WriteLine("from hime.redist import load_resource");
			writer.WriteLine("from hime.redist import Symbol");
			writer.WriteLine("from hime.redist.lexer import Automaton");
			writer.WriteLine("from hime.redist.lexer import PrefetchedLexer");

			writer.WriteLine();
			writer.WriteLine();
			writer.WriteLine("class " + name + "Lexer(PrefetchedLexer):");
			writer.WriteLine("    \"\"\"");
			writer.WriteLine("    Represents a lexer");
			writer.WriteLine("    \"\"\"");
			writer.WriteLine("    __AUTOMATON = Automaton(load_resource(__file__, \"" + binResource + "\"))");
			writer.WriteLine();
			writer.WriteLine("    class ID:");
			writer.WriteLine("        \"\"\"");
			writer.WriteLine("        Contains the constant IDs for the terminals for this lexer");
			writer.WriteLine("        \"\"\"");
			for (int i = 2; i != terminals.Count; i++)
			{
				Grammars.Terminal terminal = terminals[i];
				if (terminal.Name.StartsWith(Grammars.Grammar.prefixGeneratedTerminal))
					continue;
				writer.WriteLine("        {0} = 0x{1}", Helper.SanitizeName(terminal), terminal.ID.ToString("X4"));
			}

			writer.WriteLine();
			writer.WriteLine("    __TERMINALS = [");
			bool first = true;
			foreach (Grammars.Terminal terminal in terminals)
			{
				if (!first)
					writer.WriteLine(",");
				writer.Write("        ");
				writer.Write("Symbol(0x" + terminal.ID.ToString("X4") + ", '" + terminal.ToString().Replace("'", "\\'") + "', None)");
				first = false;
			}
			writer.WriteLine("]");

			string sep = "FFFF";
			if (separator != null)
				sep = separator.ID.ToString("X4");
			writer.WriteLine();
			writer.WriteLine("    def __init__(self, input):");
			writer.WriteLine("        super(" + name + "Lexer, self).__init__(" + name + "Lexer.__AUTOMATON, " + name + "Lexer.__TERMINALS, 0x" + sep + ", input)");

			writer.Close();
		}
	}
}