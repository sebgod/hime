/**********************************************************************
* Copyright (c) 2013 Laurent Wouters and others
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as
* published by the Free Software Foundation, either version 3
* of the License, or (at your option) any later version.
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
* 
* You should have received a copy of the GNU Lesser General
* Public License along with this program.
* If not, see <http://www.gnu.org/licenses/>.
* 
* Contributors:
*     Laurent Wouters - lwouters@xowl.org
**********************************************************************/

grammar EBNF
{
	options
	{
		Axiom = "ebnf_grammar";
		Separator = "SEPARATOR";
	}
	terminals
	{
		NEW_LINE		-> U+000D /* CR */
						|  U+000A /* LF */
						|  U+000D U+000A /* CR LF */
						|  U+2028 /* LS */
						|  U+2029 /* PS */ ;
		WHITE_SPACE		-> U+0020 | U+0009 | U+000B | U+000C ;
		COMMENT			-> '(*' (.* - (.* '*)' .*)) '*)' ;
		SEPARATOR		-> (NEW_LINE | WHITE_SPACE | COMMENT)+;
		
		ESCAPEES				-> '\\\\'	/*Backslash*/
								| '\\0'		/*Unicode character 0*/
								| '\\a'		/*Alert (character 7)*/
								| '\\b'		/*Backspace (character 8)*/
								| '\\f'		/*Form feed (character 12)*/
								| '\\n'		/*New line (character 10)*/
								| '\\r'		/*Carriage return (character 13)*/
								| '\\t'		/*Horizontal tab (character 9)*/
								| '\\v';	/*Vertical quote (character 11)*/
		TERMINAL				-> '"' ([^\\"] | ESCAPEES | '\\"')+ '"'
								|  '\'' ([^\\'] | ESCAPEES | '\\\'')+ '\'' ;
		
		SPECIAL		-> '?' (.* - (.* '?' .*)) '?' ;
		
		WORD		-> [a-zA-Z] ([a-zA-Z_0-9] | '-')* ;
		IDENTIFIER	-> WORD (WHITE_SPACE+ WORD)* ;
	}
	rules
	{
		atom		-> IDENTIFIER^
					|  SPECIAL^
					|  TERMINAL^
					|  single_group^
					|  option_group^
					|  repeat_group^ ;
		
		single_group	-> '('! expression^ ')'! ;
		option_group	-> "optional"^ '['! expression ']'! ;
		repeat_group	-> "repeated"^ '{'! expression '}'! ;
		
		repeated	-> atom^ ;
		repeated	-> "repeated"^ atom '*'! ;
		reduced		-> repeated^ ('-'^ repeated)* ;
		fragment	-> reduced^ (','^ reduced)* ;
		expression	-> fragment^ ('|'^ fragment)* ;
		
		ebnf_rule		-> IDENTIFIER '='! expression ';'! ;
		ebnf_grammar	-> ebnf_rule* ;
	}
}
