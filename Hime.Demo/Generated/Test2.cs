using System.Collections.Generic;

namespace Analyser
{
    class Test2_Lexer : Hime.Redist.Parsers.LexerText
    {
        private static ushort[] staticSymbolsSID = { 0x8F, 0x13, 0xC, 0x44, 0x56, 0x57, 0x58, 0x6C, 0x6D, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x90, 0x95, 0x97, 0xA4, 0x9D, 0x9E, 0x9F, 0xA2, 0xA3, 0xB3, 0xB4, 0x7, 0xA8, 0xF, 0x11, 0x99, 0x73, 0xA5, 0x74, 0xA6, 0x9C, 0xA7, 0xA9, 0x93, 0x96, 0x94, 0x98, 0x9A, 0x9B, 0xA0, 0xAA, 0xAC, 0xA1, 0xAB, 0x70, 0xD, 0x10, 0x12, 0xB2, 0x4E, 0xAD, 0xAE, 0xB1, 0x6A, 0x48, 0x4B, 0x6B, 0x4F, 0x50, 0x52, 0x69, 0x53, 0x4A, 0x4C, 0x51, 0x79, 0x46, 0x47, 0x54, 0x4D, 0x49, 0x7C, 0x7F };
        private static string[] staticSymbolsName = { "_T[/]", "IDENTIFIER", "INTEGER_LITTERAL_DECIMAL", "_T[.]", "_T[[]", "_T[]]", "_T[,]", "_T[(]", "_T[)]", "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[*]", "_T[%]", "_T[<]", "_T[>]", "_T[=]", "_T[&]", "_T[^]", "_T[|]", "_T[?]", "_T[:]", "_T[{]", "_T[}]", "SEPARATOR", "_T[/=]", "REAL_LITTERAL", "STRING_LITTERAL_REGULAR", "_T[is]", "_T[++]", "_T[+=]", "_T[--]", "_T[-=]", "_T[!=]", "_T[*=]", "_T[%=]", "_T[<<]", "_T[<=]", "_T[>>]", "_T[>=]", "_T[as]", "_T[==]", "_T[&&]", "_T[&=]", "_T[^=]", "_T[||]", "_T[|=]", "_T[new]", "INTEGER_LITTERAL_HEXA", "CHARACTER_LITTERAL", "STRING_LITTERAL_VERBATIM", "_T[out]", "_T[int]", "_T[<<=]", "_T[>>=]", "_T[ref]", "_T[this]", "_T[bool]", "_T[byte]", "_T[base]", "_T[uint]", "_T[long]", "_T[char]", "_T[void]", "_T[float]", "_T[sbyte]", "_T[short]", "_T[ulong]", "_T[typeof]", "_T[object]", "_T[string]", "_T[double]", "_T[ushort]", "_T[decimal]", "_T[checked]", "_T[unchecked]" };
        private static ushort[][] staticTransitions0 = { new ushort[3] { 0x2F, 0x2F, 0x2B }, new ushort[3] { 0x6E, 0x6E, 0x2C }, new ushort[3] { 0x74, 0x74, 0x2D }, new ushort[3] { 0x66, 0x66, 0x82 }, new ushort[3] { 0x30, 0x30, 0x85 }, new ushort[3] { 0x27, 0x27, 0x1 }, new ushort[3] { 0x22, 0x22, 0x2 }, new ushort[3] { 0x40, 0x40, 0x3 }, new ushort[3] { 0x2E, 0x2E, 0x8A }, new ushort[3] { 0x6F, 0x6F, 0x2E }, new ushort[3] { 0x73, 0x73, 0x2F }, new ushort[3] { 0x62, 0x62, 0x30 }, new ushort[3] { 0x64, 0x64, 0x83 }, new ushort[3] { 0x75, 0x75, 0x8B }, new ushort[3] { 0x69, 0x69, 0x31 }, new ushort[3] { 0x6C, 0x6C, 0x8C }, new ushort[3] { 0x63, 0x63, 0x32 }, new ushort[3] { 0x5B, 0x5B, 0x92 }, new ushort[3] { 0x5D, 0x5D, 0x93 }, new ushort[3] { 0x2C, 0x2C, 0x94 }, new ushort[3] { 0x76, 0x76, 0x33 }, new ushort[3] { 0x28, 0x28, 0x95 }, new ushort[3] { 0x29, 0x29, 0x96 }, new ushort[3] { 0x2B, 0x2B, 0x97 }, new ushort[3] { 0x2D, 0x2D, 0x98 }, new ushort[3] { 0x21, 0x21, 0x99 }, new ushort[3] { 0x7E, 0x7E, 0x9A }, new ushort[3] { 0x2A, 0x2A, 0x9B }, new ushort[3] { 0x25, 0x25, 0x9C }, new ushort[3] { 0x3C, 0x3C, 0x9D }, new ushort[3] { 0x3E, 0x3E, 0x9E }, new ushort[3] { 0x61, 0x61, 0x37 }, new ushort[3] { 0x3D, 0x3D, 0x9F }, new ushort[3] { 0x26, 0x26, 0xA0 }, new ushort[3] { 0x5E, 0x5E, 0xA1 }, new ushort[3] { 0x7C, 0x7C, 0xA2 }, new ushort[3] { 0x3F, 0x3F, 0xA3 }, new ushort[3] { 0x3A, 0x3A, 0xA4 }, new ushort[3] { 0x72, 0x72, 0x34 }, new ushort[3] { 0x7B, 0x7B, 0xA5 }, new ushort[3] { 0x7D, 0x7D, 0xA6 }, new ushort[3] { 0xA, 0xA, 0xA7 }, new ushort[3] { 0x2028, 0x2029, 0xA7 }, new ushort[3] { 0x9, 0x9, 0xA9 }, new ushort[3] { 0xB, 0xC, 0xA9 }, new ushort[3] { 0x20, 0x20, 0xA9 }, new ushort[3] { 0x31, 0x39, 0x86 }, new ushort[3] { 0x44, 0x44, 0x84 }, new ushort[3] { 0x46, 0x46, 0x84 }, new ushort[3] { 0x4D, 0x4D, 0x84 }, new ushort[3] { 0x6D, 0x6D, 0x84 }, new ushort[3] { 0x41, 0x43, 0x35 }, new ushort[3] { 0x45, 0x45, 0x35 }, new ushort[3] { 0x47, 0x4B, 0x35 }, new ushort[3] { 0x4E, 0x54, 0x35 }, new ushort[3] { 0x56, 0x5A, 0x35 }, new ushort[3] { 0x65, 0x65, 0x35 }, new ushort[3] { 0x67, 0x68, 0x35 }, new ushort[3] { 0x6A, 0x6B, 0x35 }, new ushort[3] { 0x70, 0x71, 0x35 }, new ushort[3] { 0x77, 0x7A, 0x35 }, new ushort[3] { 0x4C, 0x4C, 0x8D }, new ushort[3] { 0x55, 0x55, 0x8E }, new ushort[3] { 0xD, 0xD, 0xA8 } };
        private static ushort[][] staticTransitions1 = { new ushort[3] { 0x5C, 0x5C, 0xC }, new ushort[3] { 0x0, 0x9, 0xE }, new ushort[3] { 0xB, 0xC, 0xE }, new ushort[3] { 0xE, 0x26, 0xE }, new ushort[3] { 0x28, 0x5B, 0xE }, new ushort[3] { 0x5D, 0x2027, 0xE }, new ushort[3] { 0x202A, 0xFFFF, 0xE } };
        private static ushort[][] staticTransitions2 = { new ushort[3] { 0x5C, 0x5C, 0xD }, new ushort[3] { 0x22, 0x22, 0xB6 }, new ushort[3] { 0x0, 0x9, 0x2 }, new ushort[3] { 0xB, 0xC, 0x2 }, new ushort[3] { 0xE, 0x21, 0x2 }, new ushort[3] { 0x23, 0x5B, 0x2 }, new ushort[3] { 0x5D, 0x2027, 0x2 }, new ushort[3] { 0x202A, 0xFFFF, 0x2 } };
        private static ushort[][] staticTransitions3 = { new ushort[3] { 0x22, 0x22, 0xF }, new ushort[3] { 0x41, 0x5A, 0x35 }, new ushort[3] { 0x61, 0x7A, 0x35 } };
        private static ushort[][] staticTransitions4 = { new ushort[3] { 0x0, 0x9, 0x11 }, new ushort[3] { 0xB, 0xC, 0x11 }, new ushort[3] { 0xE, 0x2027, 0x11 }, new ushort[3] { 0x202A, 0xFFFF, 0x11 } };
        private static ushort[][] staticTransitions5 = { new ushort[3] { 0x0, 0x9, 0x2A }, new ushort[3] { 0xB, 0xC, 0x2A }, new ushort[3] { 0xE, 0x2027, 0x2A }, new ushort[3] { 0x202A, 0xFFFF, 0x2A } };
        private static ushort[][] staticTransitions6 = { new ushort[3] { 0x0, 0x29, 0x6 }, new ushort[3] { 0x2B, 0xFFFF, 0x6 }, new ushort[3] { 0x2A, 0x2A, 0x12 } };
        private static ushort[][] staticTransitions7 = { new ushort[3] { 0x0, 0x29, 0x7 }, new ushort[3] { 0x2B, 0xFFFF, 0x7 }, new ushort[3] { 0x2A, 0x2A, 0x29 } };
        private static ushort[][] staticTransitions8 = { new ushort[3] { 0x30, 0x39, 0xCC }, new ushort[3] { 0x41, 0x46, 0xCC }, new ushort[3] { 0x61, 0x66, 0xCC } };
        private static ushort[][] staticTransitions9 = { new ushort[3] { 0x2B, 0x2B, 0xB }, new ushort[3] { 0x2D, 0x2D, 0xB }, new ushort[3] { 0x31, 0x39, 0xAE }, new ushort[3] { 0x30, 0x30, 0xAF } };
        private static ushort[][] staticTransitionsA = { new ushort[3] { 0x31, 0x39, 0xAC }, new ushort[3] { 0x30, 0x30, 0xAD } };
        private static ushort[][] staticTransitionsB = { new ushort[3] { 0x31, 0x39, 0xAE }, new ushort[3] { 0x30, 0x30, 0xAF } };
        private static ushort[][] staticTransitionsC = { new ushort[3] { 0x78, 0x78, 0x13 }, new ushort[3] { 0x55, 0x55, 0x15 }, new ushort[3] { 0x75, 0x75, 0x15 }, new ushort[3] { 0x22, 0x22, 0xE }, new ushort[3] { 0x27, 0x27, 0xE }, new ushort[3] { 0x30, 0x30, 0xE }, new ushort[3] { 0x5C, 0x5C, 0xE }, new ushort[3] { 0x61, 0x62, 0xE }, new ushort[3] { 0x66, 0x66, 0xE }, new ushort[3] { 0x6E, 0x6E, 0xE }, new ushort[3] { 0x72, 0x72, 0xE }, new ushort[3] { 0x74, 0x74, 0xE }, new ushort[3] { 0x76, 0x76, 0xE } };
        private static ushort[][] staticTransitionsD = { new ushort[3] { 0x78, 0x78, 0x1D }, new ushort[3] { 0x55, 0x55, 0x16 }, new ushort[3] { 0x75, 0x75, 0x16 }, new ushort[3] { 0x22, 0x22, 0x2 }, new ushort[3] { 0x27, 0x27, 0x2 }, new ushort[3] { 0x30, 0x30, 0x2 }, new ushort[3] { 0x5C, 0x5C, 0x2 }, new ushort[3] { 0x61, 0x62, 0x2 }, new ushort[3] { 0x66, 0x66, 0x2 }, new ushort[3] { 0x6E, 0x6E, 0x2 }, new ushort[3] { 0x72, 0x72, 0x2 }, new ushort[3] { 0x74, 0x74, 0x2 }, new ushort[3] { 0x76, 0x76, 0x2 } };
        private static ushort[][] staticTransitionsE = { new ushort[3] { 0x27, 0x27, 0xD0 } };
        private static ushort[][] staticTransitionsF = { new ushort[3] { 0x0, 0x21, 0xF }, new ushort[3] { 0x23, 0xFFFF, 0xF }, new ushort[3] { 0x22, 0x22, 0xD1 } };
        private static ushort[][] staticTransitions10 = { new ushort[3] { 0x2A, 0x2A, 0x7 }, new ushort[3] { 0x2F, 0x2F, 0x5 } };
        private static ushort[][] staticTransitions11 = { new ushort[3] { 0xA, 0xA, 0xD7 }, new ushort[3] { 0x2028, 0x2029, 0xD7 }, new ushort[3] { 0xD, 0xD, 0xD8 } };
        private static ushort[][] staticTransitions12 = { new ushort[3] { 0x2F, 0x2F, 0xD9 }, new ushort[3] { 0x0, 0x2E, 0x6 }, new ushort[3] { 0x30, 0xFFFF, 0x6 } };
        private static ushort[][] staticTransitions13 = { new ushort[3] { 0x30, 0x39, 0x20 }, new ushort[3] { 0x41, 0x46, 0x20 }, new ushort[3] { 0x61, 0x66, 0x20 } };
        private static ushort[][] staticTransitions14 = { new ushort[3] { 0x30, 0x39, 0x23 }, new ushort[3] { 0x41, 0x46, 0x23 }, new ushort[3] { 0x61, 0x66, 0x23 } };
        private static ushort[][] staticTransitions15 = { new ushort[3] { 0x30, 0x39, 0x17 }, new ushort[3] { 0x41, 0x46, 0x17 }, new ushort[3] { 0x61, 0x66, 0x17 } };
        private static ushort[][] staticTransitions16 = { new ushort[3] { 0x30, 0x39, 0x18 }, new ushort[3] { 0x41, 0x46, 0x18 }, new ushort[3] { 0x61, 0x66, 0x18 } };
        private static ushort[][] staticTransitions17 = { new ushort[3] { 0x30, 0x39, 0x1A }, new ushort[3] { 0x41, 0x46, 0x1A }, new ushort[3] { 0x61, 0x66, 0x1A } };
        private static ushort[][] staticTransitions18 = { new ushort[3] { 0x30, 0x39, 0x1B }, new ushort[3] { 0x41, 0x46, 0x1B }, new ushort[3] { 0x61, 0x66, 0x1B } };
        private static ushort[][] staticTransitions19 = { new ushort[3] { 0x30, 0x39, 0x1C }, new ushort[3] { 0x41, 0x46, 0x1C }, new ushort[3] { 0x61, 0x66, 0x1C } };
        private static ushort[][] staticTransitions1A = { new ushort[3] { 0x30, 0x39, 0x14 }, new ushort[3] { 0x41, 0x46, 0x14 }, new ushort[3] { 0x61, 0x66, 0x14 } };
        private static ushort[][] staticTransitions1B = { new ushort[3] { 0x30, 0x39, 0x1E }, new ushort[3] { 0x41, 0x46, 0x1E }, new ushort[3] { 0x61, 0x66, 0x1E } };
        private static ushort[][] staticTransitions1C = { new ushort[3] { 0x30, 0x39, 0x1F }, new ushort[3] { 0x41, 0x46, 0x1F }, new ushort[3] { 0x61, 0x66, 0x1F } };
        private static ushort[][] staticTransitions1D = { new ushort[3] { 0x30, 0x39, 0x24 }, new ushort[3] { 0x41, 0x46, 0x24 }, new ushort[3] { 0x61, 0x66, 0x24 } };
        private static ushort[][] staticTransitions1E = { new ushort[3] { 0x30, 0x39, 0x25 }, new ushort[3] { 0x41, 0x46, 0x25 }, new ushort[3] { 0x61, 0x66, 0x25 } };
        private static ushort[][] staticTransitions1F = { new ushort[3] { 0x30, 0x39, 0xE }, new ushort[3] { 0x41, 0x46, 0xE }, new ushort[3] { 0x61, 0x66, 0xE } };
        private static ushort[][] staticTransitions20 = { new ushort[3] { 0x30, 0x39, 0x21 }, new ushort[3] { 0x41, 0x46, 0x21 }, new ushort[3] { 0x61, 0x66, 0x21 }, new ushort[3] { 0x27, 0x27, 0xD0 } };
        private static ushort[][] staticTransitions21 = { new ushort[3] { 0x30, 0x39, 0x22 }, new ushort[3] { 0x41, 0x46, 0x22 }, new ushort[3] { 0x61, 0x66, 0x22 }, new ushort[3] { 0x27, 0x27, 0xD0 } };
        private static ushort[][] staticTransitions22 = { new ushort[3] { 0x30, 0x39, 0xE }, new ushort[3] { 0x41, 0x46, 0xE }, new ushort[3] { 0x61, 0x66, 0xE }, new ushort[3] { 0x27, 0x27, 0xD0 } };
        private static ushort[][] staticTransitions23 = { new ushort[3] { 0x30, 0x39, 0x19 }, new ushort[3] { 0x41, 0x46, 0x19 }, new ushort[3] { 0x61, 0x66, 0x19 }, new ushort[3] { 0x27, 0x27, 0xD0 } };
        private static ushort[][] staticTransitions24 = { new ushort[3] { 0x30, 0x39, 0x26 }, new ushort[3] { 0x41, 0x46, 0x26 }, new ushort[3] { 0x61, 0x66, 0x26 }, new ushort[3] { 0x22, 0x22, 0xB6 }, new ushort[3] { 0x5C, 0x5C, 0xD }, new ushort[3] { 0x0, 0x9, 0x2 }, new ushort[3] { 0xB, 0xC, 0x2 }, new ushort[3] { 0xE, 0x21, 0x2 }, new ushort[3] { 0x23, 0x2F, 0x2 }, new ushort[3] { 0x3A, 0x40, 0x2 }, new ushort[3] { 0x47, 0x5B, 0x2 }, new ushort[3] { 0x5D, 0x60, 0x2 }, new ushort[3] { 0x67, 0x2027, 0x2 }, new ushort[3] { 0x202A, 0xFFFF, 0x2 } };
        private static ushort[][] staticTransitions25 = { new ushort[3] { 0x30, 0x39, 0x24 }, new ushort[3] { 0x41, 0x46, 0x24 }, new ushort[3] { 0x61, 0x66, 0x24 }, new ushort[3] { 0x22, 0x22, 0xB6 }, new ushort[3] { 0x5C, 0x5C, 0xD }, new ushort[3] { 0x0, 0x9, 0x2 }, new ushort[3] { 0xB, 0xC, 0x2 }, new ushort[3] { 0xE, 0x21, 0x2 }, new ushort[3] { 0x23, 0x2F, 0x2 }, new ushort[3] { 0x3A, 0x40, 0x2 }, new ushort[3] { 0x47, 0x5B, 0x2 }, new ushort[3] { 0x5D, 0x60, 0x2 }, new ushort[3] { 0x67, 0x2027, 0x2 }, new ushort[3] { 0x202A, 0xFFFF, 0x2 } };
        private static ushort[][] staticTransitions26 = { new ushort[3] { 0x30, 0x39, 0x27 }, new ushort[3] { 0x41, 0x46, 0x27 }, new ushort[3] { 0x61, 0x66, 0x27 }, new ushort[3] { 0x22, 0x22, 0xB6 }, new ushort[3] { 0x5C, 0x5C, 0xD }, new ushort[3] { 0x0, 0x9, 0x2 }, new ushort[3] { 0xB, 0xC, 0x2 }, new ushort[3] { 0xE, 0x21, 0x2 }, new ushort[3] { 0x23, 0x2F, 0x2 }, new ushort[3] { 0x3A, 0x40, 0x2 }, new ushort[3] { 0x47, 0x5B, 0x2 }, new ushort[3] { 0x5D, 0x60, 0x2 }, new ushort[3] { 0x67, 0x2027, 0x2 }, new ushort[3] { 0x202A, 0xFFFF, 0x2 } };
        private static ushort[][] staticTransitions27 = { new ushort[3] { 0x30, 0x39, 0x28 }, new ushort[3] { 0x41, 0x46, 0x28 }, new ushort[3] { 0x61, 0x66, 0x28 }, new ushort[3] { 0x22, 0x22, 0xB6 }, new ushort[3] { 0x5C, 0x5C, 0xD }, new ushort[3] { 0x0, 0x9, 0x2 }, new ushort[3] { 0xB, 0xC, 0x2 }, new ushort[3] { 0xE, 0x21, 0x2 }, new ushort[3] { 0x23, 0x2F, 0x2 }, new ushort[3] { 0x3A, 0x40, 0x2 }, new ushort[3] { 0x47, 0x5B, 0x2 }, new ushort[3] { 0x5D, 0x60, 0x2 }, new ushort[3] { 0x67, 0x2027, 0x2 }, new ushort[3] { 0x202A, 0xFFFF, 0x2 } };
        private static ushort[][] staticTransitions28 = { new ushort[3] { 0x22, 0x22, 0xB6 }, new ushort[3] { 0x5C, 0x5C, 0xD }, new ushort[3] { 0x0, 0x9, 0x2 }, new ushort[3] { 0xB, 0xC, 0x2 }, new ushort[3] { 0xE, 0x21, 0x2 }, new ushort[3] { 0x23, 0x5B, 0x2 }, new ushort[3] { 0x5D, 0x2027, 0x2 }, new ushort[3] { 0x202A, 0xFFFF, 0x2 } };
        private static ushort[][] staticTransitions29 = { new ushort[3] { 0x2F, 0x2F, 0xCA }, new ushort[3] { 0x0, 0x2E, 0x7 }, new ushort[3] { 0x30, 0xFFFF, 0x7 } };
        private static ushort[][] staticTransitions2A = { new ushort[3] { 0xA, 0xA, 0xCA }, new ushort[3] { 0xD, 0xD, 0xCA }, new ushort[3] { 0x2028, 0x2029, 0xCA } };
        private static ushort[][] staticTransitions2B = { new ushort[3] { 0x2F, 0x2F, 0x4 }, new ushort[3] { 0x2A, 0x2A, 0x6 }, new ushort[3] { 0x3D, 0x3D, 0xAA } };
        private static ushort[][] staticTransitions2C = { new ushort[3] { 0x75, 0x75, 0x36 }, new ushort[3] { 0x65, 0x65, 0x38 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x64, 0x39 }, new ushort[3] { 0x66, 0x74, 0x39 }, new ushort[3] { 0x76, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions2D = { new ushort[3] { 0x72, 0x72, 0x3A }, new ushort[3] { 0x68, 0x68, 0x3B }, new ushort[3] { 0x79, 0x79, 0x3C }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x67, 0x39 }, new ushort[3] { 0x69, 0x71, 0x39 }, new ushort[3] { 0x73, 0x78, 0x39 }, new ushort[3] { 0x7A, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions2E = { new ushort[3] { 0x62, 0x62, 0x3F }, new ushort[3] { 0x75, 0x75, 0x46 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x61, 0x39 }, new ushort[3] { 0x63, 0x74, 0x39 }, new ushort[3] { 0x76, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions2F = { new ushort[3] { 0x74, 0x74, 0x40 }, new ushort[3] { 0x62, 0x62, 0x41 }, new ushort[3] { 0x68, 0x68, 0x42 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x61, 0x39 }, new ushort[3] { 0x63, 0x67, 0x39 }, new ushort[3] { 0x69, 0x73, 0x39 }, new ushort[3] { 0x75, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions30 = { new ushort[3] { 0x6F, 0x6F, 0x43 }, new ushort[3] { 0x79, 0x79, 0x44 }, new ushort[3] { 0x61, 0x61, 0x45 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x62, 0x6E, 0x39 }, new ushort[3] { 0x70, 0x78, 0x39 }, new ushort[3] { 0x7A, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions31 = { new ushort[3] { 0x6E, 0x6E, 0x4F }, new ushort[3] { 0x73, 0x73, 0xB7 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x6D, 0x39 }, new ushort[3] { 0x6F, 0x72, 0x39 }, new ushort[3] { 0x74, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions32 = { new ushort[3] { 0x68, 0x68, 0x4D }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x67, 0x39 }, new ushort[3] { 0x69, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions33 = { new ushort[3] { 0x6F, 0x6F, 0x4E }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x6E, 0x39 }, new ushort[3] { 0x70, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions34 = { new ushort[3] { 0x65, 0x65, 0x50 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x64, 0x39 }, new ushort[3] { 0x66, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions35 = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions36 = { new ushort[3] { 0x6C, 0x6C, 0x51 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x6B, 0x39 }, new ushort[3] { 0x6D, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions37 = { new ushort[3] { 0x73, 0x73, 0xC3 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x72, 0x39 }, new ushort[3] { 0x74, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions38 = { new ushort[3] { 0x77, 0x77, 0xCB }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x76, 0x39 }, new ushort[3] { 0x78, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions39 = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions3A = { new ushort[3] { 0x75, 0x75, 0x52 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x74, 0x39 }, new ushort[3] { 0x76, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions3B = { new ushort[3] { 0x69, 0x69, 0x53 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x68, 0x39 }, new ushort[3] { 0x6A, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions3C = { new ushort[3] { 0x70, 0x70, 0x54 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x6F, 0x39 }, new ushort[3] { 0x71, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions3D = { new ushort[3] { 0x6C, 0x6C, 0x57 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x6B, 0x39 }, new ushort[3] { 0x6D, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions3E = { new ushort[3] { 0x6F, 0x6F, 0x58 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x6E, 0x39 }, new ushort[3] { 0x70, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions3F = { new ushort[3] { 0x6A, 0x6A, 0x55 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x69, 0x39 }, new ushort[3] { 0x6B, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions40 = { new ushort[3] { 0x72, 0x72, 0x59 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x71, 0x39 }, new ushort[3] { 0x73, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions41 = { new ushort[3] { 0x79, 0x79, 0x5B }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x78, 0x39 }, new ushort[3] { 0x7A, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions42 = { new ushort[3] { 0x6F, 0x6F, 0x5C }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x6E, 0x39 }, new ushort[3] { 0x70, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions43 = { new ushort[3] { 0x6F, 0x6F, 0x6E }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x6E, 0x39 }, new ushort[3] { 0x70, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions44 = { new ushort[3] { 0x74, 0x74, 0x6F }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x73, 0x39 }, new ushort[3] { 0x75, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions45 = { new ushort[3] { 0x73, 0x73, 0x70 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x72, 0x39 }, new ushort[3] { 0x74, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions46 = { new ushort[3] { 0x74, 0x74, 0xD2 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x73, 0x39 }, new ushort[3] { 0x75, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions47 = { new ushort[3] { 0x63, 0x63, 0x5A }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x62, 0x39 }, new ushort[3] { 0x64, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions48 = { new ushort[3] { 0x63, 0x63, 0x60 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x62, 0x39 }, new ushort[3] { 0x64, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions49 = { new ushort[3] { 0x75, 0x75, 0x5D }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x74, 0x39 }, new ushort[3] { 0x76, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions4A = { new ushort[3] { 0x68, 0x68, 0x5E }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x67, 0x39 }, new ushort[3] { 0x69, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions4B = { new ushort[3] { 0x6E, 0x6E, 0x71 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x6D, 0x39 }, new ushort[3] { 0x6F, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions4C = { new ushort[3] { 0x6E, 0x6E, 0x72 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x6D, 0x39 }, new ushort[3] { 0x6F, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions4D = { new ushort[3] { 0x61, 0x61, 0x73 }, new ushort[3] { 0x65, 0x65, 0x61 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x62, 0x64, 0x39 }, new ushort[3] { 0x66, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions4E = { new ushort[3] { 0x69, 0x69, 0x74 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x68, 0x39 }, new ushort[3] { 0x6A, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions4F = { new ushort[3] { 0x74, 0x74, 0xD3 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x73, 0x39 }, new ushort[3] { 0x75, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions50 = { new ushort[3] { 0x66, 0x66, 0xD6 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x65, 0x39 }, new ushort[3] { 0x67, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions51 = { new ushort[3] { 0x6C, 0x6C, 0xDA }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x6B, 0x39 }, new ushort[3] { 0x6D, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions52 = { new ushort[3] { 0x65, 0x65, 0xDB }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x64, 0x39 }, new ushort[3] { 0x66, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions53 = { new ushort[3] { 0x73, 0x73, 0xDC }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x72, 0x39 }, new ushort[3] { 0x74, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions54 = { new ushort[3] { 0x65, 0x65, 0x63 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x64, 0x39 }, new ushort[3] { 0x66, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions55 = { new ushort[3] { 0x65, 0x65, 0x64 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x64, 0x39 }, new ushort[3] { 0x66, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions56 = { new ushort[3] { 0x65, 0x65, 0x62 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x64, 0x39 }, new ushort[3] { 0x66, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions57 = { new ushort[3] { 0x73, 0x73, 0x75 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x72, 0x39 }, new ushort[3] { 0x74, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions58 = { new ushort[3] { 0x61, 0x61, 0x76 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x62, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions59 = { new ushort[3] { 0x69, 0x69, 0x65 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x68, 0x39 }, new ushort[3] { 0x6A, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions5A = { new ushort[3] { 0x69, 0x69, 0x66 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x68, 0x39 }, new ushort[3] { 0x6A, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions5B = { new ushort[3] { 0x74, 0x74, 0x77 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x73, 0x39 }, new ushort[3] { 0x75, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions5C = { new ushort[3] { 0x72, 0x72, 0x78 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x71, 0x39 }, new ushort[3] { 0x73, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions5D = { new ushort[3] { 0x62, 0x62, 0x67 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x61, 0x39 }, new ushort[3] { 0x63, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions5E = { new ushort[3] { 0x6F, 0x6F, 0x68 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x6E, 0x39 }, new ushort[3] { 0x70, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions5F = { new ushort[3] { 0x6E, 0x6E, 0x79 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x6D, 0x39 }, new ushort[3] { 0x6F, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions60 = { new ushort[3] { 0x68, 0x68, 0x56 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x67, 0x39 }, new ushort[3] { 0x69, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions61 = { new ushort[3] { 0x63, 0x63, 0x69 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x62, 0x39 }, new ushort[3] { 0x64, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions62 = { new ushort[3] { 0x63, 0x63, 0x6A }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x62, 0x39 }, new ushort[3] { 0x64, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions63 = { new ushort[3] { 0x6F, 0x6F, 0x7A }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x6E, 0x39 }, new ushort[3] { 0x70, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions64 = { new ushort[3] { 0x63, 0x63, 0x7B }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x62, 0x39 }, new ushort[3] { 0x64, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions65 = { new ushort[3] { 0x6E, 0x6E, 0x7C }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x6D, 0x39 }, new ushort[3] { 0x6F, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions66 = { new ushort[3] { 0x6D, 0x6D, 0x6B }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x6C, 0x39 }, new ushort[3] { 0x6E, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions67 = { new ushort[3] { 0x6C, 0x6C, 0x7D }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x6B, 0x39 }, new ushort[3] { 0x6D, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions68 = { new ushort[3] { 0x72, 0x72, 0x7E }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x71, 0x39 }, new ushort[3] { 0x73, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions69 = { new ushort[3] { 0x6B, 0x6B, 0x6C }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x6A, 0x39 }, new ushort[3] { 0x6C, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions6A = { new ushort[3] { 0x6B, 0x6B, 0x6D }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x6A, 0x39 }, new ushort[3] { 0x6C, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions6B = { new ushort[3] { 0x61, 0x61, 0x7F }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x62, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions6C = { new ushort[3] { 0x65, 0x65, 0x80 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x64, 0x39 }, new ushort[3] { 0x66, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions6D = { new ushort[3] { 0x65, 0x65, 0x81 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x64, 0x39 }, new ushort[3] { 0x66, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions6E = { new ushort[3] { 0x6C, 0x6C, 0xDD }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x6B, 0x39 }, new ushort[3] { 0x6D, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions6F = { new ushort[3] { 0x65, 0x65, 0xDE }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x64, 0x39 }, new ushort[3] { 0x66, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions70 = { new ushort[3] { 0x65, 0x65, 0xDF }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x64, 0x39 }, new ushort[3] { 0x66, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions71 = { new ushort[3] { 0x74, 0x74, 0xE0 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x73, 0x39 }, new ushort[3] { 0x75, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions72 = { new ushort[3] { 0x67, 0x67, 0xE1 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x66, 0x39 }, new ushort[3] { 0x68, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions73 = { new ushort[3] { 0x72, 0x72, 0xE2 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x71, 0x39 }, new ushort[3] { 0x73, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions74 = { new ushort[3] { 0x64, 0x64, 0xE3 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x63, 0x39 }, new ushort[3] { 0x65, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions75 = { new ushort[3] { 0x65, 0x65, 0xE4 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x64, 0x39 }, new ushort[3] { 0x66, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions76 = { new ushort[3] { 0x74, 0x74, 0xE5 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x73, 0x39 }, new ushort[3] { 0x75, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions77 = { new ushort[3] { 0x65, 0x65, 0xE6 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x64, 0x39 }, new ushort[3] { 0x66, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions78 = { new ushort[3] { 0x74, 0x74, 0xE7 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x73, 0x39 }, new ushort[3] { 0x75, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions79 = { new ushort[3] { 0x67, 0x67, 0xE8 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x66, 0x39 }, new ushort[3] { 0x68, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions7A = { new ushort[3] { 0x66, 0x66, 0xE9 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x65, 0x39 }, new ushort[3] { 0x67, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions7B = { new ushort[3] { 0x74, 0x74, 0xEA }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x73, 0x39 }, new ushort[3] { 0x75, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions7C = { new ushort[3] { 0x67, 0x67, 0xEB }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x66, 0x39 }, new ushort[3] { 0x68, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions7D = { new ushort[3] { 0x65, 0x65, 0xEC }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x64, 0x39 }, new ushort[3] { 0x66, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions7E = { new ushort[3] { 0x74, 0x74, 0xED }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x73, 0x39 }, new ushort[3] { 0x75, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions7F = { new ushort[3] { 0x6C, 0x6C, 0xEE }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x6B, 0x39 }, new ushort[3] { 0x6D, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions80 = { new ushort[3] { 0x64, 0x64, 0xEF }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x63, 0x39 }, new ushort[3] { 0x65, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions81 = { new ushort[3] { 0x64, 0x64, 0xF0 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x63, 0x39 }, new ushort[3] { 0x65, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions82 = { new ushort[3] { 0x61, 0x61, 0x3D }, new ushort[3] { 0x6C, 0x6C, 0x3E }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x62, 0x6B, 0x39 }, new ushort[3] { 0x6D, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions83 = { new ushort[3] { 0x65, 0x65, 0x47 }, new ushort[3] { 0x6F, 0x6F, 0x49 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x64, 0x39 }, new ushort[3] { 0x66, 0x6E, 0x39 }, new ushort[3] { 0x70, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions84 = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions85 = { new ushort[3] { 0x58, 0x58, 0x8 }, new ushort[3] { 0x78, 0x78, 0x8 }, new ushort[3] { 0x4C, 0x4C, 0x87 }, new ushort[3] { 0x6C, 0x6C, 0x87 }, new ushort[3] { 0x44, 0x44, 0xAB }, new ushort[3] { 0x46, 0x46, 0xAB }, new ushort[3] { 0x4D, 0x4D, 0xAB }, new ushort[3] { 0x64, 0x64, 0xAB }, new ushort[3] { 0x66, 0x66, 0xAB }, new ushort[3] { 0x6D, 0x6D, 0xAB }, new ushort[3] { 0x45, 0x45, 0x9 }, new ushort[3] { 0x65, 0x65, 0x9 }, new ushort[3] { 0x2E, 0x2E, 0xA }, new ushort[3] { 0x55, 0x55, 0x88 }, new ushort[3] { 0x75, 0x75, 0x88 } };
        private static ushort[][] staticTransitions86 = { new ushort[3] { 0x30, 0x39, 0x86 }, new ushort[3] { 0x44, 0x44, 0xAB }, new ushort[3] { 0x46, 0x46, 0xAB }, new ushort[3] { 0x4D, 0x4D, 0xAB }, new ushort[3] { 0x64, 0x64, 0xAB }, new ushort[3] { 0x66, 0x66, 0xAB }, new ushort[3] { 0x6D, 0x6D, 0xAB }, new ushort[3] { 0x45, 0x45, 0x9 }, new ushort[3] { 0x65, 0x65, 0x9 }, new ushort[3] { 0x2E, 0x2E, 0xA } };
        private static ushort[][] staticTransitions87 = { new ushort[3] { 0x55, 0x55, 0x89 }, new ushort[3] { 0x75, 0x75, 0x89 }, new ushort[3] { 0x44, 0x44, 0xAB }, new ushort[3] { 0x46, 0x46, 0xAB }, new ushort[3] { 0x4D, 0x4D, 0xAB }, new ushort[3] { 0x64, 0x64, 0xAB }, new ushort[3] { 0x66, 0x66, 0xAB }, new ushort[3] { 0x6D, 0x6D, 0xAB }, new ushort[3] { 0x45, 0x45, 0x9 }, new ushort[3] { 0x65, 0x65, 0x9 }, new ushort[3] { 0x2E, 0x2E, 0xA } };
        private static ushort[][] staticTransitions88 = { new ushort[3] { 0x4C, 0x4C, 0x89 }, new ushort[3] { 0x6C, 0x6C, 0x89 }, new ushort[3] { 0x44, 0x44, 0xAB }, new ushort[3] { 0x46, 0x46, 0xAB }, new ushort[3] { 0x4D, 0x4D, 0xAB }, new ushort[3] { 0x64, 0x64, 0xAB }, new ushort[3] { 0x66, 0x66, 0xAB }, new ushort[3] { 0x6D, 0x6D, 0xAB }, new ushort[3] { 0x45, 0x45, 0x9 }, new ushort[3] { 0x65, 0x65, 0x9 }, new ushort[3] { 0x2E, 0x2E, 0xA } };
        private static ushort[][] staticTransitions89 = { new ushort[3] { 0x44, 0x44, 0xAB }, new ushort[3] { 0x46, 0x46, 0xAB }, new ushort[3] { 0x4D, 0x4D, 0xAB }, new ushort[3] { 0x64, 0x64, 0xAB }, new ushort[3] { 0x66, 0x66, 0xAB }, new ushort[3] { 0x6D, 0x6D, 0xAB }, new ushort[3] { 0x45, 0x45, 0x9 }, new ushort[3] { 0x65, 0x65, 0x9 }, new ushort[3] { 0x2E, 0x2E, 0xA } };
        private static ushort[][] staticTransitions8A = { new ushort[3] { 0x31, 0x39, 0xAC }, new ushort[3] { 0x30, 0x30, 0xAD } };
        private static ushort[][] staticTransitions8B = { new ushort[3] { 0x73, 0x73, 0x4A }, new ushort[3] { 0x69, 0x69, 0x4B }, new ushort[3] { 0x6C, 0x6C, 0x8F }, new ushort[3] { 0x6E, 0x6E, 0x48 }, new ushort[3] { 0x4C, 0x4C, 0x90 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x4B, 0x39 }, new ushort[3] { 0x4D, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x68, 0x39 }, new ushort[3] { 0x6A, 0x6B, 0x39 }, new ushort[3] { 0x6D, 0x6D, 0x39 }, new ushort[3] { 0x6F, 0x72, 0x39 }, new ushort[3] { 0x74, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions8C = { new ushort[3] { 0x6F, 0x6F, 0x4C }, new ushort[3] { 0x55, 0x55, 0x90 }, new ushort[3] { 0x75, 0x75, 0x90 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x54, 0x39 }, new ushort[3] { 0x56, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x6E, 0x39 }, new ushort[3] { 0x70, 0x74, 0x39 }, new ushort[3] { 0x76, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions8D = { new ushort[3] { 0x55, 0x55, 0x91 }, new ushort[3] { 0x75, 0x75, 0x91 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x54, 0x39 }, new ushort[3] { 0x56, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x74, 0x39 }, new ushort[3] { 0x76, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions8E = { new ushort[3] { 0x4C, 0x4C, 0x91 }, new ushort[3] { 0x6C, 0x6C, 0x91 }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x4B, 0x39 }, new ushort[3] { 0x4D, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x6B, 0x39 }, new ushort[3] { 0x6D, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions8F = { new ushort[3] { 0x6F, 0x6F, 0x5F }, new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x6E, 0x39 }, new ushort[3] { 0x70, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions90 = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions91 = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitions92 = {  };
        private static ushort[][] staticTransitions93 = {  };
        private static ushort[][] staticTransitions94 = {  };
        private static ushort[][] staticTransitions95 = {  };
        private static ushort[][] staticTransitions96 = {  };
        private static ushort[][] staticTransitions97 = { new ushort[3] { 0x2B, 0x2B, 0xB8 }, new ushort[3] { 0x3D, 0x3D, 0xB9 } };
        private static ushort[][] staticTransitions98 = { new ushort[3] { 0x2D, 0x2D, 0xBA }, new ushort[3] { 0x3D, 0x3D, 0xBB } };
        private static ushort[][] staticTransitions99 = { new ushort[3] { 0x3D, 0x3D, 0xBC } };
        private static ushort[][] staticTransitions9A = {  };
        private static ushort[][] staticTransitions9B = { new ushort[3] { 0x3D, 0x3D, 0xBD } };
        private static ushort[][] staticTransitions9C = { new ushort[3] { 0x3D, 0x3D, 0xBE } };
        private static ushort[][] staticTransitions9D = { new ushort[3] { 0x3C, 0x3C, 0xBF }, new ushort[3] { 0x3D, 0x3D, 0xC0 } };
        private static ushort[][] staticTransitions9E = { new ushort[3] { 0x3E, 0x3E, 0xC1 }, new ushort[3] { 0x3D, 0x3D, 0xC2 } };
        private static ushort[][] staticTransitions9F = { new ushort[3] { 0x3D, 0x3D, 0xC4 } };
        private static ushort[][] staticTransitionsA0 = { new ushort[3] { 0x26, 0x26, 0xC5 }, new ushort[3] { 0x3D, 0x3D, 0xC6 } };
        private static ushort[][] staticTransitionsA1 = { new ushort[3] { 0x3D, 0x3D, 0xC7 } };
        private static ushort[][] staticTransitionsA2 = { new ushort[3] { 0x7C, 0x7C, 0xC8 }, new ushort[3] { 0x3D, 0x3D, 0xC9 } };
        private static ushort[][] staticTransitionsA3 = {  };
        private static ushort[][] staticTransitionsA4 = {  };
        private static ushort[][] staticTransitionsA5 = {  };
        private static ushort[][] staticTransitionsA6 = {  };
        private static ushort[][] staticTransitionsA7 = { new ushort[3] { 0x2F, 0x2F, 0x10 }, new ushort[3] { 0x9, 0xD, 0xCA }, new ushort[3] { 0x20, 0x20, 0xCA }, new ushort[3] { 0x2028, 0x2029, 0xCA } };
        private static ushort[][] staticTransitionsA8 = { new ushort[3] { 0xA, 0xA, 0xA7 }, new ushort[3] { 0x2F, 0x2F, 0x10 }, new ushort[3] { 0x9, 0x9, 0xCA }, new ushort[3] { 0xB, 0xD, 0xCA }, new ushort[3] { 0x20, 0x20, 0xCA }, new ushort[3] { 0x2028, 0x2029, 0xCA } };
        private static ushort[][] staticTransitionsA9 = { new ushort[3] { 0x2F, 0x2F, 0x10 }, new ushort[3] { 0x9, 0xD, 0xCA }, new ushort[3] { 0x20, 0x20, 0xCA }, new ushort[3] { 0x2028, 0x2029, 0xCA } };
        private static ushort[][] staticTransitionsAA = {  };
        private static ushort[][] staticTransitionsAB = {  };
        private static ushort[][] staticTransitionsAC = { new ushort[3] { 0x30, 0x39, 0xAC }, new ushort[3] { 0x45, 0x45, 0x9 }, new ushort[3] { 0x65, 0x65, 0x9 }, new ushort[3] { 0x44, 0x44, 0xAB }, new ushort[3] { 0x46, 0x46, 0xAB }, new ushort[3] { 0x4D, 0x4D, 0xAB }, new ushort[3] { 0x64, 0x64, 0xAB }, new ushort[3] { 0x66, 0x66, 0xAB }, new ushort[3] { 0x6D, 0x6D, 0xAB } };
        private static ushort[][] staticTransitionsAD = { new ushort[3] { 0x4C, 0x4C, 0xB0 }, new ushort[3] { 0x6C, 0x6C, 0xB0 }, new ushort[3] { 0x45, 0x45, 0x9 }, new ushort[3] { 0x65, 0x65, 0x9 }, new ushort[3] { 0x55, 0x55, 0xB1 }, new ushort[3] { 0x75, 0x75, 0xB1 }, new ushort[3] { 0x44, 0x44, 0xAB }, new ushort[3] { 0x46, 0x46, 0xAB }, new ushort[3] { 0x4D, 0x4D, 0xAB }, new ushort[3] { 0x64, 0x64, 0xAB }, new ushort[3] { 0x66, 0x66, 0xAB }, new ushort[3] { 0x6D, 0x6D, 0xAB } };
        private static ushort[][] staticTransitionsAE = { new ushort[3] { 0x30, 0x39, 0xAE }, new ushort[3] { 0x44, 0x44, 0xAB }, new ushort[3] { 0x46, 0x46, 0xAB }, new ushort[3] { 0x4D, 0x4D, 0xAB }, new ushort[3] { 0x64, 0x64, 0xAB }, new ushort[3] { 0x66, 0x66, 0xAB }, new ushort[3] { 0x6D, 0x6D, 0xAB } };
        private static ushort[][] staticTransitionsAF = { new ushort[3] { 0x4C, 0x4C, 0xB2 }, new ushort[3] { 0x6C, 0x6C, 0xB2 }, new ushort[3] { 0x44, 0x44, 0xAB }, new ushort[3] { 0x46, 0x46, 0xAB }, new ushort[3] { 0x4D, 0x4D, 0xAB }, new ushort[3] { 0x64, 0x64, 0xAB }, new ushort[3] { 0x66, 0x66, 0xAB }, new ushort[3] { 0x6D, 0x6D, 0xAB }, new ushort[3] { 0x55, 0x55, 0xB3 }, new ushort[3] { 0x75, 0x75, 0xB3 } };
        private static ushort[][] staticTransitionsB0 = { new ushort[3] { 0x55, 0x55, 0xB4 }, new ushort[3] { 0x75, 0x75, 0xB4 }, new ushort[3] { 0x45, 0x45, 0x9 }, new ushort[3] { 0x65, 0x65, 0x9 }, new ushort[3] { 0x44, 0x44, 0xAB }, new ushort[3] { 0x46, 0x46, 0xAB }, new ushort[3] { 0x4D, 0x4D, 0xAB }, new ushort[3] { 0x64, 0x64, 0xAB }, new ushort[3] { 0x66, 0x66, 0xAB }, new ushort[3] { 0x6D, 0x6D, 0xAB } };
        private static ushort[][] staticTransitionsB1 = { new ushort[3] { 0x4C, 0x4C, 0xB4 }, new ushort[3] { 0x6C, 0x6C, 0xB4 }, new ushort[3] { 0x45, 0x45, 0x9 }, new ushort[3] { 0x65, 0x65, 0x9 }, new ushort[3] { 0x44, 0x44, 0xAB }, new ushort[3] { 0x46, 0x46, 0xAB }, new ushort[3] { 0x4D, 0x4D, 0xAB }, new ushort[3] { 0x64, 0x64, 0xAB }, new ushort[3] { 0x66, 0x66, 0xAB }, new ushort[3] { 0x6D, 0x6D, 0xAB } };
        private static ushort[][] staticTransitionsB2 = { new ushort[3] { 0x55, 0x55, 0xB5 }, new ushort[3] { 0x75, 0x75, 0xB5 }, new ushort[3] { 0x44, 0x44, 0xAB }, new ushort[3] { 0x46, 0x46, 0xAB }, new ushort[3] { 0x4D, 0x4D, 0xAB }, new ushort[3] { 0x64, 0x64, 0xAB }, new ushort[3] { 0x66, 0x66, 0xAB }, new ushort[3] { 0x6D, 0x6D, 0xAB } };
        private static ushort[][] staticTransitionsB3 = { new ushort[3] { 0x4C, 0x4C, 0xB5 }, new ushort[3] { 0x6C, 0x6C, 0xB5 }, new ushort[3] { 0x44, 0x44, 0xAB }, new ushort[3] { 0x46, 0x46, 0xAB }, new ushort[3] { 0x4D, 0x4D, 0xAB }, new ushort[3] { 0x64, 0x64, 0xAB }, new ushort[3] { 0x66, 0x66, 0xAB }, new ushort[3] { 0x6D, 0x6D, 0xAB } };
        private static ushort[][] staticTransitionsB4 = { new ushort[3] { 0x45, 0x45, 0x9 }, new ushort[3] { 0x65, 0x65, 0x9 }, new ushort[3] { 0x44, 0x44, 0xAB }, new ushort[3] { 0x46, 0x46, 0xAB }, new ushort[3] { 0x4D, 0x4D, 0xAB }, new ushort[3] { 0x64, 0x64, 0xAB }, new ushort[3] { 0x66, 0x66, 0xAB }, new ushort[3] { 0x6D, 0x6D, 0xAB } };
        private static ushort[][] staticTransitionsB5 = { new ushort[3] { 0x44, 0x44, 0xAB }, new ushort[3] { 0x46, 0x46, 0xAB }, new ushort[3] { 0x4D, 0x4D, 0xAB }, new ushort[3] { 0x64, 0x64, 0xAB }, new ushort[3] { 0x66, 0x66, 0xAB }, new ushort[3] { 0x6D, 0x6D, 0xAB } };
        private static ushort[][] staticTransitionsB6 = {  };
        private static ushort[][] staticTransitionsB7 = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitionsB8 = {  };
        private static ushort[][] staticTransitionsB9 = {  };
        private static ushort[][] staticTransitionsBA = {  };
        private static ushort[][] staticTransitionsBB = {  };
        private static ushort[][] staticTransitionsBC = {  };
        private static ushort[][] staticTransitionsBD = {  };
        private static ushort[][] staticTransitionsBE = {  };
        private static ushort[][] staticTransitionsBF = { new ushort[3] { 0x3D, 0x3D, 0xD4 } };
        private static ushort[][] staticTransitionsC0 = {  };
        private static ushort[][] staticTransitionsC1 = { new ushort[3] { 0x3D, 0x3D, 0xD5 } };
        private static ushort[][] staticTransitionsC2 = {  };
        private static ushort[][] staticTransitionsC3 = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitionsC4 = {  };
        private static ushort[][] staticTransitionsC5 = {  };
        private static ushort[][] staticTransitionsC6 = {  };
        private static ushort[][] staticTransitionsC7 = {  };
        private static ushort[][] staticTransitionsC8 = {  };
        private static ushort[][] staticTransitionsC9 = {  };
        private static ushort[][] staticTransitionsCA = { new ushort[3] { 0x2F, 0x2F, 0x10 }, new ushort[3] { 0x9, 0xD, 0xCA }, new ushort[3] { 0x20, 0x20, 0xCA }, new ushort[3] { 0x2028, 0x2029, 0xCA } };
        private static ushort[][] staticTransitionsCB = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitionsCC = { new ushort[3] { 0x30, 0x39, 0xCC }, new ushort[3] { 0x41, 0x46, 0xCC }, new ushort[3] { 0x61, 0x66, 0xCC }, new ushort[3] { 0x4C, 0x4C, 0xCD }, new ushort[3] { 0x6C, 0x6C, 0xCD }, new ushort[3] { 0x55, 0x55, 0xCE }, new ushort[3] { 0x75, 0x75, 0xCE } };
        private static ushort[][] staticTransitionsCD = { new ushort[3] { 0x55, 0x55, 0xCF }, new ushort[3] { 0x75, 0x75, 0xCF } };
        private static ushort[][] staticTransitionsCE = { new ushort[3] { 0x4C, 0x4C, 0xCF }, new ushort[3] { 0x6C, 0x6C, 0xCF } };
        private static ushort[][] staticTransitionsCF = {  };
        private static ushort[][] staticTransitionsD0 = {  };
        private static ushort[][] staticTransitionsD1 = { new ushort[3] { 0x22, 0x22, 0xF } };
        private static ushort[][] staticTransitionsD2 = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitionsD3 = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitionsD4 = {  };
        private static ushort[][] staticTransitionsD5 = {  };
        private static ushort[][] staticTransitionsD6 = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitionsD7 = { new ushort[3] { 0x2F, 0x2F, 0x10 }, new ushort[3] { 0x9, 0xD, 0xCA }, new ushort[3] { 0x20, 0x20, 0xCA }, new ushort[3] { 0x2028, 0x2029, 0xCA } };
        private static ushort[][] staticTransitionsD8 = { new ushort[3] { 0xA, 0xA, 0xD7 }, new ushort[3] { 0x2F, 0x2F, 0x10 }, new ushort[3] { 0x9, 0x9, 0xCA }, new ushort[3] { 0xB, 0xD, 0xCA }, new ushort[3] { 0x20, 0x20, 0xCA }, new ushort[3] { 0x2028, 0x2029, 0xCA } };
        private static ushort[][] staticTransitionsD9 = { new ushort[3] { 0x2F, 0x2F, 0x10 }, new ushort[3] { 0x9, 0xD, 0xCA }, new ushort[3] { 0x20, 0x20, 0xCA }, new ushort[3] { 0x2028, 0x2029, 0xCA } };
        private static ushort[][] staticTransitionsDA = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitionsDB = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitionsDC = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitionsDD = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitionsDE = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitionsDF = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitionsE0 = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitionsE1 = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitionsE2 = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitionsE3 = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitionsE4 = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitionsE5 = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitionsE6 = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitionsE7 = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitionsE8 = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitionsE9 = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitionsEA = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitionsEB = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitionsEC = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitionsED = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitionsEE = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitionsEF = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][] staticTransitionsF0 = { new ushort[3] { 0x30, 0x39, 0x39 }, new ushort[3] { 0x41, 0x5A, 0x39 }, new ushort[3] { 0x5F, 0x5F, 0x39 }, new ushort[3] { 0x61, 0x7A, 0x39 } };
        private static ushort[][][] staticTransitions = { staticTransitions0, staticTransitions1, staticTransitions2, staticTransitions3, staticTransitions4, staticTransitions5, staticTransitions6, staticTransitions7, staticTransitions8, staticTransitions9, staticTransitionsA, staticTransitionsB, staticTransitionsC, staticTransitionsD, staticTransitionsE, staticTransitionsF, staticTransitions10, staticTransitions11, staticTransitions12, staticTransitions13, staticTransitions14, staticTransitions15, staticTransitions16, staticTransitions17, staticTransitions18, staticTransitions19, staticTransitions1A, staticTransitions1B, staticTransitions1C, staticTransitions1D, staticTransitions1E, staticTransitions1F, staticTransitions20, staticTransitions21, staticTransitions22, staticTransitions23, staticTransitions24, staticTransitions25, staticTransitions26, staticTransitions27, staticTransitions28, staticTransitions29, staticTransitions2A, staticTransitions2B, staticTransitions2C, staticTransitions2D, staticTransitions2E, staticTransitions2F, staticTransitions30, staticTransitions31, staticTransitions32, staticTransitions33, staticTransitions34, staticTransitions35, staticTransitions36, staticTransitions37, staticTransitions38, staticTransitions39, staticTransitions3A, staticTransitions3B, staticTransitions3C, staticTransitions3D, staticTransitions3E, staticTransitions3F, staticTransitions40, staticTransitions41, staticTransitions42, staticTransitions43, staticTransitions44, staticTransitions45, staticTransitions46, staticTransitions47, staticTransitions48, staticTransitions49, staticTransitions4A, staticTransitions4B, staticTransitions4C, staticTransitions4D, staticTransitions4E, staticTransitions4F, staticTransitions50, staticTransitions51, staticTransitions52, staticTransitions53, staticTransitions54, staticTransitions55, staticTransitions56, staticTransitions57, staticTransitions58, staticTransitions59, staticTransitions5A, staticTransitions5B, staticTransitions5C, staticTransitions5D, staticTransitions5E, staticTransitions5F, staticTransitions60, staticTransitions61, staticTransitions62, staticTransitions63, staticTransitions64, staticTransitions65, staticTransitions66, staticTransitions67, staticTransitions68, staticTransitions69, staticTransitions6A, staticTransitions6B, staticTransitions6C, staticTransitions6D, staticTransitions6E, staticTransitions6F, staticTransitions70, staticTransitions71, staticTransitions72, staticTransitions73, staticTransitions74, staticTransitions75, staticTransitions76, staticTransitions77, staticTransitions78, staticTransitions79, staticTransitions7A, staticTransitions7B, staticTransitions7C, staticTransitions7D, staticTransitions7E, staticTransitions7F, staticTransitions80, staticTransitions81, staticTransitions82, staticTransitions83, staticTransitions84, staticTransitions85, staticTransitions86, staticTransitions87, staticTransitions88, staticTransitions89, staticTransitions8A, staticTransitions8B, staticTransitions8C, staticTransitions8D, staticTransitions8E, staticTransitions8F, staticTransitions90, staticTransitions91, staticTransitions92, staticTransitions93, staticTransitions94, staticTransitions95, staticTransitions96, staticTransitions97, staticTransitions98, staticTransitions99, staticTransitions9A, staticTransitions9B, staticTransitions9C, staticTransitions9D, staticTransitions9E, staticTransitions9F, staticTransitionsA0, staticTransitionsA1, staticTransitionsA2, staticTransitionsA3, staticTransitionsA4, staticTransitionsA5, staticTransitionsA6, staticTransitionsA7, staticTransitionsA8, staticTransitionsA9, staticTransitionsAA, staticTransitionsAB, staticTransitionsAC, staticTransitionsAD, staticTransitionsAE, staticTransitionsAF, staticTransitionsB0, staticTransitionsB1, staticTransitionsB2, staticTransitionsB3, staticTransitionsB4, staticTransitionsB5, staticTransitionsB6, staticTransitionsB7, staticTransitionsB8, staticTransitionsB9, staticTransitionsBA, staticTransitionsBB, staticTransitionsBC, staticTransitionsBD, staticTransitionsBE, staticTransitionsBF, staticTransitionsC0, staticTransitionsC1, staticTransitionsC2, staticTransitionsC3, staticTransitionsC4, staticTransitionsC5, staticTransitionsC6, staticTransitionsC7, staticTransitionsC8, staticTransitionsC9, staticTransitionsCA, staticTransitionsCB, staticTransitionsCC, staticTransitionsCD, staticTransitionsCE, staticTransitionsCF, staticTransitionsD0, staticTransitionsD1, staticTransitionsD2, staticTransitionsD3, staticTransitionsD4, staticTransitionsD5, staticTransitionsD6, staticTransitionsD7, staticTransitionsD8, staticTransitionsD9, staticTransitionsDA, staticTransitionsDB, staticTransitionsDC, staticTransitionsDD, staticTransitionsDE, staticTransitionsDF, staticTransitionsE0, staticTransitionsE1, staticTransitionsE2, staticTransitionsE3, staticTransitionsE4, staticTransitionsE5, staticTransitionsE6, staticTransitionsE7, staticTransitionsE8, staticTransitionsE9, staticTransitionsEA, staticTransitionsEB, staticTransitionsEC, staticTransitionsED, staticTransitionsEE, staticTransitionsEF, staticTransitionsF0 };
        private static int[] staticFinals = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 1, 1, 1, 1, 1, 1, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 25, 48, 49, 49, 49, 49, 50, 51, 52, 53, 54, 55, 56, 25, 25, 25, 1, 1, 57, 58, 59, 60, 61, 62, 63, 64, 1, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76 };
        protected override void setup() {
            symbolsSID = staticSymbolsSID;
            symbolsName = staticSymbolsName;
            symbolsSubGrammars = new Dictionary<ushort, MatchSubGrammar>();
            transitions = staticTransitions;
            finals = staticFinals;
            separatorID = 0x7;
        }
        public override Hime.Redist.Parsers.ILexer Clone() {
            return new Test2_Lexer(this);
        }
        public Test2_Lexer(string input) : base(new System.IO.StringReader(input)) {}
        public Test2_Lexer(System.IO.TextReader input) : base(input) {}
        public Test2_Lexer(Test2_Lexer original) : base(original) {}
    }
    class Test2_Parser : Hime.Redist.Parsers.BaseLRAParser
    {
        private static void Production_14_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x14, "qualified_name"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            nodes.Add(SubRoot);
        }
        private static void Production_15_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x15, "type"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_15_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x15, "type"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_16_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x16, "type_non_array"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_16_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x16, "type_non_array"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_17_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x17, "type_object"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_17_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x17, "type_object"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_17_2 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x17, "type_object"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_18_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x18, "type_simple"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_18_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x18, "type_simple"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_18_2 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x18, "type_simple"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_18_3 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x18, "type_simple"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_19_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x19, "type_simple_integral"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_19_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x19, "type_simple_integral"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_19_2 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x19, "type_simple_integral"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_19_3 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x19, "type_simple_integral"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_19_4 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x19, "type_simple_integral"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_19_5 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x19, "type_simple_integral"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_19_6 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x19, "type_simple_integral"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_19_7 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x19, "type_simple_integral"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_19_8 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x19, "type_simple_integral"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_1A_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x1A, "type_simple_float"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_1A_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x1A, "type_simple_float"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_1B_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x1B, "type_array"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_1C_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x1C, "type_array_rank"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_1D_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x1D, "type_array_rank_dim"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_1E_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x1E, "type_predefined"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_1E_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x1E, "type_predefined"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_1E_2 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x1E, "type_predefined"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_1E_3 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x1E, "type_predefined"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_1E_4 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x1E, "type_predefined"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_1E_5 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x1E, "type_predefined"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_1E_6 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x1E, "type_predefined"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_1E_7 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x1E, "type_predefined"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_1E_8 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x1E, "type_predefined"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_1E_9 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x1E, "type_predefined"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_1E_A (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x1E, "type_predefined"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_1E_B (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x1E, "type_predefined"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_1E_C (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x1E, "type_predefined"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_1E_D (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x1E, "type_predefined"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_1E_E (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x1E, "type_predefined"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_1F_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x1F, "type_return"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_1F_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x1F, "type_return"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_20_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x20, "exp_atom"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_20_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x20, "exp_atom"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_20_2 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x20, "exp_atom"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_20_3 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x20, "exp_atom"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_20_4 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x20, "exp_atom"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_20_5 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x20, "exp_atom"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_20_6 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x20, "exp_atom"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_20_7 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x20, "exp_atom"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_20_8 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x20, "exp_atom"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_20_9 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x20, "exp_atom"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_20_A (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x20, "exp_atom"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_20_B (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x20, "exp_atom"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_20_C (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x20, "exp_atom"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_21_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 4, 4);
            nodes.RemoveRange(nodes.Count - 4, 4);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x21, "exp_op0_invoke"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            SubRoot.AppendChild(Definition[3]);
            nodes.Add(SubRoot);
        }
        private static void Production_21_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x21, "exp_op0_invoke"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_22_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 5, 5);
            nodes.RemoveRange(nodes.Count - 5, 5);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x22, "exp_op0_obj_creation"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            SubRoot.AppendChild(Definition[3]);
            SubRoot.AppendChild(Definition[4]);
            nodes.Add(SubRoot);
        }
        private static void Production_22_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 4, 4);
            nodes.RemoveRange(nodes.Count - 4, 4);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x22, "exp_op0_obj_creation"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            SubRoot.AppendChild(Definition[3]);
            nodes.Add(SubRoot);
        }
        private static void Production_23_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x23, "exp_op0_post_increment"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            nodes.Add(SubRoot);
        }
        private static void Production_24_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x24, "exp_op0_post_decrement"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            nodes.Add(SubRoot);
        }
        private static void Production_25_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x25, "exp_op0_member_access"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_25_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x25, "exp_op0_member_access"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_26_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 4, 4);
            nodes.RemoveRange(nodes.Count - 4, 4);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x26, "exp_op0_element_access"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            SubRoot.AppendChild(Definition[3]);
            nodes.Add(SubRoot);
        }
        private static void Production_26_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x26, "exp_op0_element_access"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_27_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 4, 4);
            nodes.RemoveRange(nodes.Count - 4, 4);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x27, "exp_op0_typeof"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            SubRoot.AppendChild(Definition[3]);
            nodes.Add(SubRoot);
        }
        private static void Production_28_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 4, 4);
            nodes.RemoveRange(nodes.Count - 4, 4);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x28, "exp_op0_checked"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            SubRoot.AppendChild(Definition[3]);
            nodes.Add(SubRoot);
        }
        private static void Production_29_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 4, 4);
            nodes.RemoveRange(nodes.Count - 4, 4);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x29, "exp_op0_unchecked"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            SubRoot.AppendChild(Definition[3]);
            nodes.Add(SubRoot);
        }
        private static void Production_2A_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 7, 7);
            nodes.RemoveRange(nodes.Count - 7, 7);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x2A, "exp_op0_array_creation"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            SubRoot.AppendChild(Definition[3]);
            SubRoot.AppendChild(Definition[4]);
            SubRoot.AppendChild(Definition[5]);
            SubRoot.AppendChild(Definition[6]);
            nodes.Add(SubRoot);
        }
        private static void Production_2A_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 6, 6);
            nodes.RemoveRange(nodes.Count - 6, 6);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x2A, "exp_op0_array_creation"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            SubRoot.AppendChild(Definition[3]);
            SubRoot.AppendChild(Definition[4]);
            SubRoot.AppendChild(Definition[5]);
            nodes.Add(SubRoot);
        }
        private static void Production_2A_2 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 6, 6);
            nodes.RemoveRange(nodes.Count - 6, 6);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x2A, "exp_op0_array_creation"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            SubRoot.AppendChild(Definition[3]);
            SubRoot.AppendChild(Definition[4]);
            SubRoot.AppendChild(Definition[5]);
            nodes.Add(SubRoot);
        }
        private static void Production_2A_3 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 5, 5);
            nodes.RemoveRange(nodes.Count - 5, 5);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x2A, "exp_op0_array_creation"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            SubRoot.AppendChild(Definition[3]);
            SubRoot.AppendChild(Definition[4]);
            nodes.Add(SubRoot);
        }
        private static void Production_2A_4 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x2A, "exp_op0_array_creation"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_2B_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x2B, "exp_op0_no_array"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_2B_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x2B, "exp_op0_no_array"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_2B_2 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x2B, "exp_op0_no_array"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_2B_3 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x2B, "exp_op0_no_array"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_2B_4 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x2B, "exp_op0_no_array"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_2B_5 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x2B, "exp_op0_no_array"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_2B_6 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x2B, "exp_op0_no_array"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_2B_7 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x2B, "exp_op0_no_array"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_2B_8 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x2B, "exp_op0_no_array"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_2C_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x2C, "exp_op0"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_2C_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x2C, "exp_op0"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_2D_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x2D, "exp_op1_pre_increment"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            nodes.Add(SubRoot);
        }
        private static void Production_2E_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x2E, "exp_op1_pre_decrement"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            nodes.Add(SubRoot);
        }
        private static void Production_2F_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 4, 4);
            nodes.RemoveRange(nodes.Count - 4, 4);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x2F, "exp_op1_cast"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            SubRoot.AppendChild(Definition[3]);
            nodes.Add(SubRoot);
        }
        private static void Production_30_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x30, "exp_op1"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_30_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x30, "exp_op1"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            nodes.Add(SubRoot);
        }
        private static void Production_30_2 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x30, "exp_op1"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            nodes.Add(SubRoot);
        }
        private static void Production_30_3 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x30, "exp_op1"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            nodes.Add(SubRoot);
        }
        private static void Production_30_4 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x30, "exp_op1"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            nodes.Add(SubRoot);
        }
        private static void Production_30_5 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x30, "exp_op1"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_30_6 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x30, "exp_op1"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_30_7 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x30, "exp_op1"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_31_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x31, "exp_op2"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_31_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x31, "exp_op2"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_31_2 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x31, "exp_op2"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_31_3 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x31, "exp_op2"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_32_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x32, "exp_op3"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_32_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x32, "exp_op3"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_32_2 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x32, "exp_op3"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_33_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x33, "exp_op4"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_33_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x33, "exp_op4"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_33_2 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x33, "exp_op4"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_34_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x34, "exp_op5"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_34_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x34, "exp_op5"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_34_2 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x34, "exp_op5"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_34_3 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x34, "exp_op5"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_34_4 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x34, "exp_op5"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_34_5 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x34, "exp_op5"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_34_6 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x34, "exp_op5"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_35_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x35, "exp_op6"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_35_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x35, "exp_op6"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_35_2 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x35, "exp_op6"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_36_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x36, "exp_op7"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_36_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x36, "exp_op7"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_37_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x37, "exp_op8"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_37_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x37, "exp_op8"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_38_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x38, "exp_op9"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_38_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x38, "exp_op9"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_39_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x39, "exp_op10"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_39_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x39, "exp_op10"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_3A_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x3A, "exp_op11"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_3A_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x3A, "exp_op11"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_3B_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x3B, "exp_op12_conditional"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_3B_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 5, 5);
            nodes.RemoveRange(nodes.Count - 5, 5);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x3B, "exp_op12_conditional"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            SubRoot.AppendChild(Definition[3]);
            SubRoot.AppendChild(Definition[4]);
            nodes.Add(SubRoot);
        }
        private static void Production_3C_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_3C_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_3C_2 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_3C_3 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_3C_4 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_3C_5 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_3C_6 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_3C_7 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_3C_8 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_3C_9 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_3C_A (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_3D_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x3D, "expression"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_3D_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x3D, "expression"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_3E_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x3E, "exp_expression_list"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_3E_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x3E, "exp_expression_list"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_3F_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x3F, "exp_argument_list"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_3F_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x3F, "exp_argument_list"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_40_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x40, "exp_argument"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_40_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x40, "exp_argument"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            nodes.Add(SubRoot);
        }
        private static void Production_40_2 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x40, "exp_argument"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            nodes.Add(SubRoot);
        }
        private static void Production_41_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x41, "array_initializer"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_42_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x42, "variable_initializer"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_42_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x42, "variable_initializer"));
            SubRoot.AppendChild(Definition[0]);
            nodes.Add(SubRoot);
        }
        private static void Production_43_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x43, "variable_initializer_list"));
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            nodes.Add(SubRoot);
        }
        private static void Production_43_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x43, "variable_initializer_list"));
            nodes.Add(SubRoot);
        }
        private static void Production_45_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x45, "_m69"), Hime.Redist.Parsers.SyntaxTreeNodeAction.Replace);
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_45_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x45, "_m69"), Hime.Redist.Parsers.SyntaxTreeNodeAction.Replace);
            nodes.Add(SubRoot);
        }
        private static void Production_55_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x55, "_m85"), Hime.Redist.Parsers.SyntaxTreeNodeAction.Replace);
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            nodes.Add(SubRoot);
        }
        private static void Production_55_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x55, "_m85"), Hime.Redist.Parsers.SyntaxTreeNodeAction.Replace);
            nodes.Add(SubRoot);
        }
        private static void Production_59_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x59, "_m89"), Hime.Redist.Parsers.SyntaxTreeNodeAction.Replace);
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            nodes.Add(SubRoot);
        }
        private static void Production_59_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0x59, "_m89"), Hime.Redist.Parsers.SyntaxTreeNodeAction.Replace);
            nodes.Add(SubRoot);
        }
        private static void Production_B6_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0xB6, "_m182"), Hime.Redist.Parsers.SyntaxTreeNodeAction.Replace);
            SubRoot.AppendChild(Definition[0]);
            SubRoot.AppendChild(Definition[1]);
            SubRoot.AppendChild(Definition[2]);
            nodes.Add(SubRoot);
        }
        private static void Production_B6_1 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0xB6, "_m182"), Hime.Redist.Parsers.SyntaxTreeNodeAction.Replace);
            nodes.Add(SubRoot);
        }
        private static void Production_B7_0 (Hime.Redist.Parsers.BaseLRAParser parser, List<Hime.Redist.Parsers.SyntaxTreeNode> nodes)
        {
            List<Hime.Redist.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);
            Hime.Redist.Parsers.SyntaxTreeNode SubRoot = new Hime.Redist.Parsers.SyntaxTreeNode(new Hime.Redist.Parsers.SymbolVariable(0xB7, "_Axiom_"));
            SubRoot.AppendChild(Definition[0], Hime.Redist.Parsers.SyntaxTreeNodeAction.Promote);
            SubRoot.AppendChild(Definition[1], Hime.Redist.Parsers.SyntaxTreeNodeAction.Drop);
            nodes.Add(SubRoot);
        }
        private static Rule[] staticRules = {
           new Rule(Production_14_0, new Hime.Redist.Parsers.SymbolVariable(0x14, "qualified_name"), 2)
           , new Rule(Production_15_0, new Hime.Redist.Parsers.SymbolVariable(0x15, "type"), 1)
           , new Rule(Production_15_1, new Hime.Redist.Parsers.SymbolVariable(0x15, "type"), 1)
           , new Rule(Production_16_0, new Hime.Redist.Parsers.SymbolVariable(0x16, "type_non_array"), 1)
           , new Rule(Production_16_1, new Hime.Redist.Parsers.SymbolVariable(0x16, "type_non_array"), 1)
           , new Rule(Production_17_0, new Hime.Redist.Parsers.SymbolVariable(0x17, "type_object"), 1)
           , new Rule(Production_17_1, new Hime.Redist.Parsers.SymbolVariable(0x17, "type_object"), 1)
           , new Rule(Production_17_2, new Hime.Redist.Parsers.SymbolVariable(0x17, "type_object"), 1)
           , new Rule(Production_18_0, new Hime.Redist.Parsers.SymbolVariable(0x18, "type_simple"), 1)
           , new Rule(Production_18_1, new Hime.Redist.Parsers.SymbolVariable(0x18, "type_simple"), 1)
           , new Rule(Production_18_2, new Hime.Redist.Parsers.SymbolVariable(0x18, "type_simple"), 1)
           , new Rule(Production_18_3, new Hime.Redist.Parsers.SymbolVariable(0x18, "type_simple"), 1)
           , new Rule(Production_19_0, new Hime.Redist.Parsers.SymbolVariable(0x19, "type_simple_integral"), 1)
           , new Rule(Production_19_1, new Hime.Redist.Parsers.SymbolVariable(0x19, "type_simple_integral"), 1)
           , new Rule(Production_19_2, new Hime.Redist.Parsers.SymbolVariable(0x19, "type_simple_integral"), 1)
           , new Rule(Production_19_3, new Hime.Redist.Parsers.SymbolVariable(0x19, "type_simple_integral"), 1)
           , new Rule(Production_19_4, new Hime.Redist.Parsers.SymbolVariable(0x19, "type_simple_integral"), 1)
           , new Rule(Production_19_5, new Hime.Redist.Parsers.SymbolVariable(0x19, "type_simple_integral"), 1)
           , new Rule(Production_19_6, new Hime.Redist.Parsers.SymbolVariable(0x19, "type_simple_integral"), 1)
           , new Rule(Production_19_7, new Hime.Redist.Parsers.SymbolVariable(0x19, "type_simple_integral"), 1)
           , new Rule(Production_19_8, new Hime.Redist.Parsers.SymbolVariable(0x19, "type_simple_integral"), 1)
           , new Rule(Production_1A_0, new Hime.Redist.Parsers.SymbolVariable(0x1A, "type_simple_float"), 1)
           , new Rule(Production_1A_1, new Hime.Redist.Parsers.SymbolVariable(0x1A, "type_simple_float"), 1)
           , new Rule(Production_1B_0, new Hime.Redist.Parsers.SymbolVariable(0x1B, "type_array"), 3)
           , new Rule(Production_1C_0, new Hime.Redist.Parsers.SymbolVariable(0x1C, "type_array_rank"), 3)
           , new Rule(Production_1D_0, new Hime.Redist.Parsers.SymbolVariable(0x1D, "type_array_rank_dim"), 1)
           , new Rule(Production_1E_0, new Hime.Redist.Parsers.SymbolVariable(0x1E, "type_predefined"), 1)
           , new Rule(Production_1E_1, new Hime.Redist.Parsers.SymbolVariable(0x1E, "type_predefined"), 1)
           , new Rule(Production_1E_2, new Hime.Redist.Parsers.SymbolVariable(0x1E, "type_predefined"), 1)
           , new Rule(Production_1E_3, new Hime.Redist.Parsers.SymbolVariable(0x1E, "type_predefined"), 1)
           , new Rule(Production_1E_4, new Hime.Redist.Parsers.SymbolVariable(0x1E, "type_predefined"), 1)
           , new Rule(Production_1E_5, new Hime.Redist.Parsers.SymbolVariable(0x1E, "type_predefined"), 1)
           , new Rule(Production_1E_6, new Hime.Redist.Parsers.SymbolVariable(0x1E, "type_predefined"), 1)
           , new Rule(Production_1E_7, new Hime.Redist.Parsers.SymbolVariable(0x1E, "type_predefined"), 1)
           , new Rule(Production_1E_8, new Hime.Redist.Parsers.SymbolVariable(0x1E, "type_predefined"), 1)
           , new Rule(Production_1E_9, new Hime.Redist.Parsers.SymbolVariable(0x1E, "type_predefined"), 1)
           , new Rule(Production_1E_A, new Hime.Redist.Parsers.SymbolVariable(0x1E, "type_predefined"), 1)
           , new Rule(Production_1E_B, new Hime.Redist.Parsers.SymbolVariable(0x1E, "type_predefined"), 1)
           , new Rule(Production_1E_C, new Hime.Redist.Parsers.SymbolVariable(0x1E, "type_predefined"), 1)
           , new Rule(Production_1E_D, new Hime.Redist.Parsers.SymbolVariable(0x1E, "type_predefined"), 1)
           , new Rule(Production_1E_E, new Hime.Redist.Parsers.SymbolVariable(0x1E, "type_predefined"), 1)
           , new Rule(Production_1F_0, new Hime.Redist.Parsers.SymbolVariable(0x1F, "type_return"), 1)
           , new Rule(Production_1F_1, new Hime.Redist.Parsers.SymbolVariable(0x1F, "type_return"), 1)
           , new Rule(Production_20_0, new Hime.Redist.Parsers.SymbolVariable(0x20, "exp_atom"), 1)
           , new Rule(Production_20_1, new Hime.Redist.Parsers.SymbolVariable(0x20, "exp_atom"), 1)
           , new Rule(Production_20_2, new Hime.Redist.Parsers.SymbolVariable(0x20, "exp_atom"), 1)
           , new Rule(Production_20_3, new Hime.Redist.Parsers.SymbolVariable(0x20, "exp_atom"), 1)
           , new Rule(Production_20_4, new Hime.Redist.Parsers.SymbolVariable(0x20, "exp_atom"), 1)
           , new Rule(Production_20_5, new Hime.Redist.Parsers.SymbolVariable(0x20, "exp_atom"), 1)
           , new Rule(Production_20_6, new Hime.Redist.Parsers.SymbolVariable(0x20, "exp_atom"), 1)
           , new Rule(Production_20_7, new Hime.Redist.Parsers.SymbolVariable(0x20, "exp_atom"), 1)
           , new Rule(Production_20_8, new Hime.Redist.Parsers.SymbolVariable(0x20, "exp_atom"), 1)
           , new Rule(Production_20_9, new Hime.Redist.Parsers.SymbolVariable(0x20, "exp_atom"), 1)
           , new Rule(Production_20_A, new Hime.Redist.Parsers.SymbolVariable(0x20, "exp_atom"), 1)
           , new Rule(Production_20_B, new Hime.Redist.Parsers.SymbolVariable(0x20, "exp_atom"), 1)
           , new Rule(Production_20_C, new Hime.Redist.Parsers.SymbolVariable(0x20, "exp_atom"), 3)
           , new Rule(Production_21_0, new Hime.Redist.Parsers.SymbolVariable(0x21, "exp_op0_invoke"), 4)
           , new Rule(Production_21_1, new Hime.Redist.Parsers.SymbolVariable(0x21, "exp_op0_invoke"), 3)
           , new Rule(Production_22_0, new Hime.Redist.Parsers.SymbolVariable(0x22, "exp_op0_obj_creation"), 5)
           , new Rule(Production_22_1, new Hime.Redist.Parsers.SymbolVariable(0x22, "exp_op0_obj_creation"), 4)
           , new Rule(Production_23_0, new Hime.Redist.Parsers.SymbolVariable(0x23, "exp_op0_post_increment"), 2)
           , new Rule(Production_24_0, new Hime.Redist.Parsers.SymbolVariable(0x24, "exp_op0_post_decrement"), 2)
           , new Rule(Production_25_0, new Hime.Redist.Parsers.SymbolVariable(0x25, "exp_op0_member_access"), 3)
           , new Rule(Production_25_1, new Hime.Redist.Parsers.SymbolVariable(0x25, "exp_op0_member_access"), 3)
           , new Rule(Production_26_0, new Hime.Redist.Parsers.SymbolVariable(0x26, "exp_op0_element_access"), 4)
           , new Rule(Production_26_1, new Hime.Redist.Parsers.SymbolVariable(0x26, "exp_op0_element_access"), 3)
           , new Rule(Production_27_0, new Hime.Redist.Parsers.SymbolVariable(0x27, "exp_op0_typeof"), 4)
           , new Rule(Production_28_0, new Hime.Redist.Parsers.SymbolVariable(0x28, "exp_op0_checked"), 4)
           , new Rule(Production_29_0, new Hime.Redist.Parsers.SymbolVariable(0x29, "exp_op0_unchecked"), 4)
           , new Rule(Production_2A_0, new Hime.Redist.Parsers.SymbolVariable(0x2A, "exp_op0_array_creation"), 7)
           , new Rule(Production_2A_1, new Hime.Redist.Parsers.SymbolVariable(0x2A, "exp_op0_array_creation"), 6)
           , new Rule(Production_2A_2, new Hime.Redist.Parsers.SymbolVariable(0x2A, "exp_op0_array_creation"), 6)
           , new Rule(Production_2A_3, new Hime.Redist.Parsers.SymbolVariable(0x2A, "exp_op0_array_creation"), 5)
           , new Rule(Production_2A_4, new Hime.Redist.Parsers.SymbolVariable(0x2A, "exp_op0_array_creation"), 3)
           , new Rule(Production_2B_0, new Hime.Redist.Parsers.SymbolVariable(0x2B, "exp_op0_no_array"), 1)
           , new Rule(Production_2B_1, new Hime.Redist.Parsers.SymbolVariable(0x2B, "exp_op0_no_array"), 1)
           , new Rule(Production_2B_2, new Hime.Redist.Parsers.SymbolVariable(0x2B, "exp_op0_no_array"), 1)
           , new Rule(Production_2B_3, new Hime.Redist.Parsers.SymbolVariable(0x2B, "exp_op0_no_array"), 1)
           , new Rule(Production_2B_4, new Hime.Redist.Parsers.SymbolVariable(0x2B, "exp_op0_no_array"), 1)
           , new Rule(Production_2B_5, new Hime.Redist.Parsers.SymbolVariable(0x2B, "exp_op0_no_array"), 1)
           , new Rule(Production_2B_6, new Hime.Redist.Parsers.SymbolVariable(0x2B, "exp_op0_no_array"), 1)
           , new Rule(Production_2B_7, new Hime.Redist.Parsers.SymbolVariable(0x2B, "exp_op0_no_array"), 1)
           , new Rule(Production_2B_8, new Hime.Redist.Parsers.SymbolVariable(0x2B, "exp_op0_no_array"), 1)
           , new Rule(Production_2C_0, new Hime.Redist.Parsers.SymbolVariable(0x2C, "exp_op0"), 1)
           , new Rule(Production_2C_1, new Hime.Redist.Parsers.SymbolVariable(0x2C, "exp_op0"), 1)
           , new Rule(Production_2D_0, new Hime.Redist.Parsers.SymbolVariable(0x2D, "exp_op1_pre_increment"), 2)
           , new Rule(Production_2E_0, new Hime.Redist.Parsers.SymbolVariable(0x2E, "exp_op1_pre_decrement"), 2)
           , new Rule(Production_2F_0, new Hime.Redist.Parsers.SymbolVariable(0x2F, "exp_op1_cast"), 4)
           , new Rule(Production_30_0, new Hime.Redist.Parsers.SymbolVariable(0x30, "exp_op1"), 1)
           , new Rule(Production_30_1, new Hime.Redist.Parsers.SymbolVariable(0x30, "exp_op1"), 2)
           , new Rule(Production_30_2, new Hime.Redist.Parsers.SymbolVariable(0x30, "exp_op1"), 2)
           , new Rule(Production_30_3, new Hime.Redist.Parsers.SymbolVariable(0x30, "exp_op1"), 2)
           , new Rule(Production_30_4, new Hime.Redist.Parsers.SymbolVariable(0x30, "exp_op1"), 2)
           , new Rule(Production_30_5, new Hime.Redist.Parsers.SymbolVariable(0x30, "exp_op1"), 1)
           , new Rule(Production_30_6, new Hime.Redist.Parsers.SymbolVariable(0x30, "exp_op1"), 1)
           , new Rule(Production_30_7, new Hime.Redist.Parsers.SymbolVariable(0x30, "exp_op1"), 1)
           , new Rule(Production_31_0, new Hime.Redist.Parsers.SymbolVariable(0x31, "exp_op2"), 1)
           , new Rule(Production_31_1, new Hime.Redist.Parsers.SymbolVariable(0x31, "exp_op2"), 3)
           , new Rule(Production_31_2, new Hime.Redist.Parsers.SymbolVariable(0x31, "exp_op2"), 3)
           , new Rule(Production_31_3, new Hime.Redist.Parsers.SymbolVariable(0x31, "exp_op2"), 3)
           , new Rule(Production_32_0, new Hime.Redist.Parsers.SymbolVariable(0x32, "exp_op3"), 1)
           , new Rule(Production_32_1, new Hime.Redist.Parsers.SymbolVariable(0x32, "exp_op3"), 3)
           , new Rule(Production_32_2, new Hime.Redist.Parsers.SymbolVariable(0x32, "exp_op3"), 3)
           , new Rule(Production_33_0, new Hime.Redist.Parsers.SymbolVariable(0x33, "exp_op4"), 1)
           , new Rule(Production_33_1, new Hime.Redist.Parsers.SymbolVariable(0x33, "exp_op4"), 3)
           , new Rule(Production_33_2, new Hime.Redist.Parsers.SymbolVariable(0x33, "exp_op4"), 3)
           , new Rule(Production_34_0, new Hime.Redist.Parsers.SymbolVariable(0x34, "exp_op5"), 1)
           , new Rule(Production_34_1, new Hime.Redist.Parsers.SymbolVariable(0x34, "exp_op5"), 3)
           , new Rule(Production_34_2, new Hime.Redist.Parsers.SymbolVariable(0x34, "exp_op5"), 3)
           , new Rule(Production_34_3, new Hime.Redist.Parsers.SymbolVariable(0x34, "exp_op5"), 3)
           , new Rule(Production_34_4, new Hime.Redist.Parsers.SymbolVariable(0x34, "exp_op5"), 3)
           , new Rule(Production_34_5, new Hime.Redist.Parsers.SymbolVariable(0x34, "exp_op5"), 3)
           , new Rule(Production_34_6, new Hime.Redist.Parsers.SymbolVariable(0x34, "exp_op5"), 3)
           , new Rule(Production_35_0, new Hime.Redist.Parsers.SymbolVariable(0x35, "exp_op6"), 1)
           , new Rule(Production_35_1, new Hime.Redist.Parsers.SymbolVariable(0x35, "exp_op6"), 3)
           , new Rule(Production_35_2, new Hime.Redist.Parsers.SymbolVariable(0x35, "exp_op6"), 3)
           , new Rule(Production_36_0, new Hime.Redist.Parsers.SymbolVariable(0x36, "exp_op7"), 1)
           , new Rule(Production_36_1, new Hime.Redist.Parsers.SymbolVariable(0x36, "exp_op7"), 3)
           , new Rule(Production_37_0, new Hime.Redist.Parsers.SymbolVariable(0x37, "exp_op8"), 1)
           , new Rule(Production_37_1, new Hime.Redist.Parsers.SymbolVariable(0x37, "exp_op8"), 3)
           , new Rule(Production_38_0, new Hime.Redist.Parsers.SymbolVariable(0x38, "exp_op9"), 1)
           , new Rule(Production_38_1, new Hime.Redist.Parsers.SymbolVariable(0x38, "exp_op9"), 3)
           , new Rule(Production_39_0, new Hime.Redist.Parsers.SymbolVariable(0x39, "exp_op10"), 1)
           , new Rule(Production_39_1, new Hime.Redist.Parsers.SymbolVariable(0x39, "exp_op10"), 3)
           , new Rule(Production_3A_0, new Hime.Redist.Parsers.SymbolVariable(0x3A, "exp_op11"), 1)
           , new Rule(Production_3A_1, new Hime.Redist.Parsers.SymbolVariable(0x3A, "exp_op11"), 3)
           , new Rule(Production_3B_0, new Hime.Redist.Parsers.SymbolVariable(0x3B, "exp_op12_conditional"), 1)
           , new Rule(Production_3B_1, new Hime.Redist.Parsers.SymbolVariable(0x3B, "exp_op12_conditional"), 5)
           , new Rule(Production_3C_0, new Hime.Redist.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"), 3)
           , new Rule(Production_3C_1, new Hime.Redist.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"), 3)
           , new Rule(Production_3C_2, new Hime.Redist.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"), 3)
           , new Rule(Production_3C_3, new Hime.Redist.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"), 3)
           , new Rule(Production_3C_4, new Hime.Redist.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"), 3)
           , new Rule(Production_3C_5, new Hime.Redist.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"), 3)
           , new Rule(Production_3C_6, new Hime.Redist.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"), 3)
           , new Rule(Production_3C_7, new Hime.Redist.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"), 3)
           , new Rule(Production_3C_8, new Hime.Redist.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"), 3)
           , new Rule(Production_3C_9, new Hime.Redist.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"), 3)
           , new Rule(Production_3C_A, new Hime.Redist.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"), 3)
           , new Rule(Production_3D_0, new Hime.Redist.Parsers.SymbolVariable(0x3D, "expression"), 1)
           , new Rule(Production_3D_1, new Hime.Redist.Parsers.SymbolVariable(0x3D, "expression"), 1)
           , new Rule(Production_3E_0, new Hime.Redist.Parsers.SymbolVariable(0x3E, "exp_expression_list"), 1)
           , new Rule(Production_3E_1, new Hime.Redist.Parsers.SymbolVariable(0x3E, "exp_expression_list"), 3)
           , new Rule(Production_3F_0, new Hime.Redist.Parsers.SymbolVariable(0x3F, "exp_argument_list"), 1)
           , new Rule(Production_3F_1, new Hime.Redist.Parsers.SymbolVariable(0x3F, "exp_argument_list"), 3)
           , new Rule(Production_40_0, new Hime.Redist.Parsers.SymbolVariable(0x40, "exp_argument"), 1)
           , new Rule(Production_40_1, new Hime.Redist.Parsers.SymbolVariable(0x40, "exp_argument"), 2)
           , new Rule(Production_40_2, new Hime.Redist.Parsers.SymbolVariable(0x40, "exp_argument"), 2)
           , new Rule(Production_41_0, new Hime.Redist.Parsers.SymbolVariable(0x41, "array_initializer"), 3)
           , new Rule(Production_42_0, new Hime.Redist.Parsers.SymbolVariable(0x42, "variable_initializer"), 1)
           , new Rule(Production_42_1, new Hime.Redist.Parsers.SymbolVariable(0x42, "variable_initializer"), 1)
           , new Rule(Production_43_0, new Hime.Redist.Parsers.SymbolVariable(0x43, "variable_initializer_list"), 2)
           , new Rule(Production_43_1, new Hime.Redist.Parsers.SymbolVariable(0x43, "variable_initializer_list"), 0)
           , new Rule(Production_45_0, new Hime.Redist.Parsers.SymbolVariable(0x45, "_m69"), 3)
           , new Rule(Production_45_1, new Hime.Redist.Parsers.SymbolVariable(0x45, "_m69"), 0)
           , new Rule(Production_55_0, new Hime.Redist.Parsers.SymbolVariable(0x55, "_m85"), 2)
           , new Rule(Production_55_1, new Hime.Redist.Parsers.SymbolVariable(0x55, "_m85"), 0)
           , new Rule(Production_59_0, new Hime.Redist.Parsers.SymbolVariable(0x59, "_m89"), 2)
           , new Rule(Production_59_1, new Hime.Redist.Parsers.SymbolVariable(0x59, "_m89"), 0)
           , new Rule(Production_B6_0, new Hime.Redist.Parsers.SymbolVariable(0xB6, "_m182"), 3)
           , new Rule(Production_B6_1, new Hime.Redist.Parsers.SymbolVariable(0xB6, "_m182"), 0)
           , new Rule(Production_B7_0, new Hime.Redist.Parsers.SymbolVariable(0xB7, "_Axiom_"), 2)
        };
        private static State[] staticStates = {
            new State(
               new string[112] {"[_Axiom_ → • expression $, ε]", "[expression → • exp_op12_conditional, $]", "[expression → • exp_op13_assigment, $]", "[exp_op12_conditional → • exp_op11, $]", "[exp_op12_conditional → • exp_op11 ? expression : expression, $]", "[exp_op13_assigment → • exp_op1 = expression, $]", "[exp_op13_assigment → • exp_op1 += expression, $]", "[exp_op13_assigment → • exp_op1 -= expression, $]", "[exp_op13_assigment → • exp_op1 *= expression, $]", "[exp_op13_assigment → • exp_op1 /= expression, $]", "[exp_op13_assigment → • exp_op1 %= expression, $]", "[exp_op13_assigment → • exp_op1 &= expression, $]", "[exp_op13_assigment → • exp_op1 |= expression, $]", "[exp_op13_assigment → • exp_op1 ^= expression, $]", "[exp_op13_assigment → • exp_op1 <<= expression, $]", "[exp_op13_assigment → • exp_op1 >>= expression, $]", "[exp_op11 → • exp_op10, $/||/?]", "[exp_op11 → • exp_op11 || exp_op10, $/||/?]", "[exp_op1 → • exp_op0, $/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • + exp_op1, $/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • - exp_op1, $/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • ! exp_op1, $/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • ~ exp_op1, $/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_pre_increment, $/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_pre_decrement, $/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_cast, $/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op10 → • exp_op9, $/&&/?]", "[exp_op10 → • exp_op10 && exp_op9, $/&&/?]", "[exp_op0 → • exp_op0_no_array, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0 → • exp_op0_array_creation, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_increment → • ++ exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_decrement → • -- exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_cast → • ( type ) exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op9 → • exp_op8, $/|/?]", "[exp_op9 → • exp_op9 | exp_op8, $/|/?]", "[exp_op0_no_array → • exp_atom, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_invoke, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_obj_creation, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_increment, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_decrement, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_member_access, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_typeof, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_checked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_unchecked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_array array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op8 → • exp_op7, $/^/?]", "[exp_op8 → • exp_op8 ^ exp_op7, $/^/?]", "[exp_atom → • NULL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_HEXA, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • REAL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • CHARACTER_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_REGULAR, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_VERBATIM, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • this, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • base, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_increment → • exp_op0 ++, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_decrement → • exp_op0 --, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_typeof → • typeof ( type_return ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_checked → • checked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_unchecked → • unchecked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op7 → • exp_op6, $/&/?]", "[exp_op7 → • exp_op7 & exp_op6, $/&/?]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]", "[exp_op6 → • exp_op5, $/==/!=/?]", "[exp_op6 → • exp_op6 == exp_op5, $/==/!=/?]", "[exp_op6 → • exp_op6 != exp_op5, $/==/!=/?]", "[exp_op5 → • exp_op4, $/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 < exp_op4, $/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 <= exp_op4, $/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 > exp_op4, $/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 >= exp_op4, $/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 is exp_op4, $/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 as exp_op4, $/</<=/>/>=/is/as/?]", "[exp_op4 → • exp_op3, $/<</>>/?]", "[exp_op4 → • exp_op4 << exp_op3, $/<</>>/?]", "[exp_op4 → • exp_op4 >> exp_op3, $/<</>>/?]", "[exp_op3 → • exp_op2, $/+/-/?]", "[exp_op3 → • exp_op3 + exp_op2, $/+/-/?]", "[exp_op3 → • exp_op3 - exp_op2, $/+/-/?]", "[exp_op2 → • exp_op1, $/*///%/?]", "[exp_op2 → • exp_op2 * exp_op1, $/*///%/?]", "[exp_op2 → • exp_op2 / exp_op1, $/*///%/?]", "[exp_op2 → • exp_op2 % exp_op1, $/*///%/?]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[30] {0x3d, 0x3b, 0x3c, 0x3a, 0x30, 0x39, 0x2c, 0x2d, 0x2e, 0x2f, 0x38, 0x2b, 0x2a, 0x37, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x36, 0x1e, 0x35, 0x34, 0x33, 0x32, 0x31},
               new ushort[30] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x20, 0x2D, 0x31, 0x41, 0x42, 0x43, 0x44})
            , new State(
               new string[1] {"[_Axiom_ → expression • $, ε]"},
               new Terminal[1] {new Terminal("$", 0x2)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x2},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x45, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[expression → exp_op12_conditional •, $/]/,/)/:/}]"},
               new Terminal[6] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[6] {0x2, 0x57, 0x58, 0x6D, 0xA3, 0xB4},
                   new ushort[6] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x8B])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[expression → exp_op13_assigment •, $/]/,/)/:/}]"},
               new Terminal[6] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[6] {0x2, 0x57, 0x58, 0x6D, 0xA3, 0xB4},
                   new ushort[6] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x8C])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[3] {"[exp_op12_conditional → exp_op11 •, $/]/,/)/:/}]", "[exp_op12_conditional → exp_op11 • ? expression : expression, $/]/,/)/:/}]", "[exp_op11 → exp_op11 • || exp_op10, $/]/,/)/||/?/:/}]"},
               new Terminal[8] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[4] {
                   new DeciderState(
                   new ushort[8] {0x2, 0x57, 0x58, 0x6D, 0xA3, 0xB4, 0xA2, 0xA1},
                   new ushort[8] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x3}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x7E])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x46, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x47, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[12] {"[exp_op13_assigment → exp_op1 • = expression, $/]/,/)/:/}]", "[exp_op13_assigment → exp_op1 • += expression, $/]/,/)/:/}]", "[exp_op13_assigment → exp_op1 • -= expression, $/]/,/)/:/}]", "[exp_op13_assigment → exp_op1 • *= expression, $/]/,/)/:/}]", "[exp_op13_assigment → exp_op1 • /= expression, $/]/,/)/:/}]", "[exp_op13_assigment → exp_op1 • %= expression, $/]/,/)/:/}]", "[exp_op13_assigment → exp_op1 • &= expression, $/]/,/)/:/}]", "[exp_op13_assigment → exp_op1 • |= expression, $/]/,/)/:/}]", "[exp_op13_assigment → exp_op1 • ^= expression, $/]/,/)/:/}]", "[exp_op13_assigment → exp_op1 • <<= expression, $/]/,/)/:/}]", "[exp_op13_assigment → exp_op1 • >>= expression, $/]/,/)/:/}]", "[exp_op2 → exp_op1 •, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]"},
               new Terminal[38] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[13] {
                   new DeciderState(
                   new ushort[38] {0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0x2, 0x57, 0x58, 0x6D, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xB4},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xC, 0xC, 0xC, 0xC, 0xC, 0xC, 0xC, 0xC, 0xC, 0xC, 0xC, 0xC, 0xC, 0xC, 0xC, 0xC, 0xC, 0xC, 0xC, 0xC, 0xC, 0xC, 0xC, 0xC, 0xC, 0xC}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x48, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x49, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x4A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x4B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x4C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x4D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x4E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x4F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x50, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x51, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x52, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x60])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[2] {"[exp_op11 → exp_op10 •, $/]/,/)/||/?/:/}]", "[exp_op10 → exp_op10 • && exp_op9, $/]/,/)/&&/||/?/:/}]"},
               new Terminal[9] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[9] {0x2, 0x57, 0x58, 0x6D, 0xA1, 0xA2, 0xA3, 0xB4, 0xA0},
                   new ushort[9] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x7C])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x53, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[6] {"[exp_op1 → exp_op0 •, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_invoke → exp_op0 • ( exp_argument_list ), $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_invoke → exp_op0 • ( ), $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_post_increment → exp_op0 • ++, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_post_decrement → exp_op0 • --, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_member_access → exp_op0 • . IDENTIFIER, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[6] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x57, 0x58, 0x6D, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4, 0x6C, 0x73, 0x74, 0x44},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x3, 0x4, 0x5}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x58])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x54, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x55, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x56, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x57, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[67] {"[exp_op1 → + • exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op0, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • + exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • - exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0 → • exp_op0_no_array, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0 → • exp_op0_array_creation, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1_pre_increment → • ++ exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1_pre_decrement → • -- exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1_cast → • ( type ) exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_atom, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_invoke, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_obj_creation, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_post_increment, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_post_decrement, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_member_access, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_typeof, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_checked, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_unchecked, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_array array_initializer, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • NULL_LITTERAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • INTEGER_LITTERAL_HEXA, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • REAL_LITTERAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • CHARACTER_LITTERAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • STRING_LITTERAL_REGULAR, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • STRING_LITTERAL_VERBATIM, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • IDENTIFIER, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • this, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • base, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • ( expression ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_invoke → • exp_op0 ( ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_obj_creation → • new type ( ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_post_increment → • exp_op0 ++, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_post_decrement → • exp_op0 --, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_typeof → • typeof ( type_return ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_checked → • checked ( expression ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_unchecked → • unchecked ( expression ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[17] {0x30, 0x2c, 0x2d, 0x2e, 0x2f, 0x2b, 0x2a, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x1e},
               new ushort[17] {0x58, 0x7, 0xC, 0xD, 0xE, 0x10, 0x11, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x2D})
            , new State(
               new string[67] {"[exp_op1 → - • exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op0, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • + exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • - exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0 → • exp_op0_no_array, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0 → • exp_op0_array_creation, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1_pre_increment → • ++ exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1_pre_decrement → • -- exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1_cast → • ( type ) exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_atom, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_invoke, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_obj_creation, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_post_increment, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_post_decrement, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_member_access, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_typeof, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_checked, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_unchecked, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_array array_initializer, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • NULL_LITTERAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • INTEGER_LITTERAL_HEXA, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • REAL_LITTERAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • CHARACTER_LITTERAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • STRING_LITTERAL_REGULAR, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • STRING_LITTERAL_VERBATIM, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • IDENTIFIER, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • this, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • base, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • ( expression ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_invoke → • exp_op0 ( ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_obj_creation → • new type ( ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_post_increment → • exp_op0 ++, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_post_decrement → • exp_op0 --, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_typeof → • typeof ( type_return ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_checked → • checked ( expression ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_unchecked → • unchecked ( expression ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[17] {0x30, 0x2c, 0x2d, 0x2e, 0x2f, 0x2b, 0x2a, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x1e},
               new ushort[17] {0x59, 0x7, 0xC, 0xD, 0xE, 0x10, 0x11, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x2D})
            , new State(
               new string[67] {"[exp_op1 → ! • exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op0, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • + exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • - exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0 → • exp_op0_no_array, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0 → • exp_op0_array_creation, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1_pre_increment → • ++ exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1_pre_decrement → • -- exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1_cast → • ( type ) exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_atom, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_invoke, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_obj_creation, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_post_increment, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_post_decrement, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_member_access, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_typeof, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_checked, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_unchecked, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_array array_initializer, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • NULL_LITTERAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • INTEGER_LITTERAL_HEXA, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • REAL_LITTERAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • CHARACTER_LITTERAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • STRING_LITTERAL_REGULAR, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • STRING_LITTERAL_VERBATIM, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • IDENTIFIER, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • this, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • base, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • ( expression ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_invoke → • exp_op0 ( ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_obj_creation → • new type ( ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_post_increment → • exp_op0 ++, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_post_decrement → • exp_op0 --, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_typeof → • typeof ( type_return ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_checked → • checked ( expression ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_unchecked → • unchecked ( expression ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[17] {0x30, 0x2c, 0x2d, 0x2e, 0x2f, 0x2b, 0x2a, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x1e},
               new ushort[17] {0x5A, 0x7, 0xC, 0xD, 0xE, 0x10, 0x11, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x2D})
            , new State(
               new string[67] {"[exp_op1 → ~ • exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op0, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • + exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • - exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0 → • exp_op0_no_array, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0 → • exp_op0_array_creation, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1_pre_increment → • ++ exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1_pre_decrement → • -- exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1_cast → • ( type ) exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_atom, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_invoke, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_obj_creation, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_post_increment, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_post_decrement, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_member_access, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_typeof, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_checked, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_unchecked, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_array array_initializer, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • NULL_LITTERAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • INTEGER_LITTERAL_HEXA, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • REAL_LITTERAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • CHARACTER_LITTERAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • STRING_LITTERAL_REGULAR, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • STRING_LITTERAL_VERBATIM, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • IDENTIFIER, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • this, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • base, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • ( expression ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_invoke → • exp_op0 ( ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_obj_creation → • new type ( ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_post_increment → • exp_op0 ++, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_post_decrement → • exp_op0 --, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_typeof → • typeof ( type_return ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_checked → • checked ( expression ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_unchecked → • unchecked ( expression ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[17] {0x30, 0x2c, 0x2d, 0x2e, 0x2f, 0x2b, 0x2a, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x1e},
               new ushort[17] {0x5B, 0x7, 0xC, 0xD, 0xE, 0x10, 0x11, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x2D})
            , new State(
               new string[1] {"[exp_op1 → exp_op1_pre_increment •, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[38] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[38] {0x2, 0x57, 0x58, 0x6D, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[38] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x5D])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op1 → exp_op1_pre_decrement •, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[38] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[38] {0x2, 0x57, 0x58, 0x6D, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[38] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x5E])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op1 → exp_op1_cast •, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[38] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[38] {0x2, 0x57, 0x58, 0x6D, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[38] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x5F])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[2] {"[exp_op10 → exp_op9 •, $/]/,/)/&&/||/?/:/}]", "[exp_op9 → exp_op9 • | exp_op8, $/]/,/)/|/&&/||/?/:/}]"},
               new Terminal[10] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[10] {0x2, 0x57, 0x58, 0x6D, 0xA0, 0xA1, 0xA2, 0xA3, 0xB4, 0x9F},
                   new ushort[10] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x7A])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x5C, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op0 → exp_op0_no_array •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x53])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op0 → exp_op0_array_creation •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x54])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[67] {"[exp_op1_pre_increment → ++ • exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op0, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • + exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • - exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0 → • exp_op0_no_array, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0 → • exp_op0_array_creation, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1_pre_increment → • ++ exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1_pre_decrement → • -- exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1_cast → • ( type ) exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_atom, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_invoke, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_obj_creation, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_post_increment, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_post_decrement, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_member_access, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_typeof, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_checked, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_unchecked, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_array array_initializer, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • NULL_LITTERAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • INTEGER_LITTERAL_HEXA, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • REAL_LITTERAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • CHARACTER_LITTERAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • STRING_LITTERAL_REGULAR, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • STRING_LITTERAL_VERBATIM, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • IDENTIFIER, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • this, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • base, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • ( expression ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_invoke → • exp_op0 ( ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_obj_creation → • new type ( ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_post_increment → • exp_op0 ++, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_post_decrement → • exp_op0 --, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_typeof → • typeof ( type_return ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_checked → • checked ( expression ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_unchecked → • unchecked ( expression ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[17] {0x30, 0x2c, 0x2d, 0x2e, 0x2f, 0x2b, 0x2a, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x1e},
               new ushort[17] {0x5D, 0x7, 0xC, 0xD, 0xE, 0x10, 0x11, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x2D})
            , new State(
               new string[67] {"[exp_op1_pre_decrement → -- • exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op0, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • + exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • - exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0 → • exp_op0_no_array, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0 → • exp_op0_array_creation, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1_pre_increment → • ++ exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1_pre_decrement → • -- exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1_cast → • ( type ) exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_atom, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_invoke, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_obj_creation, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_post_increment, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_post_decrement, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_member_access, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_typeof, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_checked, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_unchecked, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_array array_initializer, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • NULL_LITTERAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • INTEGER_LITTERAL_HEXA, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • REAL_LITTERAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • CHARACTER_LITTERAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • STRING_LITTERAL_REGULAR, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • STRING_LITTERAL_VERBATIM, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • IDENTIFIER, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • this, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • base, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • ( expression ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_invoke → • exp_op0 ( ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_obj_creation → • new type ( ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_post_increment → • exp_op0 ++, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_post_decrement → • exp_op0 --, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_typeof → • typeof ( type_return ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_checked → • checked ( expression ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_unchecked → • unchecked ( expression ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[17] {0x30, 0x2c, 0x2d, 0x2e, 0x2f, 0x2b, 0x2a, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x1e},
               new ushort[17] {0x5E, 0x7, 0xC, 0xD, 0xE, 0x10, 0x11, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x2D})
            , new State(
               new string[137] {"[exp_op1_cast → ( • type ) exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → ( • expression ), $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[type → • type_non_array, )]", "[type → • type_array, )]", "[expression → • exp_op12_conditional, )]", "[expression → • exp_op13_assigment, )]", "[type_non_array → • type_object, [/)]", "[type_non_array → • type_simple, [/)]", "[type_array → • type_non_array type_array_rank _m85, )]", "[exp_op12_conditional → • exp_op11, )]", "[exp_op12_conditional → • exp_op11 ? expression : expression, )]", "[exp_op13_assigment → • exp_op1 = expression, )]", "[exp_op13_assigment → • exp_op1 += expression, )]", "[exp_op13_assigment → • exp_op1 -= expression, )]", "[exp_op13_assigment → • exp_op1 *= expression, )]", "[exp_op13_assigment → • exp_op1 /= expression, )]", "[exp_op13_assigment → • exp_op1 %= expression, )]", "[exp_op13_assigment → • exp_op1 &= expression, )]", "[exp_op13_assigment → • exp_op1 |= expression, )]", "[exp_op13_assigment → • exp_op1 ^= expression, )]", "[exp_op13_assigment → • exp_op1 <<= expression, )]", "[exp_op13_assigment → • exp_op1 >>= expression, )]", "[type_object → • object, )]", "[type_object → • string, )]", "[type_object → • qualified_name, )]", "[type_simple → • bool, )]", "[type_simple → • decimal, )]", "[type_simple → • type_simple_integral, )]", "[type_simple → • type_simple_float, )]", "[exp_op11 → • exp_op10, )/||/?]", "[exp_op11 → • exp_op11 || exp_op10, )/||/?]", "[exp_op1 → • exp_op0, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • + exp_op1, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • - exp_op1, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • ! exp_op1, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • ~ exp_op1, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_pre_increment, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_pre_decrement, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_cast, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[qualified_name → • IDENTIFIER _m69, )]", "[type_simple_integral → • sbyte, )]", "[type_simple_integral → • byte, )]", "[type_simple_integral → • short, )]", "[type_simple_integral → • ushort, )]", "[type_simple_integral → • int, )]", "[type_simple_integral → • uint, )]", "[type_simple_integral → • long, )]", "[type_simple_integral → • ulong, )]", "[type_simple_integral → • char, )]", "[type_simple_float → • float, )]", "[type_simple_float → • double, )]", "[exp_op10 → • exp_op9, )/&&/?]", "[exp_op10 → • exp_op10 && exp_op9, )/&&/?]", "[exp_op0 → • exp_op0_no_array, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0 → • exp_op0_array_creation, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_increment → • ++ exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_decrement → • -- exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_cast → • ( type ) exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op9 → • exp_op8, )/|/?]", "[exp_op9 → • exp_op9 | exp_op8, )/|/?]", "[exp_op0_no_array → • exp_atom, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_invoke, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_obj_creation, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_increment, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_decrement, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_member_access, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_typeof, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_checked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_unchecked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_array array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op8 → • exp_op7, )/^/?]", "[exp_op8 → • exp_op8 ^ exp_op7, )/^/?]", "[exp_atom → • NULL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_HEXA, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • REAL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • CHARACTER_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_REGULAR, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_VERBATIM, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • this, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • base, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_increment → • exp_op0 ++, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_decrement → • exp_op0 --, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_typeof → • typeof ( type_return ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_checked → • checked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_unchecked → • unchecked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op7 → • exp_op6, )/&/?]", "[exp_op7 → • exp_op7 & exp_op6, )/&/?]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]", "[exp_op6 → • exp_op5, )/==/!=/?]", "[exp_op6 → • exp_op6 == exp_op5, )/==/!=/?]", "[exp_op6 → • exp_op6 != exp_op5, )/==/!=/?]", "[exp_op5 → • exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 < exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 <= exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 > exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 >= exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 is exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 as exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op4 → • exp_op3, )/<</>>/?]", "[exp_op4 → • exp_op4 << exp_op3, )/<</>>/?]", "[exp_op4 → • exp_op4 >> exp_op3, )/<</>>/?]", "[exp_op3 → • exp_op2, )/+/-/?]", "[exp_op3 → • exp_op3 + exp_op2, )/+/-/?]", "[exp_op3 → • exp_op3 - exp_op2, )/+/-/?]", "[exp_op2 → • exp_op1, )/*///%/?]", "[exp_op2 → • exp_op2 * exp_op1, )/*///%/?]", "[exp_op2 → • exp_op2 / exp_op1, )/*///%/?]", "[exp_op2 → • exp_op2 % exp_op1, )/*///%/?]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x46, 0x47, 0x48, 0x49, 0x8A, 0x8B, 0x8C, 0x8D, 0x13, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x6A, 0x6B, 0x79, 0x7C, 0x7F},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x65, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x66, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x68, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x69, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x6C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x6D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x6E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x6F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x70, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x71, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x72, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x73, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x74, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x75, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x76, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x77, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
               },
               new ushort[38] {0x15, 0x3d, 0x16, 0x1b, 0x3b, 0x3c, 0x17, 0x18, 0x3a, 0x30, 0x14, 0x19, 0x1a, 0x39, 0x2c, 0x2d, 0x2e, 0x2f, 0x38, 0x2b, 0x2a, 0x37, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x36, 0x1e, 0x35, 0x34, 0x33, 0x32, 0x31},
               new ushort[38] {0x5F, 0x60, 0x61, 0x62, 0x2, 0x3, 0x63, 0x64, 0x4, 0x5, 0x67, 0x6A, 0x6B, 0x6, 0x7, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x20, 0x2D, 0x31, 0x41, 0x42, 0x43, 0x44})
            , new State(
               new string[2] {"[exp_op9 → exp_op8 •, $/]/,/)/|/&&/||/?/:/}]", "[exp_op8 → exp_op8 • ^ exp_op7, $/]/,/)/^/|/&&/||/?/:/}]"},
               new Terminal[11] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[11] {0x2, 0x57, 0x58, 0x6D, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xB4, 0x9E},
                   new ushort[11] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x78])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x78, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op0_no_array → exp_atom •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x4A])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op0_no_array → exp_op0_invoke •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x4B])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op0_no_array → exp_op0_obj_creation •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x4C])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op0_no_array → exp_op0_post_increment •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x4D])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op0_no_array → exp_op0_post_decrement •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x4E])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op0_no_array → exp_op0_member_access •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x4F])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op0_no_array → exp_op0_typeof •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x50])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op0_no_array → exp_op0_checked •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x51])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op0_no_array → exp_op0_unchecked •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x52])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[31] {"[exp_op0_array_creation → new • type_non_array [ exp_expression_list ] type_array_rank array_initializer, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → new • type_non_array [ exp_expression_list ] type_array_rank, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → new • type_non_array [ exp_expression_list ] array_initializer, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → new • type_non_array [ exp_expression_list ], $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → new • type_array array_initializer, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_obj_creation → new • type ( exp_argument_list ), $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_obj_creation → new • type ( ), $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[type_non_array → • type_object, [/(]", "[type_non_array → • type_simple, [/(]", "[type_array → • type_non_array type_array_rank _m85, (/{]", "[type → • type_non_array, (]", "[type → • type_array, (]", "[type_object → • object, []", "[type_object → • string, []", "[type_object → • qualified_name, []", "[type_simple → • bool, []", "[type_simple → • decimal, []", "[type_simple → • type_simple_integral, []", "[type_simple → • type_simple_float, []", "[qualified_name → • IDENTIFIER _m69, []", "[type_simple_integral → • sbyte, []", "[type_simple_integral → • byte, []", "[type_simple_integral → • short, []", "[type_simple_integral → • ushort, []", "[type_simple_integral → • int, []", "[type_simple_integral → • uint, []", "[type_simple_integral → • long, []", "[type_simple_integral → • ulong, []", "[type_simple_integral → • char, []", "[type_simple_float → • float, []", "[type_simple_float → • double, []"},
               new Terminal[16] {new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54)},
               new DeciderState[17] {
                   new DeciderState(
                   new ushort[16] {0x46, 0x47, 0x48, 0x49, 0x13, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54},
                   new ushort[16] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x7C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x7D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x7E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x7F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x80, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x81, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x82, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x83, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x84, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x85, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x86, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x87, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x88, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x89, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8B, new Rule())
               },
               new ushort[8] {0x16, 0x1b, 0x15, 0x17, 0x18, 0x14, 0x19, 0x1a},
               new ushort[8] {0x79, 0x7A, 0x7B, 0x63, 0x64, 0x67, 0x6A, 0x6B})
            , new State(
               new string[2] {"[exp_op8 → exp_op7 •, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op7 → exp_op7 • & exp_op6, $/]/,/)/&/^/|/&&/||/?/:/}]"},
               new Terminal[12] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[12] {0x2, 0x57, 0x58, 0x6D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xB4, 0x9D},
                   new ushort[12] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x76])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8C, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_atom → NULL_LITTERAL •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x2B])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_atom → BOOLEAN_LITTERAL_TRUE •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x2C])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_atom → BOOLEAN_LITTERAL_FALSE •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x2D])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_atom → INTEGER_LITTERAL_DECIMAL •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x2E])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_atom → INTEGER_LITTERAL_HEXA •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x2F])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_atom → REAL_LITTERAL •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x30])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_atom → CHARACTER_LITTERAL •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x31])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_atom → STRING_LITTERAL_REGULAR •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x32])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_atom → STRING_LITTERAL_VERBATIM •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x33])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_atom → IDENTIFIER •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x34])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_atom → this •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x35])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_atom → base •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x36])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op0_member_access → type_predefined • . IDENTIFIER, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[1] {new Terminal("_T[.]", 0x44)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8D, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op0_typeof → typeof • ( type_return ), $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[1] {new Terminal("_T[(]", 0x6C)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x6C},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8E, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op0_checked → checked • ( expression ), $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[1] {new Terminal("_T[(]", 0x6C)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x6C},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8F, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op0_unchecked → unchecked • ( expression ), $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[1] {new Terminal("_T[(]", 0x6C)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x6C},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x90, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[3] {"[exp_op7 → exp_op6 •, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op6 → exp_op6 • == exp_op5, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op6 → exp_op6 • != exp_op5, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]"},
               new Terminal[14] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[4] {
                   new DeciderState(
                   new ushort[14] {0x2, 0x57, 0x58, 0x6D, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xB4, 0x9B, 0x9C},
                   new ushort[14] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x3}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x74])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x91, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x92, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_predefined → bool •, .]"},
               new Terminal[1] {new Terminal("_T[.]", 0x44)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x1A])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_predefined → byte •, .]"},
               new Terminal[1] {new Terminal("_T[.]", 0x44)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x1B])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_predefined → char •, .]"},
               new Terminal[1] {new Terminal("_T[.]", 0x44)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x1C])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_predefined → decimal •, .]"},
               new Terminal[1] {new Terminal("_T[.]", 0x44)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x1D])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_predefined → double •, .]"},
               new Terminal[1] {new Terminal("_T[.]", 0x44)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x1E])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_predefined → float •, .]"},
               new Terminal[1] {new Terminal("_T[.]", 0x44)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x1F])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_predefined → int •, .]"},
               new Terminal[1] {new Terminal("_T[.]", 0x44)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x20])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_predefined → long •, .]"},
               new Terminal[1] {new Terminal("_T[.]", 0x44)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x21])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_predefined → object •, .]"},
               new Terminal[1] {new Terminal("_T[.]", 0x44)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x22])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_predefined → sbyte •, .]"},
               new Terminal[1] {new Terminal("_T[.]", 0x44)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x23])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_predefined → short •, .]"},
               new Terminal[1] {new Terminal("_T[.]", 0x44)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x24])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_predefined → string •, .]"},
               new Terminal[1] {new Terminal("_T[.]", 0x44)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x25])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_predefined → uint •, .]"},
               new Terminal[1] {new Terminal("_T[.]", 0x44)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x26])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_predefined → ulong •, .]"},
               new Terminal[1] {new Terminal("_T[.]", 0x44)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x27])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_predefined → ushort •, .]"},
               new Terminal[1] {new Terminal("_T[.]", 0x44)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x28])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[7] {"[exp_op6 → exp_op5 •, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → exp_op5 • < exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → exp_op5 • <= exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → exp_op5 • > exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → exp_op5 • >= exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → exp_op5 • is exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → exp_op5 • as exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]"},
               new Terminal[20] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[8] {
                   new DeciderState(
                   new ushort[20] {0x2, 0x57, 0x58, 0x6D, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xB4, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A},
                   new ushort[20] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x71])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x93, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x94, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x95, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x96, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x97, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x98, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[3] {"[exp_op5 → exp_op4 •, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → exp_op4 • << exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → exp_op4 • >> exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]"},
               new Terminal[22] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[4] {
                   new DeciderState(
                   new ushort[22] {0x2, 0x57, 0x58, 0x6D, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xB4, 0x93, 0x94},
                   new ushort[22] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x3}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x6A])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x99, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9A, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[3] {"[exp_op4 → exp_op3 •, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → exp_op3 • + exp_op2, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → exp_op3 • - exp_op2, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]"},
               new Terminal[24] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[4] {
                   new DeciderState(
                   new ushort[24] {0x2, 0x57, 0x58, 0x6D, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xB4, 0x8A, 0x8B},
                   new ushort[24] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x3}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x67])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9C, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[4] {"[exp_op3 → exp_op2 •, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → exp_op2 • * exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → exp_op2 • / exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → exp_op2 • % exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]"},
               new Terminal[27] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[5] {
                   new DeciderState(
                   new ushort[27] {0x2, 0x57, 0x58, 0x6D, 0x8A, 0x8B, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xB4, 0x8E, 0x8F, 0x90},
                   new ushort[27] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x3, 0x4}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x64])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9F, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[_Axiom_ → expression $ •, ε]"},
               new Terminal[1] {new Terminal("ε", 0x1)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x1},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0xA1])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[112] {"[exp_op12_conditional → exp_op11 ? • expression : expression, $/]/,/)/:/}]", "[expression → • exp_op12_conditional, :]", "[expression → • exp_op13_assigment, :]", "[exp_op12_conditional → • exp_op11, :]", "[exp_op12_conditional → • exp_op11 ? expression : expression, :]", "[exp_op13_assigment → • exp_op1 = expression, :]", "[exp_op13_assigment → • exp_op1 += expression, :]", "[exp_op13_assigment → • exp_op1 -= expression, :]", "[exp_op13_assigment → • exp_op1 *= expression, :]", "[exp_op13_assigment → • exp_op1 /= expression, :]", "[exp_op13_assigment → • exp_op1 %= expression, :]", "[exp_op13_assigment → • exp_op1 &= expression, :]", "[exp_op13_assigment → • exp_op1 |= expression, :]", "[exp_op13_assigment → • exp_op1 ^= expression, :]", "[exp_op13_assigment → • exp_op1 <<= expression, :]", "[exp_op13_assigment → • exp_op1 >>= expression, :]", "[exp_op11 → • exp_op10, ||/?/:]", "[exp_op11 → • exp_op11 || exp_op10, ||/?/:]", "[exp_op1 → • exp_op0, ?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • + exp_op1, ?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • - exp_op1, ?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • ! exp_op1, ?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • ~ exp_op1, ?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_pre_increment, ?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_pre_decrement, ?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_cast, ?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op10 → • exp_op9, &&/?/:]", "[exp_op10 → • exp_op10 && exp_op9, &&/?/:]", "[exp_op0 → • exp_op0_no_array, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0 → • exp_op0_array_creation, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_increment → • ++ exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_decrement → • -- exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_cast → • ( type ) exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op9 → • exp_op8, |/?/:]", "[exp_op9 → • exp_op9 | exp_op8, |/?/:]", "[exp_op0_no_array → • exp_atom, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_invoke, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_obj_creation, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_increment, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_decrement, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_member_access, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_typeof, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_checked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_unchecked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_array array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op8 → • exp_op7, ^/?/:]", "[exp_op8 → • exp_op8 ^ exp_op7, ^/?/:]", "[exp_atom → • NULL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_HEXA, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • REAL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • CHARACTER_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_REGULAR, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_VERBATIM, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • this, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • base, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_increment → • exp_op0 ++, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_decrement → • exp_op0 --, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_typeof → • typeof ( type_return ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_checked → • checked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_unchecked → • unchecked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op7 → • exp_op6, &/?/:]", "[exp_op7 → • exp_op7 & exp_op6, &/?/:]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]", "[exp_op6 → • exp_op5, ==/!=/?/:]", "[exp_op6 → • exp_op6 == exp_op5, ==/!=/?/:]", "[exp_op6 → • exp_op6 != exp_op5, ==/!=/?/:]", "[exp_op5 → • exp_op4, </<=/>/>=/is/as/?/:]", "[exp_op5 → • exp_op5 < exp_op4, </<=/>/>=/is/as/?/:]", "[exp_op5 → • exp_op5 <= exp_op4, </<=/>/>=/is/as/?/:]", "[exp_op5 → • exp_op5 > exp_op4, </<=/>/>=/is/as/?/:]", "[exp_op5 → • exp_op5 >= exp_op4, </<=/>/>=/is/as/?/:]", "[exp_op5 → • exp_op5 is exp_op4, </<=/>/>=/is/as/?/:]", "[exp_op5 → • exp_op5 as exp_op4, </<=/>/>=/is/as/?/:]", "[exp_op4 → • exp_op3, <</>>/?/:]", "[exp_op4 → • exp_op4 << exp_op3, <</>>/?/:]", "[exp_op4 → • exp_op4 >> exp_op3, <</>>/?/:]", "[exp_op3 → • exp_op2, +/-/?/:]", "[exp_op3 → • exp_op3 + exp_op2, +/-/?/:]", "[exp_op3 → • exp_op3 - exp_op2, +/-/?/:]", "[exp_op2 → • exp_op1, *///%/?/:]", "[exp_op2 → • exp_op2 * exp_op1, *///%/?/:]", "[exp_op2 → • exp_op2 / exp_op1, *///%/?/:]", "[exp_op2 → • exp_op2 % exp_op1, *///%/?/:]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[30] {0x3d, 0x3b, 0x3c, 0x3a, 0x30, 0x39, 0x2c, 0x2d, 0x2e, 0x2f, 0x38, 0x2b, 0x2a, 0x37, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x36, 0x1e, 0x35, 0x34, 0x33, 0x32, 0x31},
               new ushort[30] {0xA0, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x20, 0x2D, 0x31, 0x41, 0x42, 0x43, 0x44})
            , new State(
               new string[95] {"[exp_op11 → exp_op11 || • exp_op10, $/]/,/)/||/?/:/}]", "[exp_op10 → • exp_op9, $/]/,/)/&&/||/?/:/}]", "[exp_op10 → • exp_op10 && exp_op9, $/]/,/)/&&/||/?/:/}]", "[exp_op9 → • exp_op8, $/]/,/)/|/||/?/:/}]", "[exp_op9 → • exp_op9 | exp_op8, $/]/,/)/|/||/?/:/}]", "[exp_op8 → • exp_op7, $/]/,/)/^/||/?/:/}]", "[exp_op8 → • exp_op8 ^ exp_op7, $/]/,/)/^/||/?/:/}]", "[exp_op7 → • exp_op6, $/]/,/)/&/||/?/:/}]", "[exp_op7 → • exp_op7 & exp_op6, $/]/,/)/&/||/?/:/}]", "[exp_op6 → • exp_op5, $/]/,/)/==/!=/||/?/:/}]", "[exp_op6 → • exp_op6 == exp_op5, $/]/,/)/==/!=/||/?/:/}]", "[exp_op6 → • exp_op6 != exp_op5, $/]/,/)/==/!=/||/?/:/}]", "[exp_op5 → • exp_op4, $/]/,/)/</<=/>/>=/is/as/||/?/:/}]", "[exp_op5 → • exp_op5 < exp_op4, $/]/,/)/</<=/>/>=/is/as/||/?/:/}]", "[exp_op5 → • exp_op5 <= exp_op4, $/]/,/)/</<=/>/>=/is/as/||/?/:/}]", "[exp_op5 → • exp_op5 > exp_op4, $/]/,/)/</<=/>/>=/is/as/||/?/:/}]", "[exp_op5 → • exp_op5 >= exp_op4, $/]/,/)/</<=/>/>=/is/as/||/?/:/}]", "[exp_op5 → • exp_op5 is exp_op4, $/]/,/)/</<=/>/>=/is/as/||/?/:/}]", "[exp_op5 → • exp_op5 as exp_op4, $/]/,/)/</<=/>/>=/is/as/||/?/:/}]", "[exp_op4 → • exp_op3, $/]/,/)/<</>>/||/?/:/}]", "[exp_op4 → • exp_op4 << exp_op3, $/]/,/)/<</>>/||/?/:/}]", "[exp_op4 → • exp_op4 >> exp_op3, $/]/,/)/<</>>/||/?/:/}]", "[exp_op3 → • exp_op2, $/]/,/)/+/-/||/?/:/}]", "[exp_op3 → • exp_op3 + exp_op2, $/]/,/)/+/-/||/?/:/}]", "[exp_op3 → • exp_op3 - exp_op2, $/]/,/)/+/-/||/?/:/}]", "[exp_op2 → • exp_op1, $/]/,/)/*///%/||/?/:/}]", "[exp_op2 → • exp_op2 * exp_op1, $/]/,/)/*///%/||/?/:/}]", "[exp_op2 → • exp_op2 / exp_op1, $/]/,/)/*///%/||/?/:/}]", "[exp_op2 → • exp_op2 % exp_op1, $/]/,/)/*///%/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/||/?/:/}]", "[exp_op1 → • + exp_op1, $/]/,/)/||/?/:/}]", "[exp_op1 → • - exp_op1, $/]/,/)/||/?/:/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/||/?/:/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/||/?/:/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/||/?/:/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/||/?/:/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/||/?/:/}]", "[exp_op0 → • exp_op0_no_array, $/./]/,/(/)/++/--/||/?/:/}]", "[exp_op0 → • exp_op0_array_creation, $/./]/,/(/)/++/--/||/?/:/}]", "[exp_op1_pre_increment → • ++ exp_op1, $/]/,/)/||/?/:/}]", "[exp_op1_pre_decrement → • -- exp_op1, $/]/,/)/||/?/:/}]", "[exp_op1_cast → • ( type ) exp_op1, $/]/,/)/||/?/:/}]", "[exp_op0_no_array → • exp_atom, $/]/,/)/||/?/:/}]", "[exp_op0_no_array → • exp_op0_invoke, $/]/,/)/||/?/:/}]", "[exp_op0_no_array → • exp_op0_obj_creation, $/]/,/)/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_increment, $/]/,/)/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_decrement, $/]/,/)/||/?/:/}]", "[exp_op0_no_array → • exp_op0_member_access, $/]/,/)/||/?/:/}]", "[exp_op0_no_array → • exp_op0_typeof, $/]/,/)/||/?/:/}]", "[exp_op0_no_array → • exp_op0_checked, $/]/,/)/||/?/:/}]", "[exp_op0_no_array → • exp_op0_unchecked, $/]/,/)/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, $/]/,/)/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, $/]/,/)/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, $/]/,/)/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], $/]/,/)/||/?/:/}]", "[exp_op0_array_creation → • new type_array array_initializer, $/]/,/)/||/?/:/}]", "[exp_atom → • NULL_LITTERAL, $/]/,/)/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, $/]/,/)/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, $/]/,/)/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, $/]/,/)/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_HEXA, $/]/,/)/||/?/:/}]", "[exp_atom → • REAL_LITTERAL, $/]/,/)/||/?/:/}]", "[exp_atom → • CHARACTER_LITTERAL, $/]/,/)/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_REGULAR, $/]/,/)/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_VERBATIM, $/]/,/)/||/?/:/}]", "[exp_atom → • IDENTIFIER, $/]/,/)/||/?/:/}]", "[exp_atom → • this, $/]/,/)/||/?/:/}]", "[exp_atom → • base, $/]/,/)/||/?/:/}]", "[exp_atom → • ( expression ), $/]/,/)/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), $/]/,/)/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( ), $/]/,/)/||/?/:/}]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), $/]/,/)/||/?/:/}]", "[exp_op0_obj_creation → • new type ( ), $/]/,/)/||/?/:/}]", "[exp_op0_post_increment → • exp_op0 ++, $/]/,/)/||/?/:/}]", "[exp_op0_post_decrement → • exp_op0 --, $/]/,/)/||/?/:/}]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, $/]/,/)/||/?/:/}]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, $/]/,/)/||/?/:/}]", "[exp_op0_typeof → • typeof ( type_return ), $/]/,/)/||/?/:/}]", "[exp_op0_checked → • checked ( expression ), $/]/,/)/||/?/:/}]", "[exp_op0_unchecked → • unchecked ( expression ), $/]/,/)/||/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[26] {0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2c, 0x2d, 0x2e, 0x2f, 0x2b, 0x2a, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x1e},
               new ushort[26] {0xA1, 0xF, 0x15, 0x20, 0x31, 0x41, 0x42, 0x43, 0x44, 0xA2, 0x7, 0xC, 0xD, 0xE, 0x10, 0x11, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x2D})
            , new State(
               new string[112] {"[exp_op13_assigment → exp_op1 = • expression, $/]/,/)/:/}]", "[expression → • exp_op12_conditional, $/]/,/)/:/}]", "[expression → • exp_op13_assigment, $/]/,/)/:/}]", "[exp_op12_conditional → • exp_op11, $/]/,/)/:/}]", "[exp_op12_conditional → • exp_op11 ? expression : expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 = expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 += expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 -= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 *= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 /= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 %= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 &= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 |= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 ^= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 <<= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 >>= expression, $/]/,/)/:/}]", "[exp_op11 → • exp_op10, $/]/,/)/||/?/:/}]", "[exp_op11 → • exp_op11 || exp_op10, $/]/,/)/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • + exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • - exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op10 → • exp_op9, $/]/,/)/&&/?/:/}]", "[exp_op10 → • exp_op10 && exp_op9, $/]/,/)/&&/?/:/}]", "[exp_op0 → • exp_op0_no_array, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0 → • exp_op0_array_creation, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_increment → • ++ exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_decrement → • -- exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_cast → • ( type ) exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op9 → • exp_op8, $/]/,/)/|/?/:/}]", "[exp_op9 → • exp_op9 | exp_op8, $/]/,/)/|/?/:/}]", "[exp_op0_no_array → • exp_atom, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_invoke, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_obj_creation, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_increment, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_decrement, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_member_access, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_typeof, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_checked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_unchecked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_array array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op8 → • exp_op7, $/]/,/)/^/?/:/}]", "[exp_op8 → • exp_op8 ^ exp_op7, $/]/,/)/^/?/:/}]", "[exp_atom → • NULL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_HEXA, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • REAL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • CHARACTER_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_REGULAR, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_VERBATIM, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • this, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • base, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_increment → • exp_op0 ++, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_decrement → • exp_op0 --, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_typeof → • typeof ( type_return ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_checked → • checked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_unchecked → • unchecked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op7 → • exp_op6, $/]/,/)/&/?/:/}]", "[exp_op7 → • exp_op7 & exp_op6, $/]/,/)/&/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]", "[exp_op6 → • exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op6 → • exp_op6 == exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op6 → • exp_op6 != exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op5 → • exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 < exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 <= exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 > exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 >= exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 is exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 as exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op4 → • exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op4 → • exp_op4 << exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op4 → • exp_op4 >> exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op3 → • exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op3 → • exp_op3 + exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op3 → • exp_op3 - exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op2 → • exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 * exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 / exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 % exp_op1, $/]/,/)/*///%/?/:/}]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[30] {0x3d, 0x3b, 0x3c, 0x3a, 0x30, 0x39, 0x2c, 0x2d, 0x2e, 0x2f, 0x38, 0x2b, 0x2a, 0x37, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x36, 0x1e, 0x35, 0x34, 0x33, 0x32, 0x31},
               new ushort[30] {0xA3, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x20, 0x2D, 0x31, 0x41, 0x42, 0x43, 0x44})
            , new State(
               new string[112] {"[exp_op13_assigment → exp_op1 += • expression, $/]/,/)/:/}]", "[expression → • exp_op12_conditional, $/]/,/)/:/}]", "[expression → • exp_op13_assigment, $/]/,/)/:/}]", "[exp_op12_conditional → • exp_op11, $/]/,/)/:/}]", "[exp_op12_conditional → • exp_op11 ? expression : expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 = expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 += expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 -= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 *= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 /= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 %= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 &= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 |= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 ^= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 <<= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 >>= expression, $/]/,/)/:/}]", "[exp_op11 → • exp_op10, $/]/,/)/||/?/:/}]", "[exp_op11 → • exp_op11 || exp_op10, $/]/,/)/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • + exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • - exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op10 → • exp_op9, $/]/,/)/&&/?/:/}]", "[exp_op10 → • exp_op10 && exp_op9, $/]/,/)/&&/?/:/}]", "[exp_op0 → • exp_op0_no_array, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0 → • exp_op0_array_creation, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_increment → • ++ exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_decrement → • -- exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_cast → • ( type ) exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op9 → • exp_op8, $/]/,/)/|/?/:/}]", "[exp_op9 → • exp_op9 | exp_op8, $/]/,/)/|/?/:/}]", "[exp_op0_no_array → • exp_atom, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_invoke, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_obj_creation, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_increment, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_decrement, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_member_access, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_typeof, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_checked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_unchecked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_array array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op8 → • exp_op7, $/]/,/)/^/?/:/}]", "[exp_op8 → • exp_op8 ^ exp_op7, $/]/,/)/^/?/:/}]", "[exp_atom → • NULL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_HEXA, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • REAL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • CHARACTER_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_REGULAR, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_VERBATIM, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • this, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • base, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_increment → • exp_op0 ++, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_decrement → • exp_op0 --, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_typeof → • typeof ( type_return ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_checked → • checked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_unchecked → • unchecked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op7 → • exp_op6, $/]/,/)/&/?/:/}]", "[exp_op7 → • exp_op7 & exp_op6, $/]/,/)/&/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]", "[exp_op6 → • exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op6 → • exp_op6 == exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op6 → • exp_op6 != exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op5 → • exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 < exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 <= exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 > exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 >= exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 is exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 as exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op4 → • exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op4 → • exp_op4 << exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op4 → • exp_op4 >> exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op3 → • exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op3 → • exp_op3 + exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op3 → • exp_op3 - exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op2 → • exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 * exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 / exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 % exp_op1, $/]/,/)/*///%/?/:/}]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[30] {0x3d, 0x3b, 0x3c, 0x3a, 0x30, 0x39, 0x2c, 0x2d, 0x2e, 0x2f, 0x38, 0x2b, 0x2a, 0x37, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x36, 0x1e, 0x35, 0x34, 0x33, 0x32, 0x31},
               new ushort[30] {0xA4, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x20, 0x2D, 0x31, 0x41, 0x42, 0x43, 0x44})
            , new State(
               new string[112] {"[exp_op13_assigment → exp_op1 -= • expression, $/]/,/)/:/}]", "[expression → • exp_op12_conditional, $/]/,/)/:/}]", "[expression → • exp_op13_assigment, $/]/,/)/:/}]", "[exp_op12_conditional → • exp_op11, $/]/,/)/:/}]", "[exp_op12_conditional → • exp_op11 ? expression : expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 = expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 += expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 -= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 *= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 /= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 %= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 &= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 |= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 ^= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 <<= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 >>= expression, $/]/,/)/:/}]", "[exp_op11 → • exp_op10, $/]/,/)/||/?/:/}]", "[exp_op11 → • exp_op11 || exp_op10, $/]/,/)/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • + exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • - exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op10 → • exp_op9, $/]/,/)/&&/?/:/}]", "[exp_op10 → • exp_op10 && exp_op9, $/]/,/)/&&/?/:/}]", "[exp_op0 → • exp_op0_no_array, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0 → • exp_op0_array_creation, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_increment → • ++ exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_decrement → • -- exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_cast → • ( type ) exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op9 → • exp_op8, $/]/,/)/|/?/:/}]", "[exp_op9 → • exp_op9 | exp_op8, $/]/,/)/|/?/:/}]", "[exp_op0_no_array → • exp_atom, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_invoke, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_obj_creation, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_increment, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_decrement, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_member_access, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_typeof, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_checked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_unchecked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_array array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op8 → • exp_op7, $/]/,/)/^/?/:/}]", "[exp_op8 → • exp_op8 ^ exp_op7, $/]/,/)/^/?/:/}]", "[exp_atom → • NULL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_HEXA, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • REAL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • CHARACTER_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_REGULAR, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_VERBATIM, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • this, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • base, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_increment → • exp_op0 ++, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_decrement → • exp_op0 --, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_typeof → • typeof ( type_return ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_checked → • checked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_unchecked → • unchecked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op7 → • exp_op6, $/]/,/)/&/?/:/}]", "[exp_op7 → • exp_op7 & exp_op6, $/]/,/)/&/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]", "[exp_op6 → • exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op6 → • exp_op6 == exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op6 → • exp_op6 != exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op5 → • exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 < exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 <= exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 > exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 >= exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 is exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 as exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op4 → • exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op4 → • exp_op4 << exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op4 → • exp_op4 >> exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op3 → • exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op3 → • exp_op3 + exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op3 → • exp_op3 - exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op2 → • exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 * exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 / exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 % exp_op1, $/]/,/)/*///%/?/:/}]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[30] {0x3d, 0x3b, 0x3c, 0x3a, 0x30, 0x39, 0x2c, 0x2d, 0x2e, 0x2f, 0x38, 0x2b, 0x2a, 0x37, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x36, 0x1e, 0x35, 0x34, 0x33, 0x32, 0x31},
               new ushort[30] {0xA5, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x20, 0x2D, 0x31, 0x41, 0x42, 0x43, 0x44})
            , new State(
               new string[112] {"[exp_op13_assigment → exp_op1 *= • expression, $/]/,/)/:/}]", "[expression → • exp_op12_conditional, $/]/,/)/:/}]", "[expression → • exp_op13_assigment, $/]/,/)/:/}]", "[exp_op12_conditional → • exp_op11, $/]/,/)/:/}]", "[exp_op12_conditional → • exp_op11 ? expression : expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 = expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 += expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 -= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 *= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 /= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 %= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 &= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 |= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 ^= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 <<= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 >>= expression, $/]/,/)/:/}]", "[exp_op11 → • exp_op10, $/]/,/)/||/?/:/}]", "[exp_op11 → • exp_op11 || exp_op10, $/]/,/)/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • + exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • - exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op10 → • exp_op9, $/]/,/)/&&/?/:/}]", "[exp_op10 → • exp_op10 && exp_op9, $/]/,/)/&&/?/:/}]", "[exp_op0 → • exp_op0_no_array, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0 → • exp_op0_array_creation, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_increment → • ++ exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_decrement → • -- exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_cast → • ( type ) exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op9 → • exp_op8, $/]/,/)/|/?/:/}]", "[exp_op9 → • exp_op9 | exp_op8, $/]/,/)/|/?/:/}]", "[exp_op0_no_array → • exp_atom, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_invoke, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_obj_creation, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_increment, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_decrement, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_member_access, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_typeof, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_checked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_unchecked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_array array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op8 → • exp_op7, $/]/,/)/^/?/:/}]", "[exp_op8 → • exp_op8 ^ exp_op7, $/]/,/)/^/?/:/}]", "[exp_atom → • NULL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_HEXA, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • REAL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • CHARACTER_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_REGULAR, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_VERBATIM, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • this, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • base, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_increment → • exp_op0 ++, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_decrement → • exp_op0 --, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_typeof → • typeof ( type_return ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_checked → • checked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_unchecked → • unchecked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op7 → • exp_op6, $/]/,/)/&/?/:/}]", "[exp_op7 → • exp_op7 & exp_op6, $/]/,/)/&/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]", "[exp_op6 → • exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op6 → • exp_op6 == exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op6 → • exp_op6 != exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op5 → • exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 < exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 <= exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 > exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 >= exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 is exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 as exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op4 → • exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op4 → • exp_op4 << exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op4 → • exp_op4 >> exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op3 → • exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op3 → • exp_op3 + exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op3 → • exp_op3 - exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op2 → • exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 * exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 / exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 % exp_op1, $/]/,/)/*///%/?/:/}]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[30] {0x3d, 0x3b, 0x3c, 0x3a, 0x30, 0x39, 0x2c, 0x2d, 0x2e, 0x2f, 0x38, 0x2b, 0x2a, 0x37, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x36, 0x1e, 0x35, 0x34, 0x33, 0x32, 0x31},
               new ushort[30] {0xA6, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x20, 0x2D, 0x31, 0x41, 0x42, 0x43, 0x44})
            , new State(
               new string[112] {"[exp_op13_assigment → exp_op1 /= • expression, $/]/,/)/:/}]", "[expression → • exp_op12_conditional, $/]/,/)/:/}]", "[expression → • exp_op13_assigment, $/]/,/)/:/}]", "[exp_op12_conditional → • exp_op11, $/]/,/)/:/}]", "[exp_op12_conditional → • exp_op11 ? expression : expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 = expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 += expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 -= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 *= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 /= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 %= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 &= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 |= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 ^= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 <<= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 >>= expression, $/]/,/)/:/}]", "[exp_op11 → • exp_op10, $/]/,/)/||/?/:/}]", "[exp_op11 → • exp_op11 || exp_op10, $/]/,/)/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • + exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • - exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op10 → • exp_op9, $/]/,/)/&&/?/:/}]", "[exp_op10 → • exp_op10 && exp_op9, $/]/,/)/&&/?/:/}]", "[exp_op0 → • exp_op0_no_array, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0 → • exp_op0_array_creation, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_increment → • ++ exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_decrement → • -- exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_cast → • ( type ) exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op9 → • exp_op8, $/]/,/)/|/?/:/}]", "[exp_op9 → • exp_op9 | exp_op8, $/]/,/)/|/?/:/}]", "[exp_op0_no_array → • exp_atom, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_invoke, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_obj_creation, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_increment, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_decrement, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_member_access, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_typeof, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_checked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_unchecked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_array array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op8 → • exp_op7, $/]/,/)/^/?/:/}]", "[exp_op8 → • exp_op8 ^ exp_op7, $/]/,/)/^/?/:/}]", "[exp_atom → • NULL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_HEXA, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • REAL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • CHARACTER_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_REGULAR, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_VERBATIM, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • this, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • base, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_increment → • exp_op0 ++, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_decrement → • exp_op0 --, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_typeof → • typeof ( type_return ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_checked → • checked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_unchecked → • unchecked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op7 → • exp_op6, $/]/,/)/&/?/:/}]", "[exp_op7 → • exp_op7 & exp_op6, $/]/,/)/&/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]", "[exp_op6 → • exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op6 → • exp_op6 == exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op6 → • exp_op6 != exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op5 → • exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 < exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 <= exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 > exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 >= exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 is exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 as exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op4 → • exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op4 → • exp_op4 << exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op4 → • exp_op4 >> exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op3 → • exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op3 → • exp_op3 + exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op3 → • exp_op3 - exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op2 → • exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 * exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 / exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 % exp_op1, $/]/,/)/*///%/?/:/}]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[30] {0x3d, 0x3b, 0x3c, 0x3a, 0x30, 0x39, 0x2c, 0x2d, 0x2e, 0x2f, 0x38, 0x2b, 0x2a, 0x37, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x36, 0x1e, 0x35, 0x34, 0x33, 0x32, 0x31},
               new ushort[30] {0xA7, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x20, 0x2D, 0x31, 0x41, 0x42, 0x43, 0x44})
            , new State(
               new string[112] {"[exp_op13_assigment → exp_op1 %= • expression, $/]/,/)/:/}]", "[expression → • exp_op12_conditional, $/]/,/)/:/}]", "[expression → • exp_op13_assigment, $/]/,/)/:/}]", "[exp_op12_conditional → • exp_op11, $/]/,/)/:/}]", "[exp_op12_conditional → • exp_op11 ? expression : expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 = expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 += expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 -= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 *= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 /= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 %= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 &= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 |= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 ^= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 <<= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 >>= expression, $/]/,/)/:/}]", "[exp_op11 → • exp_op10, $/]/,/)/||/?/:/}]", "[exp_op11 → • exp_op11 || exp_op10, $/]/,/)/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • + exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • - exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op10 → • exp_op9, $/]/,/)/&&/?/:/}]", "[exp_op10 → • exp_op10 && exp_op9, $/]/,/)/&&/?/:/}]", "[exp_op0 → • exp_op0_no_array, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0 → • exp_op0_array_creation, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_increment → • ++ exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_decrement → • -- exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_cast → • ( type ) exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op9 → • exp_op8, $/]/,/)/|/?/:/}]", "[exp_op9 → • exp_op9 | exp_op8, $/]/,/)/|/?/:/}]", "[exp_op0_no_array → • exp_atom, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_invoke, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_obj_creation, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_increment, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_decrement, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_member_access, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_typeof, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_checked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_unchecked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_array array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op8 → • exp_op7, $/]/,/)/^/?/:/}]", "[exp_op8 → • exp_op8 ^ exp_op7, $/]/,/)/^/?/:/}]", "[exp_atom → • NULL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_HEXA, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • REAL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • CHARACTER_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_REGULAR, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_VERBATIM, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • this, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • base, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_increment → • exp_op0 ++, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_decrement → • exp_op0 --, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_typeof → • typeof ( type_return ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_checked → • checked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_unchecked → • unchecked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op7 → • exp_op6, $/]/,/)/&/?/:/}]", "[exp_op7 → • exp_op7 & exp_op6, $/]/,/)/&/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]", "[exp_op6 → • exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op6 → • exp_op6 == exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op6 → • exp_op6 != exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op5 → • exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 < exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 <= exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 > exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 >= exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 is exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 as exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op4 → • exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op4 → • exp_op4 << exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op4 → • exp_op4 >> exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op3 → • exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op3 → • exp_op3 + exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op3 → • exp_op3 - exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op2 → • exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 * exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 / exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 % exp_op1, $/]/,/)/*///%/?/:/}]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[30] {0x3d, 0x3b, 0x3c, 0x3a, 0x30, 0x39, 0x2c, 0x2d, 0x2e, 0x2f, 0x38, 0x2b, 0x2a, 0x37, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x36, 0x1e, 0x35, 0x34, 0x33, 0x32, 0x31},
               new ushort[30] {0xA8, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x20, 0x2D, 0x31, 0x41, 0x42, 0x43, 0x44})
            , new State(
               new string[112] {"[exp_op13_assigment → exp_op1 &= • expression, $/]/,/)/:/}]", "[expression → • exp_op12_conditional, $/]/,/)/:/}]", "[expression → • exp_op13_assigment, $/]/,/)/:/}]", "[exp_op12_conditional → • exp_op11, $/]/,/)/:/}]", "[exp_op12_conditional → • exp_op11 ? expression : expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 = expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 += expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 -= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 *= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 /= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 %= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 &= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 |= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 ^= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 <<= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 >>= expression, $/]/,/)/:/}]", "[exp_op11 → • exp_op10, $/]/,/)/||/?/:/}]", "[exp_op11 → • exp_op11 || exp_op10, $/]/,/)/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • + exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • - exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op10 → • exp_op9, $/]/,/)/&&/?/:/}]", "[exp_op10 → • exp_op10 && exp_op9, $/]/,/)/&&/?/:/}]", "[exp_op0 → • exp_op0_no_array, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0 → • exp_op0_array_creation, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_increment → • ++ exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_decrement → • -- exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_cast → • ( type ) exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op9 → • exp_op8, $/]/,/)/|/?/:/}]", "[exp_op9 → • exp_op9 | exp_op8, $/]/,/)/|/?/:/}]", "[exp_op0_no_array → • exp_atom, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_invoke, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_obj_creation, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_increment, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_decrement, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_member_access, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_typeof, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_checked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_unchecked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_array array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op8 → • exp_op7, $/]/,/)/^/?/:/}]", "[exp_op8 → • exp_op8 ^ exp_op7, $/]/,/)/^/?/:/}]", "[exp_atom → • NULL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_HEXA, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • REAL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • CHARACTER_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_REGULAR, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_VERBATIM, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • this, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • base, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_increment → • exp_op0 ++, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_decrement → • exp_op0 --, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_typeof → • typeof ( type_return ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_checked → • checked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_unchecked → • unchecked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op7 → • exp_op6, $/]/,/)/&/?/:/}]", "[exp_op7 → • exp_op7 & exp_op6, $/]/,/)/&/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]", "[exp_op6 → • exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op6 → • exp_op6 == exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op6 → • exp_op6 != exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op5 → • exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 < exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 <= exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 > exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 >= exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 is exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 as exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op4 → • exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op4 → • exp_op4 << exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op4 → • exp_op4 >> exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op3 → • exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op3 → • exp_op3 + exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op3 → • exp_op3 - exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op2 → • exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 * exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 / exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 % exp_op1, $/]/,/)/*///%/?/:/}]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[30] {0x3d, 0x3b, 0x3c, 0x3a, 0x30, 0x39, 0x2c, 0x2d, 0x2e, 0x2f, 0x38, 0x2b, 0x2a, 0x37, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x36, 0x1e, 0x35, 0x34, 0x33, 0x32, 0x31},
               new ushort[30] {0xA9, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x20, 0x2D, 0x31, 0x41, 0x42, 0x43, 0x44})
            , new State(
               new string[112] {"[exp_op13_assigment → exp_op1 |= • expression, $/]/,/)/:/}]", "[expression → • exp_op12_conditional, $/]/,/)/:/}]", "[expression → • exp_op13_assigment, $/]/,/)/:/}]", "[exp_op12_conditional → • exp_op11, $/]/,/)/:/}]", "[exp_op12_conditional → • exp_op11 ? expression : expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 = expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 += expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 -= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 *= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 /= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 %= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 &= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 |= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 ^= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 <<= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 >>= expression, $/]/,/)/:/}]", "[exp_op11 → • exp_op10, $/]/,/)/||/?/:/}]", "[exp_op11 → • exp_op11 || exp_op10, $/]/,/)/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • + exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • - exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op10 → • exp_op9, $/]/,/)/&&/?/:/}]", "[exp_op10 → • exp_op10 && exp_op9, $/]/,/)/&&/?/:/}]", "[exp_op0 → • exp_op0_no_array, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0 → • exp_op0_array_creation, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_increment → • ++ exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_decrement → • -- exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_cast → • ( type ) exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op9 → • exp_op8, $/]/,/)/|/?/:/}]", "[exp_op9 → • exp_op9 | exp_op8, $/]/,/)/|/?/:/}]", "[exp_op0_no_array → • exp_atom, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_invoke, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_obj_creation, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_increment, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_decrement, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_member_access, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_typeof, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_checked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_unchecked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_array array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op8 → • exp_op7, $/]/,/)/^/?/:/}]", "[exp_op8 → • exp_op8 ^ exp_op7, $/]/,/)/^/?/:/}]", "[exp_atom → • NULL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_HEXA, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • REAL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • CHARACTER_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_REGULAR, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_VERBATIM, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • this, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • base, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_increment → • exp_op0 ++, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_decrement → • exp_op0 --, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_typeof → • typeof ( type_return ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_checked → • checked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_unchecked → • unchecked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op7 → • exp_op6, $/]/,/)/&/?/:/}]", "[exp_op7 → • exp_op7 & exp_op6, $/]/,/)/&/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]", "[exp_op6 → • exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op6 → • exp_op6 == exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op6 → • exp_op6 != exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op5 → • exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 < exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 <= exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 > exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 >= exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 is exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 as exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op4 → • exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op4 → • exp_op4 << exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op4 → • exp_op4 >> exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op3 → • exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op3 → • exp_op3 + exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op3 → • exp_op3 - exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op2 → • exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 * exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 / exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 % exp_op1, $/]/,/)/*///%/?/:/}]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[30] {0x3d, 0x3b, 0x3c, 0x3a, 0x30, 0x39, 0x2c, 0x2d, 0x2e, 0x2f, 0x38, 0x2b, 0x2a, 0x37, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x36, 0x1e, 0x35, 0x34, 0x33, 0x32, 0x31},
               new ushort[30] {0xAA, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x20, 0x2D, 0x31, 0x41, 0x42, 0x43, 0x44})
            , new State(
               new string[112] {"[exp_op13_assigment → exp_op1 ^= • expression, $/]/,/)/:/}]", "[expression → • exp_op12_conditional, $/]/,/)/:/}]", "[expression → • exp_op13_assigment, $/]/,/)/:/}]", "[exp_op12_conditional → • exp_op11, $/]/,/)/:/}]", "[exp_op12_conditional → • exp_op11 ? expression : expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 = expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 += expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 -= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 *= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 /= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 %= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 &= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 |= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 ^= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 <<= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 >>= expression, $/]/,/)/:/}]", "[exp_op11 → • exp_op10, $/]/,/)/||/?/:/}]", "[exp_op11 → • exp_op11 || exp_op10, $/]/,/)/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • + exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • - exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op10 → • exp_op9, $/]/,/)/&&/?/:/}]", "[exp_op10 → • exp_op10 && exp_op9, $/]/,/)/&&/?/:/}]", "[exp_op0 → • exp_op0_no_array, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0 → • exp_op0_array_creation, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_increment → • ++ exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_decrement → • -- exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_cast → • ( type ) exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op9 → • exp_op8, $/]/,/)/|/?/:/}]", "[exp_op9 → • exp_op9 | exp_op8, $/]/,/)/|/?/:/}]", "[exp_op0_no_array → • exp_atom, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_invoke, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_obj_creation, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_increment, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_decrement, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_member_access, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_typeof, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_checked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_unchecked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_array array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op8 → • exp_op7, $/]/,/)/^/?/:/}]", "[exp_op8 → • exp_op8 ^ exp_op7, $/]/,/)/^/?/:/}]", "[exp_atom → • NULL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_HEXA, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • REAL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • CHARACTER_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_REGULAR, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_VERBATIM, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • this, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • base, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_increment → • exp_op0 ++, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_decrement → • exp_op0 --, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_typeof → • typeof ( type_return ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_checked → • checked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_unchecked → • unchecked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op7 → • exp_op6, $/]/,/)/&/?/:/}]", "[exp_op7 → • exp_op7 & exp_op6, $/]/,/)/&/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]", "[exp_op6 → • exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op6 → • exp_op6 == exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op6 → • exp_op6 != exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op5 → • exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 < exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 <= exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 > exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 >= exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 is exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 as exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op4 → • exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op4 → • exp_op4 << exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op4 → • exp_op4 >> exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op3 → • exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op3 → • exp_op3 + exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op3 → • exp_op3 - exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op2 → • exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 * exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 / exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 % exp_op1, $/]/,/)/*///%/?/:/}]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[30] {0x3d, 0x3b, 0x3c, 0x3a, 0x30, 0x39, 0x2c, 0x2d, 0x2e, 0x2f, 0x38, 0x2b, 0x2a, 0x37, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x36, 0x1e, 0x35, 0x34, 0x33, 0x32, 0x31},
               new ushort[30] {0xAB, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x20, 0x2D, 0x31, 0x41, 0x42, 0x43, 0x44})
            , new State(
               new string[112] {"[exp_op13_assigment → exp_op1 <<= • expression, $/]/,/)/:/}]", "[expression → • exp_op12_conditional, $/]/,/)/:/}]", "[expression → • exp_op13_assigment, $/]/,/)/:/}]", "[exp_op12_conditional → • exp_op11, $/]/,/)/:/}]", "[exp_op12_conditional → • exp_op11 ? expression : expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 = expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 += expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 -= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 *= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 /= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 %= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 &= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 |= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 ^= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 <<= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 >>= expression, $/]/,/)/:/}]", "[exp_op11 → • exp_op10, $/]/,/)/||/?/:/}]", "[exp_op11 → • exp_op11 || exp_op10, $/]/,/)/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • + exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • - exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op10 → • exp_op9, $/]/,/)/&&/?/:/}]", "[exp_op10 → • exp_op10 && exp_op9, $/]/,/)/&&/?/:/}]", "[exp_op0 → • exp_op0_no_array, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0 → • exp_op0_array_creation, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_increment → • ++ exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_decrement → • -- exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_cast → • ( type ) exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op9 → • exp_op8, $/]/,/)/|/?/:/}]", "[exp_op9 → • exp_op9 | exp_op8, $/]/,/)/|/?/:/}]", "[exp_op0_no_array → • exp_atom, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_invoke, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_obj_creation, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_increment, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_decrement, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_member_access, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_typeof, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_checked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_unchecked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_array array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op8 → • exp_op7, $/]/,/)/^/?/:/}]", "[exp_op8 → • exp_op8 ^ exp_op7, $/]/,/)/^/?/:/}]", "[exp_atom → • NULL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_HEXA, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • REAL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • CHARACTER_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_REGULAR, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_VERBATIM, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • this, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • base, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_increment → • exp_op0 ++, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_decrement → • exp_op0 --, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_typeof → • typeof ( type_return ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_checked → • checked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_unchecked → • unchecked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op7 → • exp_op6, $/]/,/)/&/?/:/}]", "[exp_op7 → • exp_op7 & exp_op6, $/]/,/)/&/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]", "[exp_op6 → • exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op6 → • exp_op6 == exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op6 → • exp_op6 != exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op5 → • exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 < exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 <= exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 > exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 >= exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 is exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 as exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op4 → • exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op4 → • exp_op4 << exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op4 → • exp_op4 >> exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op3 → • exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op3 → • exp_op3 + exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op3 → • exp_op3 - exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op2 → • exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 * exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 / exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 % exp_op1, $/]/,/)/*///%/?/:/}]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[30] {0x3d, 0x3b, 0x3c, 0x3a, 0x30, 0x39, 0x2c, 0x2d, 0x2e, 0x2f, 0x38, 0x2b, 0x2a, 0x37, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x36, 0x1e, 0x35, 0x34, 0x33, 0x32, 0x31},
               new ushort[30] {0xAC, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x20, 0x2D, 0x31, 0x41, 0x42, 0x43, 0x44})
            , new State(
               new string[112] {"[exp_op13_assigment → exp_op1 >>= • expression, $/]/,/)/:/}]", "[expression → • exp_op12_conditional, $/]/,/)/:/}]", "[expression → • exp_op13_assigment, $/]/,/)/:/}]", "[exp_op12_conditional → • exp_op11, $/]/,/)/:/}]", "[exp_op12_conditional → • exp_op11 ? expression : expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 = expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 += expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 -= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 *= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 /= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 %= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 &= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 |= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 ^= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 <<= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 >>= expression, $/]/,/)/:/}]", "[exp_op11 → • exp_op10, $/]/,/)/||/?/:/}]", "[exp_op11 → • exp_op11 || exp_op10, $/]/,/)/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • + exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • - exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op10 → • exp_op9, $/]/,/)/&&/?/:/}]", "[exp_op10 → • exp_op10 && exp_op9, $/]/,/)/&&/?/:/}]", "[exp_op0 → • exp_op0_no_array, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0 → • exp_op0_array_creation, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_increment → • ++ exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_decrement → • -- exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_cast → • ( type ) exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op9 → • exp_op8, $/]/,/)/|/?/:/}]", "[exp_op9 → • exp_op9 | exp_op8, $/]/,/)/|/?/:/}]", "[exp_op0_no_array → • exp_atom, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_invoke, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_obj_creation, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_increment, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_decrement, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_member_access, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_typeof, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_checked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_unchecked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_array array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op8 → • exp_op7, $/]/,/)/^/?/:/}]", "[exp_op8 → • exp_op8 ^ exp_op7, $/]/,/)/^/?/:/}]", "[exp_atom → • NULL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_HEXA, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • REAL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • CHARACTER_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_REGULAR, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_VERBATIM, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • this, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • base, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_increment → • exp_op0 ++, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_decrement → • exp_op0 --, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_typeof → • typeof ( type_return ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_checked → • checked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_unchecked → • unchecked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op7 → • exp_op6, $/]/,/)/&/?/:/}]", "[exp_op7 → • exp_op7 & exp_op6, $/]/,/)/&/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]", "[exp_op6 → • exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op6 → • exp_op6 == exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op6 → • exp_op6 != exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op5 → • exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 < exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 <= exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 > exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 >= exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 is exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 as exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op4 → • exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op4 → • exp_op4 << exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op4 → • exp_op4 >> exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op3 → • exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op3 → • exp_op3 + exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op3 → • exp_op3 - exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op2 → • exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 * exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 / exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 % exp_op1, $/]/,/)/*///%/?/:/}]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[30] {0x3d, 0x3b, 0x3c, 0x3a, 0x30, 0x39, 0x2c, 0x2d, 0x2e, 0x2f, 0x38, 0x2b, 0x2a, 0x37, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x36, 0x1e, 0x35, 0x34, 0x33, 0x32, 0x31},
               new ushort[30] {0xAD, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x20, 0x2D, 0x31, 0x41, 0x42, 0x43, 0x44})
            , new State(
               new string[93] {"[exp_op10 → exp_op10 && • exp_op9, $/]/,/)/&&/||/?/:/}]", "[exp_op9 → • exp_op8, $/]/,/)/|/&&/||/?/:/}]", "[exp_op9 → • exp_op9 | exp_op8, $/]/,/)/|/&&/||/?/:/}]", "[exp_op8 → • exp_op7, $/]/,/)/^/&&/||/?/:/}]", "[exp_op8 → • exp_op8 ^ exp_op7, $/]/,/)/^/&&/||/?/:/}]", "[exp_op7 → • exp_op6, $/]/,/)/&/&&/||/?/:/}]", "[exp_op7 → • exp_op7 & exp_op6, $/]/,/)/&/&&/||/?/:/}]", "[exp_op6 → • exp_op5, $/]/,/)/==/!=/&&/||/?/:/}]", "[exp_op6 → • exp_op6 == exp_op5, $/]/,/)/==/!=/&&/||/?/:/}]", "[exp_op6 → • exp_op6 != exp_op5, $/]/,/)/==/!=/&&/||/?/:/}]", "[exp_op5 → • exp_op4, $/]/,/)/</<=/>/>=/is/as/&&/||/?/:/}]", "[exp_op5 → • exp_op5 < exp_op4, $/]/,/)/</<=/>/>=/is/as/&&/||/?/:/}]", "[exp_op5 → • exp_op5 <= exp_op4, $/]/,/)/</<=/>/>=/is/as/&&/||/?/:/}]", "[exp_op5 → • exp_op5 > exp_op4, $/]/,/)/</<=/>/>=/is/as/&&/||/?/:/}]", "[exp_op5 → • exp_op5 >= exp_op4, $/]/,/)/</<=/>/>=/is/as/&&/||/?/:/}]", "[exp_op5 → • exp_op5 is exp_op4, $/]/,/)/</<=/>/>=/is/as/&&/||/?/:/}]", "[exp_op5 → • exp_op5 as exp_op4, $/]/,/)/</<=/>/>=/is/as/&&/||/?/:/}]", "[exp_op4 → • exp_op3, $/]/,/)/<</>>/&&/||/?/:/}]", "[exp_op4 → • exp_op4 << exp_op3, $/]/,/)/<</>>/&&/||/?/:/}]", "[exp_op4 → • exp_op4 >> exp_op3, $/]/,/)/<</>>/&&/||/?/:/}]", "[exp_op3 → • exp_op2, $/]/,/)/+/-/&&/||/?/:/}]", "[exp_op3 → • exp_op3 + exp_op2, $/]/,/)/+/-/&&/||/?/:/}]", "[exp_op3 → • exp_op3 - exp_op2, $/]/,/)/+/-/&&/||/?/:/}]", "[exp_op2 → • exp_op1, $/]/,/)/*///%/&&/||/?/:/}]", "[exp_op2 → • exp_op2 * exp_op1, $/]/,/)/*///%/&&/||/?/:/}]", "[exp_op2 → • exp_op2 / exp_op1, $/]/,/)/*///%/&&/||/?/:/}]", "[exp_op2 → • exp_op2 % exp_op1, $/]/,/)/*///%/&&/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/&&/||/?/:/}]", "[exp_op1 → • + exp_op1, $/]/,/)/&&/||/?/:/}]", "[exp_op1 → • - exp_op1, $/]/,/)/&&/||/?/:/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/&&/||/?/:/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/&&/||/?/:/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/&&/||/?/:/}]", "[exp_op0 → • exp_op0_no_array, $/./]/,/(/)/++/--/&&/||/?/:/}]", "[exp_op0 → • exp_op0_array_creation, $/./]/,/(/)/++/--/&&/||/?/:/}]", "[exp_op1_pre_increment → • ++ exp_op1, $/]/,/)/&&/||/?/:/}]", "[exp_op1_pre_decrement → • -- exp_op1, $/]/,/)/&&/||/?/:/}]", "[exp_op1_cast → • ( type ) exp_op1, $/]/,/)/&&/||/?/:/}]", "[exp_op0_no_array → • exp_atom, $/]/,/)/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_invoke, $/]/,/)/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_obj_creation, $/]/,/)/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_increment, $/]/,/)/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_decrement, $/]/,/)/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_member_access, $/]/,/)/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_typeof, $/]/,/)/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_checked, $/]/,/)/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_unchecked, $/]/,/)/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, $/]/,/)/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, $/]/,/)/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, $/]/,/)/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], $/]/,/)/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_array array_initializer, $/]/,/)/&&/||/?/:/}]", "[exp_atom → • NULL_LITTERAL, $/]/,/)/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, $/]/,/)/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, $/]/,/)/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, $/]/,/)/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_HEXA, $/]/,/)/&&/||/?/:/}]", "[exp_atom → • REAL_LITTERAL, $/]/,/)/&&/||/?/:/}]", "[exp_atom → • CHARACTER_LITTERAL, $/]/,/)/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_REGULAR, $/]/,/)/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_VERBATIM, $/]/,/)/&&/||/?/:/}]", "[exp_atom → • IDENTIFIER, $/]/,/)/&&/||/?/:/}]", "[exp_atom → • this, $/]/,/)/&&/||/?/:/}]", "[exp_atom → • base, $/]/,/)/&&/||/?/:/}]", "[exp_atom → • ( expression ), $/]/,/)/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), $/]/,/)/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( ), $/]/,/)/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), $/]/,/)/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( ), $/]/,/)/&&/||/?/:/}]", "[exp_op0_post_increment → • exp_op0 ++, $/]/,/)/&&/||/?/:/}]", "[exp_op0_post_decrement → • exp_op0 --, $/]/,/)/&&/||/?/:/}]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, $/]/,/)/&&/||/?/:/}]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, $/]/,/)/&&/||/?/:/}]", "[exp_op0_typeof → • typeof ( type_return ), $/]/,/)/&&/||/?/:/}]", "[exp_op0_checked → • checked ( expression ), $/]/,/)/&&/||/?/:/}]", "[exp_op0_unchecked → • unchecked ( expression ), $/]/,/)/&&/||/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[25] {0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2c, 0x2d, 0x2e, 0x2f, 0x2b, 0x2a, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x1e},
               new ushort[25] {0xAE, 0x15, 0x20, 0x31, 0x41, 0x42, 0x43, 0x44, 0xA2, 0x7, 0xC, 0xD, 0xE, 0x10, 0x11, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x2D})
            , new State(
               new string[118] {"[exp_op0_invoke → exp_op0 ( • exp_argument_list ), $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_invoke → exp_op0 ( • ), $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_argument_list → • exp_argument, ,/)]", "[exp_argument_list → • exp_argument_list , exp_argument, ,/)]", "[exp_argument → • expression, )]", "[exp_argument → • ref expression, )]", "[exp_argument → • out expression, )]", "[expression → • exp_op12_conditional, )]", "[expression → • exp_op13_assigment, )]", "[exp_op12_conditional → • exp_op11, )]", "[exp_op12_conditional → • exp_op11 ? expression : expression, )]", "[exp_op13_assigment → • exp_op1 = expression, )]", "[exp_op13_assigment → • exp_op1 += expression, )]", "[exp_op13_assigment → • exp_op1 -= expression, )]", "[exp_op13_assigment → • exp_op1 *= expression, )]", "[exp_op13_assigment → • exp_op1 /= expression, )]", "[exp_op13_assigment → • exp_op1 %= expression, )]", "[exp_op13_assigment → • exp_op1 &= expression, )]", "[exp_op13_assigment → • exp_op1 |= expression, )]", "[exp_op13_assigment → • exp_op1 ^= expression, )]", "[exp_op13_assigment → • exp_op1 <<= expression, )]", "[exp_op13_assigment → • exp_op1 >>= expression, )]", "[exp_op11 → • exp_op10, )/||/?]", "[exp_op11 → • exp_op11 || exp_op10, )/||/?]", "[exp_op1 → • exp_op0, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • + exp_op1, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • - exp_op1, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • ! exp_op1, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • ~ exp_op1, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_pre_increment, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_pre_decrement, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_cast, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op10 → • exp_op9, )/&&/?]", "[exp_op10 → • exp_op10 && exp_op9, )/&&/?]", "[exp_op0 → • exp_op0_no_array, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0 → • exp_op0_array_creation, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_increment → • ++ exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_decrement → • -- exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_cast → • ( type ) exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op9 → • exp_op8, )/|/?]", "[exp_op9 → • exp_op9 | exp_op8, )/|/?]", "[exp_op0_no_array → • exp_atom, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_invoke, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_obj_creation, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_increment, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_decrement, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_member_access, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_typeof, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_checked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_unchecked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_array array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op8 → • exp_op7, )/^/?]", "[exp_op8 → • exp_op8 ^ exp_op7, )/^/?]", "[exp_atom → • NULL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_HEXA, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • REAL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • CHARACTER_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_REGULAR, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_VERBATIM, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • this, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • base, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_increment → • exp_op0 ++, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_decrement → • exp_op0 --, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_typeof → • typeof ( type_return ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_checked → • checked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_unchecked → • unchecked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op7 → • exp_op6, )/&/?]", "[exp_op7 → • exp_op7 & exp_op6, )/&/?]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]", "[exp_op6 → • exp_op5, )/==/!=/?]", "[exp_op6 → • exp_op6 == exp_op5, )/==/!=/?]", "[exp_op6 → • exp_op6 != exp_op5, )/==/!=/?]", "[exp_op5 → • exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 < exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 <= exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 > exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 >= exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 is exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 as exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op4 → • exp_op3, )/<</>>/?]", "[exp_op4 → • exp_op4 << exp_op3, )/<</>>/?]", "[exp_op4 → • exp_op4 >> exp_op3, )/<</>>/?]", "[exp_op3 → • exp_op2, )/+/-/?]", "[exp_op3 → • exp_op3 + exp_op2, )/+/-/?]", "[exp_op3 → • exp_op3 - exp_op2, )/+/-/?]", "[exp_op2 → • exp_op1, )/*///%/?]", "[exp_op2 → • exp_op2 * exp_op1, )/*///%/?]", "[exp_op2 → • exp_op2 / exp_op1, )/*///%/?]", "[exp_op2 → • exp_op2 % exp_op1, )/*///%/?]"},
               new Terminal[41] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D), new Terminal("_T[ref]", 0xB1), new Terminal("_T[out]", 0xB2)},
               new DeciderState[42] {
                   new DeciderState(
                   new ushort[41] {0x6D, 0xB1, 0xB2, 0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[41] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB0, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB3, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB4, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[32] {0x3f, 0x40, 0x3d, 0x3b, 0x3c, 0x3a, 0x30, 0x39, 0x2c, 0x2d, 0x2e, 0x2f, 0x38, 0x2b, 0x2a, 0x37, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x36, 0x1e, 0x35, 0x34, 0x33, 0x32, 0x31},
               new ushort[32] {0xAF, 0xB1, 0xB2, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x20, 0x2D, 0x31, 0x41, 0x42, 0x43, 0x44})
            , new State(
               new string[1] {"[exp_op0_post_increment → exp_op0 ++ •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x3C])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op0_post_decrement → exp_op0 -- •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x3D])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op0_member_access → exp_op0 . • IDENTIFIER, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[1] {new Terminal("IDENTIFIER", 0x13)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x13},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB5, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op1 → + exp_op1 •, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[38] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[38] {0x2, 0x57, 0x58, 0x6D, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[38] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x59])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op1 → - exp_op1 •, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[38] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[38] {0x2, 0x57, 0x58, 0x6D, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[38] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x5A])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op1 → ! exp_op1 •, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[38] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[38] {0x2, 0x57, 0x58, 0x6D, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[38] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x5B])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op1 → ~ exp_op1 •, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[38] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[38] {0x2, 0x57, 0x58, 0x6D, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[38] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x5C])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[91] {"[exp_op9 → exp_op9 | • exp_op8, $/]/,/)/|/&&/||/?/:/}]", "[exp_op8 → • exp_op7, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op8 → • exp_op8 ^ exp_op7, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op7 → • exp_op6, $/]/,/)/&/|/&&/||/?/:/}]", "[exp_op7 → • exp_op7 & exp_op6, $/]/,/)/&/|/&&/||/?/:/}]", "[exp_op6 → • exp_op5, $/]/,/)/==/!=/|/&&/||/?/:/}]", "[exp_op6 → • exp_op6 == exp_op5, $/]/,/)/==/!=/|/&&/||/?/:/}]", "[exp_op6 → • exp_op6 != exp_op5, $/]/,/)/==/!=/|/&&/||/?/:/}]", "[exp_op5 → • exp_op4, $/]/,/)/</<=/>/>=/is/as/|/&&/||/?/:/}]", "[exp_op5 → • exp_op5 < exp_op4, $/]/,/)/</<=/>/>=/is/as/|/&&/||/?/:/}]", "[exp_op5 → • exp_op5 <= exp_op4, $/]/,/)/</<=/>/>=/is/as/|/&&/||/?/:/}]", "[exp_op5 → • exp_op5 > exp_op4, $/]/,/)/</<=/>/>=/is/as/|/&&/||/?/:/}]", "[exp_op5 → • exp_op5 >= exp_op4, $/]/,/)/</<=/>/>=/is/as/|/&&/||/?/:/}]", "[exp_op5 → • exp_op5 is exp_op4, $/]/,/)/</<=/>/>=/is/as/|/&&/||/?/:/}]", "[exp_op5 → • exp_op5 as exp_op4, $/]/,/)/</<=/>/>=/is/as/|/&&/||/?/:/}]", "[exp_op4 → • exp_op3, $/]/,/)/<</>>/|/&&/||/?/:/}]", "[exp_op4 → • exp_op4 << exp_op3, $/]/,/)/<</>>/|/&&/||/?/:/}]", "[exp_op4 → • exp_op4 >> exp_op3, $/]/,/)/<</>>/|/&&/||/?/:/}]", "[exp_op3 → • exp_op2, $/]/,/)/+/-/|/&&/||/?/:/}]", "[exp_op3 → • exp_op3 + exp_op2, $/]/,/)/+/-/|/&&/||/?/:/}]", "[exp_op3 → • exp_op3 - exp_op2, $/]/,/)/+/-/|/&&/||/?/:/}]", "[exp_op2 → • exp_op1, $/]/,/)/*///%/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 * exp_op1, $/]/,/)/*///%/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 / exp_op1, $/]/,/)/*///%/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 % exp_op1, $/]/,/)/*///%/|/&&/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/|/&&/||/?/:/}]", "[exp_op1 → • + exp_op1, $/]/,/)/|/&&/||/?/:/}]", "[exp_op1 → • - exp_op1, $/]/,/)/|/&&/||/?/:/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/|/&&/||/?/:/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_no_array, $/./]/,/(/)/++/--/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_array_creation, $/./]/,/(/)/++/--/|/&&/||/?/:/}]", "[exp_op1_pre_increment → • ++ exp_op1, $/]/,/)/|/&&/||/?/:/}]", "[exp_op1_pre_decrement → • -- exp_op1, $/]/,/)/|/&&/||/?/:/}]", "[exp_op1_cast → • ( type ) exp_op1, $/]/,/)/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_atom, $/]/,/)/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_invoke, $/]/,/)/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_obj_creation, $/]/,/)/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_increment, $/]/,/)/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_decrement, $/]/,/)/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_member_access, $/]/,/)/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_typeof, $/]/,/)/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_checked, $/]/,/)/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_unchecked, $/]/,/)/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, $/]/,/)/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, $/]/,/)/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, $/]/,/)/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], $/]/,/)/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_array array_initializer, $/]/,/)/|/&&/||/?/:/}]", "[exp_atom → • NULL_LITTERAL, $/]/,/)/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, $/]/,/)/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, $/]/,/)/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, $/]/,/)/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_HEXA, $/]/,/)/|/&&/||/?/:/}]", "[exp_atom → • REAL_LITTERAL, $/]/,/)/|/&&/||/?/:/}]", "[exp_atom → • CHARACTER_LITTERAL, $/]/,/)/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_REGULAR, $/]/,/)/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_VERBATIM, $/]/,/)/|/&&/||/?/:/}]", "[exp_atom → • IDENTIFIER, $/]/,/)/|/&&/||/?/:/}]", "[exp_atom → • this, $/]/,/)/|/&&/||/?/:/}]", "[exp_atom → • base, $/]/,/)/|/&&/||/?/:/}]", "[exp_atom → • ( expression ), $/]/,/)/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), $/]/,/)/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( ), $/]/,/)/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), $/]/,/)/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( ), $/]/,/)/|/&&/||/?/:/}]", "[exp_op0_post_increment → • exp_op0 ++, $/]/,/)/|/&&/||/?/:/}]", "[exp_op0_post_decrement → • exp_op0 --, $/]/,/)/|/&&/||/?/:/}]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, $/]/,/)/|/&&/||/?/:/}]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, $/]/,/)/|/&&/||/?/:/}]", "[exp_op0_typeof → • typeof ( type_return ), $/]/,/)/|/&&/||/?/:/}]", "[exp_op0_checked → • checked ( expression ), $/]/,/)/|/&&/||/?/:/}]", "[exp_op0_unchecked → • unchecked ( expression ), $/]/,/)/|/&&/||/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[24] {0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2c, 0x2d, 0x2e, 0x2f, 0x2b, 0x2a, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x1e},
               new ushort[24] {0xB6, 0x20, 0x31, 0x41, 0x42, 0x43, 0x44, 0xA2, 0x7, 0xC, 0xD, 0xE, 0x10, 0x11, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x2D})
            , new State(
               new string[1] {"[exp_op1_pre_increment → ++ exp_op1 •, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[38] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[38] {0x2, 0x57, 0x58, 0x6D, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[38] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x55])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op1_pre_decrement → -- exp_op1 •, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[38] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[38] {0x2, 0x57, 0x58, 0x6D, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[38] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x56])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op1_cast → ( type • ) exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[1] {new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x6D},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB7, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_atom → ( expression • ), $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[1] {new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x6D},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB8, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[3] {"[type → type_non_array •, )]", "[type_array → type_non_array • type_array_rank _m85, )]", "[type_array_rank → • [ type_array_rank_dim ], [/)]"},
               new Terminal[2] {new Terminal("_T[[]", 0x56), new Terminal("_T[)]", 0x6D)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[2] {0x6D, 0x56},
                   new ushort[2] {0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x1])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xBA, new Rule())
               },
               new ushort[1] {0x1c},
               new ushort[1] {0xB9})
            , new State(
               new string[1] {"[type → type_array •, )]"},
               new Terminal[1] {new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x6D},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x2])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_non_array → type_object •, [/(/)]"},
               new Terminal[3] {new Terminal("_T[[]", 0x56), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x3])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_non_array → type_simple •, [/(/)]"},
               new Terminal[3] {new Terminal("_T[[]", 0x56), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x4])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[2] {"[type_object → object •, [/)]", "[type_predefined → object •, .]"},
               new Terminal[3] {new Terminal("_T[.]", 0x44), new Terminal("_T[[]", 0x56), new Terminal("_T[)]", 0x6D)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x1, 0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x5])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x22])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[2] {"[type_object → string •, [/)]", "[type_predefined → string •, .]"},
               new Terminal[3] {new Terminal("_T[.]", 0x44), new Terminal("_T[[]", 0x56), new Terminal("_T[)]", 0x6D)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x1, 0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x6])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x25])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_object → qualified_name •, [/(/)]"},
               new Terminal[3] {new Terminal("_T[[]", 0x56), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x7])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[2] {"[type_simple → bool •, [/)]", "[type_predefined → bool •, .]"},
               new Terminal[3] {new Terminal("_T[.]", 0x44), new Terminal("_T[[]", 0x56), new Terminal("_T[)]", 0x6D)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x1, 0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x8])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x1A])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[2] {"[type_simple → decimal •, [/)]", "[type_predefined → decimal •, .]"},
               new Terminal[3] {new Terminal("_T[.]", 0x44), new Terminal("_T[[]", 0x56), new Terminal("_T[)]", 0x6D)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x1, 0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x9])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x1D])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_simple → type_simple_integral •, [/(/)]"},
               new Terminal[3] {new Terminal("_T[[]", 0x56), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0xA])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_simple → type_simple_float •, [/(/)]"},
               new Terminal[3] {new Terminal("_T[[]", 0x56), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0xB])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[4] {"[qualified_name → IDENTIFIER • _m69, [/)]", "[exp_atom → IDENTIFIER •, ./(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[_m69 → • . IDENTIFIER _m69, [/)]", "[_m69 → •, [/)]"},
               new Terminal[38] {new Terminal("_T[.]", 0x44), new Terminal("_T[[]", 0x56), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE)},
               new DeciderState[382] {
                   new DeciderState(
                   new ushort[38] {0x6C, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0x56, 0x44, 0x6D},
                   new ushort[38] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x3, 0x4}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x34])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x9A])
                   , new DeciderState(
                   new ushort[1] {0x13},
                   new ushort[1] {0x5}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[75] {0x8C, 0x8D, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D, 0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[75] {0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[43] {0x56, 0x2, 0x57, 0x58, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4, 0x44, 0x6C, 0x6D},
                   new ushort[43] {0x30, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x31, 0x32}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x1},
                   new ushort[1] {0x33}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x13},
                   new ushort[1] {0x34}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[44] {0x56, 0xB3, 0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[44] {0x35, 0x36, 0x6, 0x7, 0x8, 0x9, 0x37, 0xB, 0x38, 0x39, 0x3A, 0x3B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[41] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D, 0xB3, 0xB1, 0xB2},
                   new ushort[41] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x36, 0x62, 0x63}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[41] {0x6D, 0xB1, 0xB2, 0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[41] {0x64, 0x62, 0x63, 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x65, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x6, 0x7, 0x8, 0x9, 0x37, 0xB, 0x38, 0x39, 0x3A, 0x3B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[75] {0x8C, 0x8D, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D, 0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[75] {0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[75] {0x8C, 0x8D, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D, 0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[75] {0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x6, 0x7, 0x8, 0x9, 0x37, 0xB, 0x38, 0x39, 0x3A, 0x3B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xBC, new Rule())
                   , new DeciderState(
                   new ushort[41] {0x6D, 0xB1, 0xB2, 0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[41] {0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[75] {0x8C, 0x8D, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D, 0x8A, 0x8B, 0x73, 0x74, 0x6C, 0x2, 0x44, 0x57, 0x58, 0x6D, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[75] {0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x6, 0x7, 0x8, 0x9, 0x37, 0xB, 0x38, 0x39, 0x3A, 0x3B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[2] {0x58, 0x57},
                   new ushort[2] {0xC8, 0xC9}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[40] {0xB3, 0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D, 0xB4},
                   new ushort[40] {0x36, 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[41] {0x6D, 0xB1, 0xB2, 0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[41] {0x64, 0x62, 0x63, 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x6, 0x7, 0x8, 0x9, 0x37, 0xB, 0x38, 0x39, 0x3A, 0x3B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x6, 0x7, 0x8, 0x9, 0x37, 0xB, 0x38, 0x39, 0x3A, 0x3B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x46, 0x47, 0x48, 0x49, 0x8A, 0x8B, 0x8C, 0x8D, 0x13, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x6A, 0x6B, 0x79, 0x7C, 0x7F},
                   new ushort[38] {0xCA, 0xCB, 0xCC, 0xCD, 0x3C, 0x3D, 0x3E, 0x3F, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4E, 0x4F, 0x50, 0x51, 0x52}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[16] {0x46, 0x47, 0x48, 0x49, 0x13, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54},
                   new ushort[16] {0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x6, 0x7, 0x8, 0x9, 0x37, 0xB, 0x38, 0x39, 0x3A, 0x3B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x6, 0x7, 0x8, 0x9, 0x37, 0xB, 0x38, 0x39, 0x3A, 0x3B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x6, 0x7, 0x8, 0x9, 0x37, 0xB, 0x38, 0x39, 0x3A, 0x3B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x6, 0x7, 0x8, 0x9, 0x37, 0xB, 0x38, 0x39, 0x3A, 0x3B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x6, 0x7, 0x8, 0x9, 0x37, 0xB, 0x38, 0x39, 0x3A, 0x3B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x6, 0x7, 0x8, 0x9, 0x37, 0xB, 0x38, 0x39, 0x3A, 0x3B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x6, 0x7, 0x8, 0x9, 0x37, 0xB, 0x38, 0x39, 0x3A, 0x3B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x6, 0x7, 0x8, 0x9, 0x37, 0xB, 0x38, 0x39, 0x3A, 0x3B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x6, 0x7, 0x8, 0x9, 0x37, 0xB, 0x38, 0x39, 0x3A, 0x3B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x6, 0x7, 0x8, 0x9, 0x37, 0xB, 0x38, 0x39, 0x3A, 0x3B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x6, 0x7, 0x8, 0x9, 0x37, 0xB, 0x38, 0x39, 0x3A, 0x3B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x6, 0x7, 0x8, 0x9, 0x37, 0xB, 0x38, 0x39, 0x3A, 0x3B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x6C},
                   new ushort[1] {0xEA}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x6C},
                   new ushort[1] {0xEB}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x6C},
                   new ushort[1] {0xEC}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0xED}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0xED}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0xED}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0xED}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0xED}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0xED}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0xED}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0xED}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0xED}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0xED}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0xED}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0xED}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0xED}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0xED}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0xED}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x6, 0x7, 0x8, 0x9, 0x37, 0xB, 0x38, 0x39, 0x3A, 0x3B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[43] {0x56, 0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[43] {0x2, 0x6, 0xEE, 0x8, 0x9, 0x37, 0xB, 0x38, 0x39, 0x3A, 0x3B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x2, 0x2, 0xED}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x2, 0x2, 0xED}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x2, 0x2, 0xED}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x2, 0x2, 0xED}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x2, 0x2, 0xED}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x2, 0x2, 0xED}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x2, 0x2, 0xED}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x2, 0x2, 0xED}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x2, 0x2, 0xED}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x2, 0x2, 0xED}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x2, 0x2, 0xED}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x2, 0x2, 0xED}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x2, 0x2, 0xED}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x2, 0x2, 0xED}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x2, 0x2, 0xED}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0xA3, 0xA4, 0xA5, 0xA6, 0xEF, 0xA7, 0xF0, 0xF1, 0xF2, 0xF3, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x46, 0x47, 0x48, 0x49, 0x8A, 0x8B, 0x8C, 0x8D, 0x13, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x6A, 0x6B, 0x79, 0x7C, 0x7F},
                   new ushort[38] {0xF4, 0xF5, 0xF6, 0xF7, 0x78, 0x79, 0x7A, 0x7B, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0x100, 0x101, 0x102, 0x103, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[16] {0x46, 0x47, 0x48, 0x49, 0x13, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54},
                   new ushort[16] {0x104, 0x105, 0x106, 0x107, 0x108, 0x109, 0x10A, 0x10B, 0x10C, 0x10D, 0x10E, 0x10F, 0x110, 0x111, 0x112, 0x113}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0xA3, 0xA4, 0xA5, 0xA6, 0xEF, 0xA7, 0xF0, 0xF1, 0xF2, 0xF3, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0xA3, 0xA4, 0xA5, 0xA6, 0xEF, 0xA7, 0xF0, 0xF1, 0xF2, 0xF3, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0xA3, 0xA4, 0xA5, 0xA6, 0xEF, 0xA7, 0xF0, 0xF1, 0xF2, 0xF3, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0xA3, 0xA4, 0xA5, 0xA6, 0xEF, 0xA7, 0xF0, 0xF1, 0xF2, 0xF3, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0xA3, 0xA4, 0xA5, 0xA6, 0xEF, 0xA7, 0xF0, 0xF1, 0xF2, 0xF3, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0xA3, 0xA4, 0xA5, 0xA6, 0xEF, 0xA7, 0xF0, 0xF1, 0xF2, 0xF3, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0xA3, 0xA4, 0xA5, 0xA6, 0xEF, 0xA7, 0xF0, 0xF1, 0xF2, 0xF3, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0xA3, 0xA4, 0xA5, 0xA6, 0xEF, 0xA7, 0xF0, 0xF1, 0xF2, 0xF3, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0xA3, 0xA4, 0xA5, 0xA6, 0xEF, 0xA7, 0xF0, 0xF1, 0xF2, 0xF3, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0xA3, 0xA4, 0xA5, 0xA6, 0xEF, 0xA7, 0xF0, 0xF1, 0xF2, 0xF3, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0xA3, 0xA4, 0xA5, 0xA6, 0xEF, 0xA7, 0xF0, 0xF1, 0xF2, 0xF3, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0xA3, 0xA4, 0xA5, 0xA6, 0xEF, 0xA7, 0xF0, 0xF1, 0xF2, 0xF3, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x6C},
                   new ushort[1] {0x114}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x6C},
                   new ushort[1] {0x115}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x6C},
                   new ushort[1] {0x116}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0x117}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0x117}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0x117}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0x117}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0x117}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0x117}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0x117}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0x117}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0x117}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0x117}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0x117}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0x117}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0x117}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0x117}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x44},
                   new ushort[1] {0x117}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[75] {0x8C, 0x8D, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D, 0x8A, 0x8B, 0x73, 0x74, 0x6C, 0x2, 0x44, 0x57, 0x58, 0x6D, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[75] {0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[75] {0x8C, 0x8D, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D, 0x8A, 0x8B, 0x73, 0x74, 0x6C, 0x2, 0x44, 0x57, 0x58, 0x6D, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[75] {0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[41] {0x46, 0x47, 0x48, 0x49, 0x8A, 0x8B, 0x8C, 0x8D, 0x13, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x6D, 0xB1, 0xB2},
                   new ushort[41] {0x118, 0x119, 0x11A, 0x11B, 0x78, 0x79, 0x7A, 0x7B, 0x11C, 0x11D, 0x11E, 0x11F, 0x120, 0x121, 0x122, 0x123, 0x124, 0x125, 0x126, 0x127, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x128, 0x76, 0x77}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x1},
                   new ushort[1] {0x129}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x13},
                   new ushort[1] {0x12A}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[44] {0x56, 0xB3, 0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[44] {0x12B, 0x12C, 0xA3, 0xA4, 0xA5, 0xA6, 0xEF, 0xA7, 0xF0, 0xF1, 0xF2, 0xF3, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[41] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D, 0xB3, 0xB1, 0xB2},
                   new ushort[41] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x12C, 0x76, 0x77}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0xA3, 0xA4, 0xA5, 0xA6, 0xEF, 0xA7, 0xF0, 0xF1, 0xF2, 0xF3, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0xA3, 0xA4, 0xA5, 0xA6, 0xEF, 0xA7, 0xF0, 0xF1, 0xF2, 0xF3, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[2] {0x58, 0x57},
                   new ushort[2] {0xC8, 0xC9}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[44] {0x2, 0x44, 0x56, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB3, 0xB4},
                   new ushort[44] {0x6, 0x7, 0x35, 0x8, 0x9, 0x12D, 0x12E, 0x38, 0x39, 0x3A, 0x3B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x36, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0xED, 0x12F, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0xED, 0x12F, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0xED, 0x12F, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0xED, 0x12F, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x44, 0x56, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE},
                   new ushort[38] {0x131, 0x12F, 0x37, 0xB, 0x38, 0x39, 0x3A, 0x3B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0xED, 0x12F, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0xED, 0x12F, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0xED, 0x12F, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0xED, 0x12F, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0xED, 0x12F, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0xED, 0x12F, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0xED, 0x12F, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0xED, 0x12F, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0xED, 0x12F, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0xED, 0x12F, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0xED, 0x12F, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x12F, 0x132, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x12F, 0x132, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x12F, 0x132, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x12F, 0x132, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[4] {0x44, 0x56, 0x6C, 0x6D},
                   new ushort[4] {0x131, 0x12F, 0x132, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x12F, 0x132, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x12F, 0x132, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x12F, 0x132, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x12F, 0x132, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x12F, 0x132, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x12F, 0x132, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x12F, 0x132, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x12F, 0x132, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x12F, 0x132, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x12F, 0x132, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x12F, 0x132, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[17] {0x69, 0x46, 0x47, 0x48, 0x49, 0x13, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54},
                   new ushort[17] {0x133, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x13},
                   new ushort[1] {0x134}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x13},
                   new ushort[1] {0x135}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[41] {0x6D, 0xB1, 0xB2, 0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[41] {0x128, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0xA3, 0xA4, 0xA5, 0xA6, 0xEF, 0xA7, 0xF0, 0xF1, 0xF2, 0xF3, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0xA3, 0xA4, 0xA5, 0xA6, 0xEF, 0xA7, 0xF0, 0xF1, 0xF2, 0xF3, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0x117, 0x136, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0x117, 0x136, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0x117, 0x136, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0x117, 0x136, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x44, 0x56, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE},
                   new ushort[38] {0x138, 0x136, 0xEF, 0xA7, 0xF0, 0xF1, 0xF2, 0xF3, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0x117, 0x136, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0x117, 0x136, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0x117, 0x136, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0x117, 0x136, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0x117, 0x136, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0x117, 0x136, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0x117, 0x136, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0x117, 0x136, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0x117, 0x136, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0x117, 0x136, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0x117, 0x136, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x136, 0x139, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x136, 0x139, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x136, 0x139, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x136, 0x139, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[4] {0x44, 0x56, 0x6C, 0x6D},
                   new ushort[4] {0x138, 0x136, 0x139, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x136, 0x139, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x136, 0x139, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x136, 0x139, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x136, 0x139, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x136, 0x139, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x136, 0x139, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x136, 0x139, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x136, 0x139, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x136, 0x139, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x136, 0x139, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x136, 0x139, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[17] {0x69, 0x46, 0x47, 0x48, 0x49, 0x13, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54},
                   new ushort[17] {0x13A, 0x104, 0x105, 0x106, 0x107, 0x108, 0x109, 0x10A, 0x10B, 0x10C, 0x10D, 0x10E, 0x10F, 0x110, 0x111, 0x112, 0x113}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x13},
                   new ushort[1] {0x13B}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x30, 0x30, 0x117}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x30, 0x30, 0x117}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x30, 0x30, 0x117}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x30, 0x30, 0x117}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[43] {0x56, 0x44, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0x2, 0x57, 0x58, 0xA3, 0xB4},
                   new ushort[43] {0x30, 0x13C, 0xEF, 0xA7, 0xF0, 0xF1, 0xF2, 0xF3, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xA3, 0xA5, 0xA6, 0xBB, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x30, 0x30, 0x117}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x30, 0x30, 0x117}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x30, 0x30, 0x117}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x30, 0x30, 0x117}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x30, 0x30, 0x117}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x30, 0x30, 0x117}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x30, 0x30, 0x117}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x30, 0x30, 0x117}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x30, 0x30, 0x117}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x30, 0x30, 0x117}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x30, 0x30, 0x117}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0xA3, 0xA4, 0xA5, 0xA6, 0xEF, 0xA7, 0xF0, 0xF1, 0xF2, 0xF3, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0xA3, 0xA4, 0xA5, 0xA6, 0xEF, 0xA7, 0xF0, 0xF1, 0xF2, 0xF3, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[2] {0x58, 0x57},
                   new ushort[2] {0x13D, 0x13E}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[40] {0xB3, 0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D, 0xB4},
                   new ushort[40] {0x12C, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[41] {0x6D, 0xB1, 0xB2, 0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[41] {0x13F, 0x62, 0x63, 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[75] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D, 0x2, 0x44, 0x57, 0x58, 0x6D, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[75] {0x140, 0x141, 0x3E, 0x3F, 0x142, 0x143, 0x144, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x6, 0x7, 0x8, 0x9, 0xB, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[40] {0x58, 0x57, 0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[40] {0xC8, 0xC9, 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[75] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D, 0x2, 0x44, 0x57, 0x58, 0x6D, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[75] {0x140, 0x141, 0x3E, 0x3F, 0x142, 0x143, 0x144, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x6, 0x7, 0x8, 0x9, 0xB, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x13},
                   new ushort[1] {0x145}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[41] {0x6D, 0xB1, 0xB2, 0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[41] {0x146, 0x62, 0x63, 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x6D},
                   new ushort[1] {0x147}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x6, 0x7, 0x8, 0x9, 0x37, 0xB, 0x38, 0x39, 0x3A, 0x3B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[43] {0x56, 0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[43] {0x2, 0x6, 0xEE, 0x8, 0x9, 0x148, 0x149, 0x38, 0x39, 0x3A, 0x3B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[40] {0x58, 0x57, 0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[40] {0x13D, 0x13E, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[75] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D, 0x2, 0x44, 0x57, 0x58, 0x6D, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[75] {0x14A, 0x14B, 0x7A, 0x7B, 0x14C, 0x14D, 0x14E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x13},
                   new ushort[1] {0x14F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[41] {0x6D, 0xB1, 0xB2, 0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[41] {0x150, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x6D},
                   new ushort[1] {0x151}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0xA3, 0xA4, 0xA5, 0xA6, 0xEF, 0xA7, 0xF0, 0xF1, 0xF2, 0xF3, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x13},
                   new ushort[1] {0x152}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[2] {0x58, 0x57},
                   new ushort[2] {0x13D, 0x13E}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[44] {0x2, 0x44, 0x56, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB3, 0xB4},
                   new ushort[44] {0xA3, 0xA4, 0x12B, 0xA5, 0xA6, 0x153, 0x154, 0xF0, 0xF1, 0xF2, 0xF3, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0x12C, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x6, 0x7, 0x8, 0x9, 0x37, 0xB, 0x38, 0x39, 0x3A, 0x3B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[75] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D, 0x2, 0x44, 0x57, 0x58, 0x6D, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[75] {0x140, 0x141, 0x3E, 0x3F, 0x142, 0x143, 0x144, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x6, 0x7, 0x8, 0x9, 0xB, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[75] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D, 0x2, 0x44, 0x57, 0x58, 0x6D, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[75] {0x140, 0x141, 0x3E, 0x3F, 0x142, 0x143, 0x144, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x6, 0x7, 0x8, 0x9, 0xB, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[41] {0x46, 0x47, 0x48, 0x49, 0x8A, 0x8B, 0x8C, 0x8D, 0x13, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x6D, 0xB1, 0xB2},
                   new ushort[41] {0x155, 0x156, 0x157, 0x158, 0x3C, 0x3D, 0x3E, 0x3F, 0x159, 0x15A, 0x15B, 0x15C, 0x15D, 0x15E, 0x15F, 0x160, 0x161, 0x162, 0x163, 0x164, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x64, 0x62, 0x63}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[4] {0x44, 0x56, 0x6C, 0x6D},
                   new ushort[4] {0x131, 0x12F, 0x132, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x6, 0x7, 0x8, 0x9, 0x37, 0xB, 0x38, 0x39, 0x3A, 0x3B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x6, 0x7, 0x8, 0x9, 0x37, 0xB, 0x38, 0x39, 0x3A, 0x3B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[41] {0x6D, 0xB1, 0xB2, 0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[41] {0x165, 0x62, 0x63, 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[75] {0x8C, 0x8D, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D, 0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[75] {0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[75] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D, 0x2, 0x44, 0x57, 0x58, 0x6D, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[75] {0x14A, 0x14B, 0x7A, 0x7B, 0x14C, 0x14D, 0x14E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[75] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D, 0x2, 0x44, 0x57, 0x58, 0x6D, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[75] {0x14A, 0x14B, 0x7A, 0x7B, 0x14C, 0x14D, 0x14E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[41] {0x46, 0x47, 0x48, 0x49, 0x8A, 0x8B, 0x8C, 0x8D, 0x13, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x6D, 0xB1, 0xB2},
                   new ushort[41] {0x166, 0x167, 0x168, 0x169, 0x78, 0x79, 0x7A, 0x7B, 0x16A, 0x16B, 0x16C, 0x16D, 0x16E, 0x16F, 0x170, 0x171, 0x172, 0x173, 0x174, 0x175, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x128, 0x76, 0x77}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[4] {0x44, 0x56, 0x6C, 0x6D},
                   new ushort[4] {0x138, 0x136, 0x139, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0xA3, 0xA4, 0xA5, 0xA6, 0xEF, 0xA7, 0xF0, 0xF1, 0xF2, 0xF3, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0xA3, 0xA4, 0xA5, 0xA6, 0xEF, 0xA7, 0xF0, 0xF1, 0xF2, 0xF3, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[43] {0x56, 0x44, 0x6C, 0x6D, 0x2, 0x57, 0x58, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[43] {0x30, 0x13C, 0x176, 0x177, 0xA3, 0xA5, 0xA6, 0xF0, 0xF1, 0xF2, 0xF3, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[41] {0x6D, 0xB1, 0xB2, 0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[41] {0x178, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[75] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D, 0x2, 0x44, 0x57, 0x58, 0x6D, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[75] {0x14A, 0x14B, 0x7A, 0x7B, 0x14C, 0x14D, 0x14E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0xED, 0x12F, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0xED, 0x12F, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0xED, 0x12F, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0xED, 0x12F, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[43] {0x44, 0x56, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0x2, 0x57, 0x58, 0xA3, 0xB4},
                   new ushort[43] {0x179, 0x12F, 0x37, 0xB, 0x38, 0x39, 0x3A, 0x3B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x6, 0x8, 0x9, 0x23, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0xED, 0x12F, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0xED, 0x12F, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0xED, 0x12F, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0xED, 0x12F, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0xED, 0x12F, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0xED, 0x12F, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0xED, 0x12F, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0xED, 0x12F, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0xED, 0x12F, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0xED, 0x12F, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0xED, 0x12F, 0x130}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x6, 0x7, 0x8, 0x9, 0x37, 0xB, 0x38, 0x39, 0x3A, 0x3B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0x117, 0x136, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0x117, 0x136, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0x117, 0x136, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0x117, 0x136, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[43] {0x44, 0x56, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0x2, 0x57, 0x58, 0xA3, 0xB4},
                   new ushort[43] {0x17A, 0x136, 0xEF, 0xA7, 0xF0, 0xF1, 0xF2, 0xF3, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xA3, 0xA5, 0xA6, 0xBB, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0x117, 0x136, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0x117, 0x136, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0x117, 0x136, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0x117, 0x136, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0x117, 0x136, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0x117, 0x136, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0x117, 0x136, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0x117, 0x136, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0x117, 0x136, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0x117, 0x136, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[3] {0x44, 0x56, 0x6D},
                   new ushort[3] {0x117, 0x136, 0x137}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[41] {0x6D, 0xB1, 0xB2, 0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[41] {0x17B, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[75] {0x8C, 0x8D, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D, 0x8A, 0x8B, 0x73, 0x74, 0x6C, 0x2, 0x44, 0x57, 0x58, 0x6D, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[75] {0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0xA3, 0xA4, 0xA5, 0xA6, 0xEF, 0xA7, 0xF0, 0xF1, 0xF2, 0xF3, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x13},
                   new ushort[1] {0x17C}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[1] {0x13},
                   new ushort[1] {0x17D}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0xA3, 0xA4, 0xA5, 0xA6, 0xEF, 0xA7, 0xF0, 0xF1, 0xF2, 0xF3, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[43] {0x44, 0x56, 0x6C, 0x6D, 0x2, 0x57, 0x58, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[43] {0x179, 0x12F, 0x12D, 0x12E, 0x6, 0x8, 0x9, 0x38, 0x39, 0x3A, 0x3B, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[43] {0x44, 0x56, 0x6C, 0x6D, 0x2, 0x57, 0x58, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[43] {0x17A, 0x136, 0x153, 0x154, 0xA3, 0xA5, 0xA6, 0xF0, 0xF1, 0xF2, 0xF3, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7}, 0xFFFF, new Rule())
               },
               new ushort[1] {0x45},
               new ushort[1] {0xBB})
            , new State(
               new string[2] {"[type_simple_integral → sbyte •, [/)]", "[type_predefined → sbyte •, .]"},
               new Terminal[3] {new Terminal("_T[.]", 0x44), new Terminal("_T[[]", 0x56), new Terminal("_T[)]", 0x6D)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x1, 0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0xC])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x23])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[2] {"[type_simple_integral → byte •, [/)]", "[type_predefined → byte •, .]"},
               new Terminal[3] {new Terminal("_T[.]", 0x44), new Terminal("_T[[]", 0x56), new Terminal("_T[)]", 0x6D)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x1, 0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0xD])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x1B])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[2] {"[type_simple_integral → short •, [/)]", "[type_predefined → short •, .]"},
               new Terminal[3] {new Terminal("_T[.]", 0x44), new Terminal("_T[[]", 0x56), new Terminal("_T[)]", 0x6D)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x1, 0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0xE])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x24])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[2] {"[type_simple_integral → ushort •, [/)]", "[type_predefined → ushort •, .]"},
               new Terminal[3] {new Terminal("_T[.]", 0x44), new Terminal("_T[[]", 0x56), new Terminal("_T[)]", 0x6D)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x1, 0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0xF])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x28])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[2] {"[type_simple_integral → int •, [/)]", "[type_predefined → int •, .]"},
               new Terminal[3] {new Terminal("_T[.]", 0x44), new Terminal("_T[[]", 0x56), new Terminal("_T[)]", 0x6D)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x1, 0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x10])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x20])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[2] {"[type_simple_integral → uint •, [/)]", "[type_predefined → uint •, .]"},
               new Terminal[3] {new Terminal("_T[.]", 0x44), new Terminal("_T[[]", 0x56), new Terminal("_T[)]", 0x6D)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x1, 0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x11])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x26])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[2] {"[type_simple_integral → long •, [/)]", "[type_predefined → long •, .]"},
               new Terminal[3] {new Terminal("_T[.]", 0x44), new Terminal("_T[[]", 0x56), new Terminal("_T[)]", 0x6D)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x1, 0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x12])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x21])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[2] {"[type_simple_integral → ulong •, [/)]", "[type_predefined → ulong •, .]"},
               new Terminal[3] {new Terminal("_T[.]", 0x44), new Terminal("_T[[]", 0x56), new Terminal("_T[)]", 0x6D)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x1, 0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x13])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x27])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[2] {"[type_simple_integral → char •, [/)]", "[type_predefined → char •, .]"},
               new Terminal[3] {new Terminal("_T[.]", 0x44), new Terminal("_T[[]", 0x56), new Terminal("_T[)]", 0x6D)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x1, 0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x14])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x1C])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[2] {"[type_simple_float → float •, [/)]", "[type_predefined → float •, .]"},
               new Terminal[3] {new Terminal("_T[.]", 0x44), new Terminal("_T[[]", 0x56), new Terminal("_T[)]", 0x6D)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x1, 0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x15])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x1F])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[2] {"[type_simple_float → double •, [/)]", "[type_predefined → double •, .]"},
               new Terminal[3] {new Terminal("_T[.]", 0x44), new Terminal("_T[[]", 0x56), new Terminal("_T[)]", 0x6D)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6D, 0x44},
                   new ushort[3] {0x1, 0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x16])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x1E])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[89] {"[exp_op8 → exp_op8 ^ • exp_op7, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op7 → • exp_op6, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op7 → • exp_op7 & exp_op6, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op6 → • exp_op5, $/]/,/)/==/!=/^/|/&&/||/?/:/}]", "[exp_op6 → • exp_op6 == exp_op5, $/]/,/)/==/!=/^/|/&&/||/?/:/}]", "[exp_op6 → • exp_op6 != exp_op5, $/]/,/)/==/!=/^/|/&&/||/?/:/}]", "[exp_op5 → • exp_op4, $/]/,/)/</<=/>/>=/is/as/^/|/&&/||/?/:/}]", "[exp_op5 → • exp_op5 < exp_op4, $/]/,/)/</<=/>/>=/is/as/^/|/&&/||/?/:/}]", "[exp_op5 → • exp_op5 <= exp_op4, $/]/,/)/</<=/>/>=/is/as/^/|/&&/||/?/:/}]", "[exp_op5 → • exp_op5 > exp_op4, $/]/,/)/</<=/>/>=/is/as/^/|/&&/||/?/:/}]", "[exp_op5 → • exp_op5 >= exp_op4, $/]/,/)/</<=/>/>=/is/as/^/|/&&/||/?/:/}]", "[exp_op5 → • exp_op5 is exp_op4, $/]/,/)/</<=/>/>=/is/as/^/|/&&/||/?/:/}]", "[exp_op5 → • exp_op5 as exp_op4, $/]/,/)/</<=/>/>=/is/as/^/|/&&/||/?/:/}]", "[exp_op4 → • exp_op3, $/]/,/)/<</>>/^/|/&&/||/?/:/}]", "[exp_op4 → • exp_op4 << exp_op3, $/]/,/)/<</>>/^/|/&&/||/?/:/}]", "[exp_op4 → • exp_op4 >> exp_op3, $/]/,/)/<</>>/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op2, $/]/,/)/+/-/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op3 + exp_op2, $/]/,/)/+/-/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op3 - exp_op2, $/]/,/)/+/-/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op1, $/]/,/)/*///%/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 * exp_op1, $/]/,/)/*///%/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 / exp_op1, $/]/,/)/*///%/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 % exp_op1, $/]/,/)/*///%/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op1 → • + exp_op1, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op1 → • - exp_op1, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_no_array, $/./]/,/(/)/++/--/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_array_creation, $/./]/,/(/)/++/--/^/|/&&/||/?/:/}]", "[exp_op1_pre_increment → • ++ exp_op1, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op1_pre_decrement → • -- exp_op1, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op1_cast → • ( type ) exp_op1, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_atom, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_invoke, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_obj_creation, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_increment, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_decrement, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_member_access, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_typeof, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_checked, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_unchecked, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_array array_initializer, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_atom → • NULL_LITTERAL, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_HEXA, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_atom → • REAL_LITTERAL, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_atom → • CHARACTER_LITTERAL, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_REGULAR, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_VERBATIM, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_atom → • IDENTIFIER, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_atom → • this, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_atom → • base, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_atom → • ( expression ), $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( ), $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( ), $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op0_post_increment → • exp_op0 ++, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op0_post_decrement → • exp_op0 --, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op0_typeof → • typeof ( type_return ), $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op0_checked → • checked ( expression ), $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op0_unchecked → • unchecked ( expression ), $/]/,/)/^/|/&&/||/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[23] {0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2c, 0x2d, 0x2e, 0x2f, 0x2b, 0x2a, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x1e},
               new ushort[23] {0xBD, 0x31, 0x41, 0x42, 0x43, 0x44, 0xA2, 0x7, 0xC, 0xD, 0xE, 0x10, 0x11, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x2D})
            , new State(
               new string[7] {"[exp_op0_array_creation → new type_non_array • [ exp_expression_list ] type_array_rank array_initializer, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → new type_non_array • [ exp_expression_list ] type_array_rank, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → new type_non_array • [ exp_expression_list ] array_initializer, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → new type_non_array • [ exp_expression_list ], $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[type_array → type_non_array • type_array_rank _m85, (/{]", "[type → type_non_array •, (]", "[type_array_rank → • [ type_array_rank_dim ], [/(/{]"},
               new Terminal[2] {new Terminal("_T[[]", 0x56), new Terminal("_T[(]", 0x6C)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[2] {0x56, 0x6C},
                   new ushort[2] {0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xBE, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x1])
               },
               new ushort[1] {0x1c},
               new ushort[1] {0xB9})
            , new State(
               new string[3] {"[exp_op0_array_creation → new type_array • array_initializer, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[type → type_array •, (]", "[array_initializer → • { variable_initializer_list }, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[2] {new Terminal("_T[(]", 0x6C), new Terminal("_T[{]", 0xB3)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[2] {0x6C, 0xB3},
                   new ushort[2] {0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x2])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xC0, new Rule())
               },
               new ushort[1] {0x41},
               new ushort[1] {0xBF})
            , new State(
               new string[2] {"[exp_op0_obj_creation → new type • ( exp_argument_list ), $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_obj_creation → new type • ( ), $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[1] {new Terminal("_T[(]", 0x6C)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x6C},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xC1, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_object → object •, [/(/)]"},
               new Terminal[3] {new Terminal("_T[[]", 0x56), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x5])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_object → string •, [/(/)]"},
               new Terminal[3] {new Terminal("_T[[]", 0x56), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x6])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_simple → bool •, [/(/)]"},
               new Terminal[3] {new Terminal("_T[[]", 0x56), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x8])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_simple → decimal •, [/(/)]"},
               new Terminal[3] {new Terminal("_T[[]", 0x56), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x9])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[3] {"[qualified_name → IDENTIFIER • _m69, [/(/)]", "[_m69 → • . IDENTIFIER _m69, [/(/)]", "[_m69 → •, [/(/)]"},
               new Terminal[4] {new Terminal("_T[.]", 0x44), new Terminal("_T[[]", 0x56), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[4] {0x44, 0x56, 0x6C, 0x6D},
                   new ushort[4] {0x1, 0x2, 0x2, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xBC, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x9A])
               },
               new ushort[1] {0x45},
               new ushort[1] {0xBB})
            , new State(
               new string[1] {"[type_simple_integral → sbyte •, [/(/)]"},
               new Terminal[3] {new Terminal("_T[[]", 0x56), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0xC])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_simple_integral → byte •, [/(/)]"},
               new Terminal[3] {new Terminal("_T[[]", 0x56), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0xD])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_simple_integral → short •, [/(/)]"},
               new Terminal[3] {new Terminal("_T[[]", 0x56), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0xE])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_simple_integral → ushort •, [/(/)]"},
               new Terminal[3] {new Terminal("_T[[]", 0x56), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0xF])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_simple_integral → int •, [/(/)]"},
               new Terminal[3] {new Terminal("_T[[]", 0x56), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x10])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_simple_integral → uint •, [/(/)]"},
               new Terminal[3] {new Terminal("_T[[]", 0x56), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x11])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_simple_integral → long •, [/(/)]"},
               new Terminal[3] {new Terminal("_T[[]", 0x56), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x12])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_simple_integral → ulong •, [/(/)]"},
               new Terminal[3] {new Terminal("_T[[]", 0x56), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x13])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_simple_integral → char •, [/(/)]"},
               new Terminal[3] {new Terminal("_T[[]", 0x56), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x14])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_simple_float → float •, [/(/)]"},
               new Terminal[3] {new Terminal("_T[[]", 0x56), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x15])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_simple_float → double •, [/(/)]"},
               new Terminal[3] {new Terminal("_T[[]", 0x56), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x16])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[87] {"[exp_op7 → exp_op7 & • exp_op6, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op6 → • exp_op5, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op6 → • exp_op6 == exp_op5, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op6 → • exp_op6 != exp_op5, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → • exp_op4, $/]/,/)/</<=/>/>=/is/as/&/^/|/&&/||/?/:/}]", "[exp_op5 → • exp_op5 < exp_op4, $/]/,/)/</<=/>/>=/is/as/&/^/|/&&/||/?/:/}]", "[exp_op5 → • exp_op5 <= exp_op4, $/]/,/)/</<=/>/>=/is/as/&/^/|/&&/||/?/:/}]", "[exp_op5 → • exp_op5 > exp_op4, $/]/,/)/</<=/>/>=/is/as/&/^/|/&&/||/?/:/}]", "[exp_op5 → • exp_op5 >= exp_op4, $/]/,/)/</<=/>/>=/is/as/&/^/|/&&/||/?/:/}]", "[exp_op5 → • exp_op5 is exp_op4, $/]/,/)/</<=/>/>=/is/as/&/^/|/&&/||/?/:/}]", "[exp_op5 → • exp_op5 as exp_op4, $/]/,/)/</<=/>/>=/is/as/&/^/|/&&/||/?/:/}]", "[exp_op4 → • exp_op3, $/]/,/)/<</>>/&/^/|/&&/||/?/:/}]", "[exp_op4 → • exp_op4 << exp_op3, $/]/,/)/<</>>/&/^/|/&&/||/?/:/}]", "[exp_op4 → • exp_op4 >> exp_op3, $/]/,/)/<</>>/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op2, $/]/,/)/+/-/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op3 + exp_op2, $/]/,/)/+/-/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op3 - exp_op2, $/]/,/)/+/-/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op1, $/]/,/)/*///%/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 * exp_op1, $/]/,/)/*///%/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 / exp_op1, $/]/,/)/*///%/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 % exp_op1, $/]/,/)/*///%/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op1 → • + exp_op1, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op1 → • - exp_op1, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_no_array, $/./]/,/(/)/++/--/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_array_creation, $/./]/,/(/)/++/--/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_increment → • ++ exp_op1, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_decrement → • -- exp_op1, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op1_cast → • ( type ) exp_op1, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_atom, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_invoke, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_obj_creation, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_increment, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_decrement, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_member_access, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_typeof, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_checked, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_unchecked, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_array array_initializer, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_atom → • NULL_LITTERAL, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_HEXA, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_atom → • REAL_LITTERAL, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_atom → • CHARACTER_LITTERAL, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_REGULAR, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_VERBATIM, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_atom → • IDENTIFIER, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_atom → • this, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_atom → • base, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_atom → • ( expression ), $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( ), $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( ), $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op0_post_increment → • exp_op0 ++, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op0_post_decrement → • exp_op0 --, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op0_typeof → • typeof ( type_return ), $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op0_checked → • checked ( expression ), $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op0_unchecked → • unchecked ( expression ), $/]/,/)/&/^/|/&&/||/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[22] {0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x2c, 0x2d, 0x2e, 0x2f, 0x2b, 0x2a, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x1e},
               new ushort[22] {0xC2, 0x41, 0x42, 0x43, 0x44, 0xA2, 0x7, 0xC, 0xD, 0xE, 0x10, 0x11, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x2D})
            , new State(
               new string[1] {"[exp_op0_member_access → type_predefined . • IDENTIFIER, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[1] {new Terminal("IDENTIFIER", 0x13)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x13},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xC3, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[27] {"[exp_op0_typeof → typeof ( • type_return ), $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[type_return → • void, )]", "[type_return → • type, )]", "[type → • type_non_array, )]", "[type → • type_array, )]", "[type_non_array → • type_object, [/)]", "[type_non_array → • type_simple, [/)]", "[type_array → • type_non_array type_array_rank _m85, )]", "[type_object → • object, )]", "[type_object → • string, )]", "[type_object → • qualified_name, )]", "[type_simple → • bool, )]", "[type_simple → • decimal, )]", "[type_simple → • type_simple_integral, )]", "[type_simple → • type_simple_float, )]", "[qualified_name → • IDENTIFIER _m69, )]", "[type_simple_integral → • sbyte, )]", "[type_simple_integral → • byte, )]", "[type_simple_integral → • short, )]", "[type_simple_integral → • ushort, )]", "[type_simple_integral → • int, )]", "[type_simple_integral → • uint, )]", "[type_simple_integral → • long, )]", "[type_simple_integral → • ulong, )]", "[type_simple_integral → • char, )]", "[type_simple_float → • float, )]", "[type_simple_float → • double, )]"},
               new Terminal[17] {new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[void]", 0x69)},
               new DeciderState[18] {
                   new DeciderState(
                   new ushort[17] {0x69, 0x46, 0x47, 0x48, 0x49, 0x13, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54},
                   new ushort[17] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xC5, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x7C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x7D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x7E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x7F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x80, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x81, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x82, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x83, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x84, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x85, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x86, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x87, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x88, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x89, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8B, new Rule())
               },
               new ushort[9] {0x1f, 0x15, 0x16, 0x1b, 0x17, 0x18, 0x14, 0x19, 0x1a},
               new ushort[9] {0xC4, 0xC6, 0x61, 0x62, 0x63, 0x64, 0x67, 0x6A, 0x6B})
            , new State(
               new string[112] {"[exp_op0_checked → checked ( • expression ), $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[expression → • exp_op12_conditional, )]", "[expression → • exp_op13_assigment, )]", "[exp_op12_conditional → • exp_op11, )]", "[exp_op12_conditional → • exp_op11 ? expression : expression, )]", "[exp_op13_assigment → • exp_op1 = expression, )]", "[exp_op13_assigment → • exp_op1 += expression, )]", "[exp_op13_assigment → • exp_op1 -= expression, )]", "[exp_op13_assigment → • exp_op1 *= expression, )]", "[exp_op13_assigment → • exp_op1 /= expression, )]", "[exp_op13_assigment → • exp_op1 %= expression, )]", "[exp_op13_assigment → • exp_op1 &= expression, )]", "[exp_op13_assigment → • exp_op1 |= expression, )]", "[exp_op13_assigment → • exp_op1 ^= expression, )]", "[exp_op13_assigment → • exp_op1 <<= expression, )]", "[exp_op13_assigment → • exp_op1 >>= expression, )]", "[exp_op11 → • exp_op10, )/||/?]", "[exp_op11 → • exp_op11 || exp_op10, )/||/?]", "[exp_op1 → • exp_op0, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • + exp_op1, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • - exp_op1, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • ! exp_op1, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • ~ exp_op1, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_pre_increment, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_pre_decrement, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_cast, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op10 → • exp_op9, )/&&/?]", "[exp_op10 → • exp_op10 && exp_op9, )/&&/?]", "[exp_op0 → • exp_op0_no_array, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0 → • exp_op0_array_creation, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_increment → • ++ exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_decrement → • -- exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_cast → • ( type ) exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op9 → • exp_op8, )/|/?]", "[exp_op9 → • exp_op9 | exp_op8, )/|/?]", "[exp_op0_no_array → • exp_atom, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_invoke, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_obj_creation, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_increment, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_decrement, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_member_access, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_typeof, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_checked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_unchecked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_array array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op8 → • exp_op7, )/^/?]", "[exp_op8 → • exp_op8 ^ exp_op7, )/^/?]", "[exp_atom → • NULL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_HEXA, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • REAL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • CHARACTER_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_REGULAR, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_VERBATIM, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • this, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • base, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_increment → • exp_op0 ++, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_decrement → • exp_op0 --, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_typeof → • typeof ( type_return ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_checked → • checked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_unchecked → • unchecked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op7 → • exp_op6, )/&/?]", "[exp_op7 → • exp_op7 & exp_op6, )/&/?]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]", "[exp_op6 → • exp_op5, )/==/!=/?]", "[exp_op6 → • exp_op6 == exp_op5, )/==/!=/?]", "[exp_op6 → • exp_op6 != exp_op5, )/==/!=/?]", "[exp_op5 → • exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 < exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 <= exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 > exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 >= exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 is exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 as exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op4 → • exp_op3, )/<</>>/?]", "[exp_op4 → • exp_op4 << exp_op3, )/<</>>/?]", "[exp_op4 → • exp_op4 >> exp_op3, )/<</>>/?]", "[exp_op3 → • exp_op2, )/+/-/?]", "[exp_op3 → • exp_op3 + exp_op2, )/+/-/?]", "[exp_op3 → • exp_op3 - exp_op2, )/+/-/?]", "[exp_op2 → • exp_op1, )/*///%/?]", "[exp_op2 → • exp_op2 * exp_op1, )/*///%/?]", "[exp_op2 → • exp_op2 / exp_op1, )/*///%/?]", "[exp_op2 → • exp_op2 % exp_op1, )/*///%/?]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[30] {0x3d, 0x3b, 0x3c, 0x3a, 0x30, 0x39, 0x2c, 0x2d, 0x2e, 0x2f, 0x38, 0x2b, 0x2a, 0x37, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x36, 0x1e, 0x35, 0x34, 0x33, 0x32, 0x31},
               new ushort[30] {0xC7, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x20, 0x2D, 0x31, 0x41, 0x42, 0x43, 0x44})
            , new State(
               new string[112] {"[exp_op0_unchecked → unchecked ( • expression ), $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[expression → • exp_op12_conditional, )]", "[expression → • exp_op13_assigment, )]", "[exp_op12_conditional → • exp_op11, )]", "[exp_op12_conditional → • exp_op11 ? expression : expression, )]", "[exp_op13_assigment → • exp_op1 = expression, )]", "[exp_op13_assigment → • exp_op1 += expression, )]", "[exp_op13_assigment → • exp_op1 -= expression, )]", "[exp_op13_assigment → • exp_op1 *= expression, )]", "[exp_op13_assigment → • exp_op1 /= expression, )]", "[exp_op13_assigment → • exp_op1 %= expression, )]", "[exp_op13_assigment → • exp_op1 &= expression, )]", "[exp_op13_assigment → • exp_op1 |= expression, )]", "[exp_op13_assigment → • exp_op1 ^= expression, )]", "[exp_op13_assigment → • exp_op1 <<= expression, )]", "[exp_op13_assigment → • exp_op1 >>= expression, )]", "[exp_op11 → • exp_op10, )/||/?]", "[exp_op11 → • exp_op11 || exp_op10, )/||/?]", "[exp_op1 → • exp_op0, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • + exp_op1, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • - exp_op1, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • ! exp_op1, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • ~ exp_op1, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_pre_increment, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_pre_decrement, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_cast, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op10 → • exp_op9, )/&&/?]", "[exp_op10 → • exp_op10 && exp_op9, )/&&/?]", "[exp_op0 → • exp_op0_no_array, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0 → • exp_op0_array_creation, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_increment → • ++ exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_decrement → • -- exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_cast → • ( type ) exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op9 → • exp_op8, )/|/?]", "[exp_op9 → • exp_op9 | exp_op8, )/|/?]", "[exp_op0_no_array → • exp_atom, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_invoke, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_obj_creation, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_increment, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_decrement, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_member_access, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_typeof, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_checked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_unchecked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_array array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op8 → • exp_op7, )/^/?]", "[exp_op8 → • exp_op8 ^ exp_op7, )/^/?]", "[exp_atom → • NULL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_HEXA, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • REAL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • CHARACTER_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_REGULAR, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_VERBATIM, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • this, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • base, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_increment → • exp_op0 ++, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_decrement → • exp_op0 --, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_typeof → • typeof ( type_return ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_checked → • checked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_unchecked → • unchecked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op7 → • exp_op6, )/&/?]", "[exp_op7 → • exp_op7 & exp_op6, )/&/?]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]", "[exp_op6 → • exp_op5, )/==/!=/?]", "[exp_op6 → • exp_op6 == exp_op5, )/==/!=/?]", "[exp_op6 → • exp_op6 != exp_op5, )/==/!=/?]", "[exp_op5 → • exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 < exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 <= exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 > exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 >= exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 is exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 as exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op4 → • exp_op3, )/<</>>/?]", "[exp_op4 → • exp_op4 << exp_op3, )/<</>>/?]", "[exp_op4 → • exp_op4 >> exp_op3, )/<</>>/?]", "[exp_op3 → • exp_op2, )/+/-/?]", "[exp_op3 → • exp_op3 + exp_op2, )/+/-/?]", "[exp_op3 → • exp_op3 - exp_op2, )/+/-/?]", "[exp_op2 → • exp_op1, )/*///%/?]", "[exp_op2 → • exp_op2 * exp_op1, )/*///%/?]", "[exp_op2 → • exp_op2 / exp_op1, )/*///%/?]", "[exp_op2 → • exp_op2 % exp_op1, )/*///%/?]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[30] {0x3d, 0x3b, 0x3c, 0x3a, 0x30, 0x39, 0x2c, 0x2d, 0x2e, 0x2f, 0x38, 0x2b, 0x2a, 0x37, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x36, 0x1e, 0x35, 0x34, 0x33, 0x32, 0x31},
               new ushort[30] {0xC8, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x20, 0x2D, 0x31, 0x41, 0x42, 0x43, 0x44})
            , new State(
               new string[84] {"[exp_op6 → exp_op6 == • exp_op5, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → • exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → • exp_op5 < exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → • exp_op5 <= exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → • exp_op5 > exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → • exp_op5 >= exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → • exp_op5 is exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → • exp_op5 as exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → • exp_op3, $/]/,/)/<</>>/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → • exp_op4 << exp_op3, $/]/,/)/<</>>/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → • exp_op4 >> exp_op3, $/]/,/)/<</>>/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op2, $/]/,/)/+/-/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op3 + exp_op2, $/]/,/)/+/-/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op3 - exp_op2, $/]/,/)/+/-/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op1, $/]/,/)/*///%/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 * exp_op1, $/]/,/)/*///%/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 / exp_op1, $/]/,/)/*///%/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 % exp_op1, $/]/,/)/*///%/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • + exp_op1, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • - exp_op1, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_no_array, $/./]/,/(/)/++/--/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_array_creation, $/./]/,/(/)/++/--/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_increment → • ++ exp_op1, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_decrement → • -- exp_op1, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_cast → • ( type ) exp_op1, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_atom, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_invoke, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_obj_creation, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_increment, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_decrement, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_member_access, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_typeof, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_checked, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_unchecked, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_array array_initializer, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • NULL_LITTERAL, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_HEXA, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • REAL_LITTERAL, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • CHARACTER_LITTERAL, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_REGULAR, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_VERBATIM, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • IDENTIFIER, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • this, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • base, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • ( expression ), $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( ), $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( ), $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_post_increment → • exp_op0 ++, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_post_decrement → • exp_op0 --, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_typeof → • typeof ( type_return ), $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_checked → • checked ( expression ), $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_unchecked → • unchecked ( expression ), $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[21] {0x34, 0x33, 0x32, 0x31, 0x30, 0x2c, 0x2d, 0x2e, 0x2f, 0x2b, 0x2a, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x1e},
               new ushort[21] {0xC9, 0x42, 0x43, 0x44, 0xA2, 0x7, 0xC, 0xD, 0xE, 0x10, 0x11, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x2D})
            , new State(
               new string[84] {"[exp_op6 → exp_op6 != • exp_op5, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → • exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → • exp_op5 < exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → • exp_op5 <= exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → • exp_op5 > exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → • exp_op5 >= exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → • exp_op5 is exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → • exp_op5 as exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → • exp_op3, $/]/,/)/<</>>/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → • exp_op4 << exp_op3, $/]/,/)/<</>>/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → • exp_op4 >> exp_op3, $/]/,/)/<</>>/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op2, $/]/,/)/+/-/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op3 + exp_op2, $/]/,/)/+/-/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op3 - exp_op2, $/]/,/)/+/-/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op1, $/]/,/)/*///%/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 * exp_op1, $/]/,/)/*///%/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 / exp_op1, $/]/,/)/*///%/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 % exp_op1, $/]/,/)/*///%/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • + exp_op1, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • - exp_op1, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_no_array, $/./]/,/(/)/++/--/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_array_creation, $/./]/,/(/)/++/--/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_increment → • ++ exp_op1, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_decrement → • -- exp_op1, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_cast → • ( type ) exp_op1, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_atom, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_invoke, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_obj_creation, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_increment, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_decrement, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_member_access, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_typeof, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_checked, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_unchecked, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_array array_initializer, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • NULL_LITTERAL, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_HEXA, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • REAL_LITTERAL, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • CHARACTER_LITTERAL, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_REGULAR, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_VERBATIM, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • IDENTIFIER, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • this, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • base, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • ( expression ), $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( ), $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( ), $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_post_increment → • exp_op0 ++, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_post_decrement → • exp_op0 --, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_typeof → • typeof ( type_return ), $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_checked → • checked ( expression ), $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_unchecked → • unchecked ( expression ), $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[21] {0x34, 0x33, 0x32, 0x31, 0x30, 0x2c, 0x2d, 0x2e, 0x2f, 0x2b, 0x2a, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x1e},
               new ushort[21] {0xCA, 0x42, 0x43, 0x44, 0xA2, 0x7, 0xC, 0xD, 0xE, 0x10, 0x11, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x2D})
            , new State(
               new string[77] {"[exp_op5 → exp_op5 < • exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → • exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → • exp_op4 << exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → • exp_op4 >> exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op2, $/]/,/)/+/-/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op3 + exp_op2, $/]/,/)/+/-/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op3 - exp_op2, $/]/,/)/+/-/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op1, $/]/,/)/*///%/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 * exp_op1, $/]/,/)/*///%/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 / exp_op1, $/]/,/)/*///%/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 % exp_op1, $/]/,/)/*///%/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • + exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • - exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_no_array, $/./]/,/(/)/++/--/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_array_creation, $/./]/,/(/)/++/--/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_increment → • ++ exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_decrement → • -- exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_cast → • ( type ) exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_atom, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_invoke, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_obj_creation, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_increment, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_decrement, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_member_access, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_typeof, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_checked, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_unchecked, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_array array_initializer, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • NULL_LITTERAL, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_HEXA, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • REAL_LITTERAL, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • CHARACTER_LITTERAL, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_REGULAR, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_VERBATIM, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • IDENTIFIER, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • this, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • base, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • ( expression ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_post_increment → • exp_op0 ++, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_post_decrement → • exp_op0 --, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_typeof → • typeof ( type_return ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_checked → • checked ( expression ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_unchecked → • unchecked ( expression ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[20] {0x33, 0x32, 0x31, 0x30, 0x2c, 0x2d, 0x2e, 0x2f, 0x2b, 0x2a, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x1e},
               new ushort[20] {0xCB, 0x43, 0x44, 0xA2, 0x7, 0xC, 0xD, 0xE, 0x10, 0x11, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x2D})
            , new State(
               new string[77] {"[exp_op5 → exp_op5 <= • exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → • exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → • exp_op4 << exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → • exp_op4 >> exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op2, $/]/,/)/+/-/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op3 + exp_op2, $/]/,/)/+/-/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op3 - exp_op2, $/]/,/)/+/-/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op1, $/]/,/)/*///%/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 * exp_op1, $/]/,/)/*///%/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 / exp_op1, $/]/,/)/*///%/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 % exp_op1, $/]/,/)/*///%/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • + exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • - exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_no_array, $/./]/,/(/)/++/--/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_array_creation, $/./]/,/(/)/++/--/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_increment → • ++ exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_decrement → • -- exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_cast → • ( type ) exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_atom, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_invoke, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_obj_creation, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_increment, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_decrement, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_member_access, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_typeof, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_checked, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_unchecked, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_array array_initializer, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • NULL_LITTERAL, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_HEXA, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • REAL_LITTERAL, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • CHARACTER_LITTERAL, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_REGULAR, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_VERBATIM, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • IDENTIFIER, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • this, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • base, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • ( expression ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_post_increment → • exp_op0 ++, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_post_decrement → • exp_op0 --, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_typeof → • typeof ( type_return ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_checked → • checked ( expression ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_unchecked → • unchecked ( expression ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[20] {0x33, 0x32, 0x31, 0x30, 0x2c, 0x2d, 0x2e, 0x2f, 0x2b, 0x2a, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x1e},
               new ushort[20] {0xCC, 0x43, 0x44, 0xA2, 0x7, 0xC, 0xD, 0xE, 0x10, 0x11, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x2D})
            , new State(
               new string[77] {"[exp_op5 → exp_op5 > • exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → • exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → • exp_op4 << exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → • exp_op4 >> exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op2, $/]/,/)/+/-/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op3 + exp_op2, $/]/,/)/+/-/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op3 - exp_op2, $/]/,/)/+/-/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op1, $/]/,/)/*///%/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 * exp_op1, $/]/,/)/*///%/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 / exp_op1, $/]/,/)/*///%/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 % exp_op1, $/]/,/)/*///%/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • + exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • - exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_no_array, $/./]/,/(/)/++/--/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_array_creation, $/./]/,/(/)/++/--/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_increment → • ++ exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_decrement → • -- exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_cast → • ( type ) exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_atom, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_invoke, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_obj_creation, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_increment, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_decrement, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_member_access, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_typeof, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_checked, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_unchecked, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_array array_initializer, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • NULL_LITTERAL, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_HEXA, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • REAL_LITTERAL, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • CHARACTER_LITTERAL, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_REGULAR, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_VERBATIM, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • IDENTIFIER, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • this, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • base, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • ( expression ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_post_increment → • exp_op0 ++, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_post_decrement → • exp_op0 --, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_typeof → • typeof ( type_return ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_checked → • checked ( expression ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_unchecked → • unchecked ( expression ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[20] {0x33, 0x32, 0x31, 0x30, 0x2c, 0x2d, 0x2e, 0x2f, 0x2b, 0x2a, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x1e},
               new ushort[20] {0xCD, 0x43, 0x44, 0xA2, 0x7, 0xC, 0xD, 0xE, 0x10, 0x11, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x2D})
            , new State(
               new string[77] {"[exp_op5 → exp_op5 >= • exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → • exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → • exp_op4 << exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → • exp_op4 >> exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op2, $/]/,/)/+/-/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op3 + exp_op2, $/]/,/)/+/-/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op3 - exp_op2, $/]/,/)/+/-/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op1, $/]/,/)/*///%/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 * exp_op1, $/]/,/)/*///%/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 / exp_op1, $/]/,/)/*///%/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 % exp_op1, $/]/,/)/*///%/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • + exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • - exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_no_array, $/./]/,/(/)/++/--/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_array_creation, $/./]/,/(/)/++/--/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_increment → • ++ exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_decrement → • -- exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_cast → • ( type ) exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_atom, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_invoke, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_obj_creation, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_increment, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_decrement, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_member_access, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_typeof, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_checked, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_unchecked, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_array array_initializer, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • NULL_LITTERAL, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_HEXA, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • REAL_LITTERAL, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • CHARACTER_LITTERAL, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_REGULAR, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_VERBATIM, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • IDENTIFIER, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • this, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • base, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • ( expression ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_post_increment → • exp_op0 ++, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_post_decrement → • exp_op0 --, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_typeof → • typeof ( type_return ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_checked → • checked ( expression ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_unchecked → • unchecked ( expression ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[20] {0x33, 0x32, 0x31, 0x30, 0x2c, 0x2d, 0x2e, 0x2f, 0x2b, 0x2a, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x1e},
               new ushort[20] {0xCE, 0x43, 0x44, 0xA2, 0x7, 0xC, 0xD, 0xE, 0x10, 0x11, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x2D})
            , new State(
               new string[77] {"[exp_op5 → exp_op5 is • exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → • exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → • exp_op4 << exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → • exp_op4 >> exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op2, $/]/,/)/+/-/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op3 + exp_op2, $/]/,/)/+/-/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op3 - exp_op2, $/]/,/)/+/-/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op1, $/]/,/)/*///%/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 * exp_op1, $/]/,/)/*///%/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 / exp_op1, $/]/,/)/*///%/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 % exp_op1, $/]/,/)/*///%/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • + exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • - exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_no_array, $/./]/,/(/)/++/--/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_array_creation, $/./]/,/(/)/++/--/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_increment → • ++ exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_decrement → • -- exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_cast → • ( type ) exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_atom, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_invoke, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_obj_creation, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_increment, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_decrement, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_member_access, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_typeof, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_checked, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_unchecked, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_array array_initializer, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • NULL_LITTERAL, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_HEXA, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • REAL_LITTERAL, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • CHARACTER_LITTERAL, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_REGULAR, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_VERBATIM, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • IDENTIFIER, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • this, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • base, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • ( expression ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_post_increment → • exp_op0 ++, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_post_decrement → • exp_op0 --, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_typeof → • typeof ( type_return ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_checked → • checked ( expression ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_unchecked → • unchecked ( expression ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[20] {0x33, 0x32, 0x31, 0x30, 0x2c, 0x2d, 0x2e, 0x2f, 0x2b, 0x2a, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x1e},
               new ushort[20] {0xCF, 0x43, 0x44, 0xA2, 0x7, 0xC, 0xD, 0xE, 0x10, 0x11, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x2D})
            , new State(
               new string[77] {"[exp_op5 → exp_op5 as • exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → • exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → • exp_op4 << exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → • exp_op4 >> exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op2, $/]/,/)/+/-/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op3 + exp_op2, $/]/,/)/+/-/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op3 - exp_op2, $/]/,/)/+/-/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op1, $/]/,/)/*///%/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 * exp_op1, $/]/,/)/*///%/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 / exp_op1, $/]/,/)/*///%/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 % exp_op1, $/]/,/)/*///%/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • + exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • - exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_no_array, $/./]/,/(/)/++/--/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_array_creation, $/./]/,/(/)/++/--/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_increment → • ++ exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_decrement → • -- exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_cast → • ( type ) exp_op1, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_atom, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_invoke, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_obj_creation, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_increment, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_decrement, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_member_access, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_typeof, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_checked, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_unchecked, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_array array_initializer, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • NULL_LITTERAL, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_HEXA, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • REAL_LITTERAL, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • CHARACTER_LITTERAL, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_REGULAR, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_VERBATIM, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • IDENTIFIER, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • this, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • base, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • ( expression ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_post_increment → • exp_op0 ++, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_post_decrement → • exp_op0 --, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_typeof → • typeof ( type_return ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_checked → • checked ( expression ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_unchecked → • unchecked ( expression ), $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[20] {0x33, 0x32, 0x31, 0x30, 0x2c, 0x2d, 0x2e, 0x2f, 0x2b, 0x2a, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x1e},
               new ushort[20] {0xD0, 0x43, 0x44, 0xA2, 0x7, 0xC, 0xD, 0xE, 0x10, 0x11, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x2D})
            , new State(
               new string[74] {"[exp_op4 → exp_op4 << • exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op2, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op3 + exp_op2, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op3 - exp_op2, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op1, $/]/,/)/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 * exp_op1, $/]/,/)/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 / exp_op1, $/]/,/)/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 % exp_op1, $/]/,/)/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • + exp_op1, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • - exp_op1, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_no_array, $/./]/,/(/)/++/--/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_array_creation, $/./]/,/(/)/++/--/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_increment → • ++ exp_op1, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_decrement → • -- exp_op1, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_cast → • ( type ) exp_op1, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_atom, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_invoke, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_obj_creation, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_increment, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_decrement, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_member_access, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_typeof, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_checked, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_unchecked, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_array array_initializer, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • NULL_LITTERAL, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_HEXA, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • REAL_LITTERAL, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • CHARACTER_LITTERAL, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_REGULAR, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_VERBATIM, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • IDENTIFIER, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • this, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • base, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • ( expression ), $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( ), $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( ), $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_post_increment → • exp_op0 ++, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_post_decrement → • exp_op0 --, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_typeof → • typeof ( type_return ), $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_checked → • checked ( expression ), $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_unchecked → • unchecked ( expression ), $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[19] {0x32, 0x31, 0x30, 0x2c, 0x2d, 0x2e, 0x2f, 0x2b, 0x2a, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x1e},
               new ushort[19] {0xD1, 0x44, 0xA2, 0x7, 0xC, 0xD, 0xE, 0x10, 0x11, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x2D})
            , new State(
               new string[74] {"[exp_op4 → exp_op4 >> • exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op2, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op3 + exp_op2, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → • exp_op3 - exp_op2, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op1, $/]/,/)/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 * exp_op1, $/]/,/)/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 / exp_op1, $/]/,/)/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 % exp_op1, $/]/,/)/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • + exp_op1, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • - exp_op1, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_no_array, $/./]/,/(/)/++/--/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_array_creation, $/./]/,/(/)/++/--/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_increment → • ++ exp_op1, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_decrement → • -- exp_op1, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_cast → • ( type ) exp_op1, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_atom, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_invoke, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_obj_creation, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_increment, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_decrement, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_member_access, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_typeof, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_checked, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_unchecked, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_array array_initializer, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • NULL_LITTERAL, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_HEXA, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • REAL_LITTERAL, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • CHARACTER_LITTERAL, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_REGULAR, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_VERBATIM, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • IDENTIFIER, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • this, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • base, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • ( expression ), $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( ), $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( ), $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_post_increment → • exp_op0 ++, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_post_decrement → • exp_op0 --, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_typeof → • typeof ( type_return ), $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_checked → • checked ( expression ), $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_unchecked → • unchecked ( expression ), $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[19] {0x32, 0x31, 0x30, 0x2c, 0x2d, 0x2e, 0x2f, 0x2b, 0x2a, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x1e},
               new ushort[19] {0xD2, 0x44, 0xA2, 0x7, 0xC, 0xD, 0xE, 0x10, 0x11, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x2D})
            , new State(
               new string[71] {"[exp_op3 → exp_op3 + • exp_op2, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 * exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 / exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 % exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • + exp_op1, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • - exp_op1, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_no_array, $/./]/,/(/)/++/--/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_array_creation, $/./]/,/(/)/++/--/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_increment → • ++ exp_op1, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_decrement → • -- exp_op1, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_cast → • ( type ) exp_op1, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_atom, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_invoke, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_obj_creation, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_increment, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_decrement, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_member_access, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_typeof, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_checked, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_unchecked, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_array array_initializer, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • NULL_LITTERAL, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_HEXA, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • REAL_LITTERAL, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • CHARACTER_LITTERAL, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_REGULAR, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_VERBATIM, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • IDENTIFIER, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • this, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • base, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • ( expression ), $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( ), $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( ), $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_post_increment → • exp_op0 ++, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_post_decrement → • exp_op0 --, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_typeof → • typeof ( type_return ), $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_checked → • checked ( expression ), $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_unchecked → • unchecked ( expression ), $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[18] {0x31, 0x30, 0x2c, 0x2d, 0x2e, 0x2f, 0x2b, 0x2a, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x1e},
               new ushort[18] {0xD3, 0xA2, 0x7, 0xC, 0xD, 0xE, 0x10, 0x11, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x2D})
            , new State(
               new string[71] {"[exp_op3 → exp_op3 - • exp_op2, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 * exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 / exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → • exp_op2 % exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • + exp_op1, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • - exp_op1, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_no_array, $/./]/,/(/)/++/--/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_array_creation, $/./]/,/(/)/++/--/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_increment → • ++ exp_op1, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_decrement → • -- exp_op1, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_cast → • ( type ) exp_op1, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_atom, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_invoke, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_obj_creation, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_increment, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_decrement, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_member_access, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_typeof, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_checked, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_unchecked, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_array array_initializer, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • NULL_LITTERAL, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_HEXA, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • REAL_LITTERAL, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • CHARACTER_LITTERAL, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_REGULAR, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_VERBATIM, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • IDENTIFIER, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • this, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • base, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • ( expression ), $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( ), $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( ), $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_post_increment → • exp_op0 ++, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_post_decrement → • exp_op0 --, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_typeof → • typeof ( type_return ), $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_checked → • checked ( expression ), $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_unchecked → • unchecked ( expression ), $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[18] {0x31, 0x30, 0x2c, 0x2d, 0x2e, 0x2f, 0x2b, 0x2a, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x1e},
               new ushort[18] {0xD4, 0xA2, 0x7, 0xC, 0xD, 0xE, 0x10, 0x11, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x2D})
            , new State(
               new string[67] {"[exp_op2 → exp_op2 * • exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • + exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • - exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_no_array, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_array_creation, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_increment → • ++ exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_decrement → • -- exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_cast → • ( type ) exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_atom, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_invoke, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_obj_creation, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_increment, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_decrement, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_member_access, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_typeof, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_checked, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_unchecked, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_array array_initializer, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • NULL_LITTERAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_HEXA, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • REAL_LITTERAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • CHARACTER_LITTERAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_REGULAR, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_VERBATIM, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • IDENTIFIER, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • this, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • base, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • ( expression ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_post_increment → • exp_op0 ++, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_post_decrement → • exp_op0 --, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_typeof → • typeof ( type_return ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_checked → • checked ( expression ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_unchecked → • unchecked ( expression ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[17] {0x30, 0x2c, 0x2d, 0x2e, 0x2f, 0x2b, 0x2a, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x1e},
               new ushort[17] {0xD5, 0x7, 0xC, 0xD, 0xE, 0x10, 0x11, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x2D})
            , new State(
               new string[67] {"[exp_op2 → exp_op2 / • exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • + exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • - exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_no_array, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_array_creation, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_increment → • ++ exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_decrement → • -- exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_cast → • ( type ) exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_atom, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_invoke, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_obj_creation, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_increment, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_decrement, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_member_access, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_typeof, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_checked, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_unchecked, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_array array_initializer, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • NULL_LITTERAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_HEXA, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • REAL_LITTERAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • CHARACTER_LITTERAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_REGULAR, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_VERBATIM, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • IDENTIFIER, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • this, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • base, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • ( expression ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_post_increment → • exp_op0 ++, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_post_decrement → • exp_op0 --, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_typeof → • typeof ( type_return ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_checked → • checked ( expression ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_unchecked → • unchecked ( expression ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[17] {0x30, 0x2c, 0x2d, 0x2e, 0x2f, 0x2b, 0x2a, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x1e},
               new ushort[17] {0xD6, 0x7, 0xC, 0xD, 0xE, 0x10, 0x11, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x2D})
            , new State(
               new string[67] {"[exp_op2 → exp_op2 % • exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • + exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • - exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_no_array, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0 → • exp_op0_array_creation, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_increment → • ++ exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_pre_decrement → • -- exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op1_cast → • ( type ) exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_atom, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_invoke, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_obj_creation, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_increment, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_post_decrement, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_member_access, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_typeof, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_checked, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_no_array → • exp_op0_unchecked, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_array_creation → • new type_array array_initializer, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • NULL_LITTERAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • INTEGER_LITTERAL_HEXA, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • REAL_LITTERAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • CHARACTER_LITTERAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_REGULAR, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • STRING_LITTERAL_VERBATIM, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • IDENTIFIER, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • this, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • base, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_atom → • ( expression ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_invoke → • exp_op0 ( ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_obj_creation → • new type ( ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_post_increment → • exp_op0 ++, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_post_decrement → • exp_op0 --, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_typeof → • typeof ( type_return ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_checked → • checked ( expression ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op0_unchecked → • unchecked ( expression ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[17] {0x30, 0x2c, 0x2d, 0x2e, 0x2f, 0x2b, 0x2a, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x1e},
               new ushort[17] {0xD7, 0x7, 0xC, 0xD, 0xE, 0x10, 0x11, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x2D})
            , new State(
               new string[1] {"[exp_op12_conditional → exp_op11 ? expression • : expression, $/]/,/)/:/}]"},
               new Terminal[1] {new Terminal("_T[:]", 0xA3)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0xA3},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xD8, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[2] {"[exp_op11 → exp_op11 || exp_op10 •, $/]/,/)/||/?/:/}]", "[exp_op10 → exp_op10 • && exp_op9, $/]/,/)/&&/||/?/:/}]"},
               new Terminal[9] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[9] {0x2, 0x57, 0x58, 0x6D, 0xA1, 0xA2, 0xA3, 0xB4, 0xA0},
                   new ushort[9] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x7D])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x53, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op2 → exp_op1 •, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]"},
               new Terminal[27] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[27] {0x2, 0x57, 0x58, 0x6D, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xB4},
                   new ushort[27] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x60])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op13_assigment → exp_op1 = expression •, $/]/,/)/:/}]"},
               new Terminal[6] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[6] {0x2, 0x57, 0x58, 0x6D, 0xA3, 0xB4},
                   new ushort[6] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x80])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op13_assigment → exp_op1 += expression •, $/]/,/)/:/}]"},
               new Terminal[6] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[6] {0x2, 0x57, 0x58, 0x6D, 0xA3, 0xB4},
                   new ushort[6] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x81])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op13_assigment → exp_op1 -= expression •, $/]/,/)/:/}]"},
               new Terminal[6] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[6] {0x2, 0x57, 0x58, 0x6D, 0xA3, 0xB4},
                   new ushort[6] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x82])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op13_assigment → exp_op1 *= expression •, $/]/,/)/:/}]"},
               new Terminal[6] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[6] {0x2, 0x57, 0x58, 0x6D, 0xA3, 0xB4},
                   new ushort[6] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x83])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op13_assigment → exp_op1 /= expression •, $/]/,/)/:/}]"},
               new Terminal[6] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[6] {0x2, 0x57, 0x58, 0x6D, 0xA3, 0xB4},
                   new ushort[6] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x84])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op13_assigment → exp_op1 %= expression •, $/]/,/)/:/}]"},
               new Terminal[6] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[6] {0x2, 0x57, 0x58, 0x6D, 0xA3, 0xB4},
                   new ushort[6] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x85])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op13_assigment → exp_op1 &= expression •, $/]/,/)/:/}]"},
               new Terminal[6] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[6] {0x2, 0x57, 0x58, 0x6D, 0xA3, 0xB4},
                   new ushort[6] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x86])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op13_assigment → exp_op1 |= expression •, $/]/,/)/:/}]"},
               new Terminal[6] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[6] {0x2, 0x57, 0x58, 0x6D, 0xA3, 0xB4},
                   new ushort[6] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x87])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op13_assigment → exp_op1 ^= expression •, $/]/,/)/:/}]"},
               new Terminal[6] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[6] {0x2, 0x57, 0x58, 0x6D, 0xA3, 0xB4},
                   new ushort[6] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x88])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op13_assigment → exp_op1 <<= expression •, $/]/,/)/:/}]"},
               new Terminal[6] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[6] {0x2, 0x57, 0x58, 0x6D, 0xA3, 0xB4},
                   new ushort[6] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x89])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op13_assigment → exp_op1 >>= expression •, $/]/,/)/:/}]"},
               new Terminal[6] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[6] {0x2, 0x57, 0x58, 0x6D, 0xA3, 0xB4},
                   new ushort[6] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x8A])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[2] {"[exp_op10 → exp_op10 && exp_op9 •, $/]/,/)/&&/||/?/:/}]", "[exp_op9 → exp_op9 • | exp_op8, $/]/,/)/|/&&/||/?/:/}]"},
               new Terminal[10] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[10] {0x2, 0x57, 0x58, 0x6D, 0xA0, 0xA1, 0xA2, 0xA3, 0xB4, 0x9F},
                   new ushort[10] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x7B])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x5C, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[2] {"[exp_op0_invoke → exp_op0 ( exp_argument_list • ), $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_argument_list → exp_argument_list • , exp_argument, ,/)]"},
               new Terminal[2] {new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[2] {0x6D, 0x58},
                   new ushort[2] {0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xD9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xDA, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op0_invoke → exp_op0 ( ) •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x39])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_argument_list → exp_argument •, ,/)]"},
               new Terminal[2] {new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[2] {0x58, 0x6D},
                   new ushort[2] {0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x8F])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_argument → expression •, ,/)]"},
               new Terminal[2] {new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[2] {0x58, 0x6D},
                   new ushort[2] {0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x91])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[112] {"[exp_argument → ref • expression, ,/)]", "[expression → • exp_op12_conditional, ,/)]", "[expression → • exp_op13_assigment, ,/)]", "[exp_op12_conditional → • exp_op11, ,/)]", "[exp_op12_conditional → • exp_op11 ? expression : expression, ,/)]", "[exp_op13_assigment → • exp_op1 = expression, ,/)]", "[exp_op13_assigment → • exp_op1 += expression, ,/)]", "[exp_op13_assigment → • exp_op1 -= expression, ,/)]", "[exp_op13_assigment → • exp_op1 *= expression, ,/)]", "[exp_op13_assigment → • exp_op1 /= expression, ,/)]", "[exp_op13_assigment → • exp_op1 %= expression, ,/)]", "[exp_op13_assigment → • exp_op1 &= expression, ,/)]", "[exp_op13_assigment → • exp_op1 |= expression, ,/)]", "[exp_op13_assigment → • exp_op1 ^= expression, ,/)]", "[exp_op13_assigment → • exp_op1 <<= expression, ,/)]", "[exp_op13_assigment → • exp_op1 >>= expression, ,/)]", "[exp_op11 → • exp_op10, ,/)/||/?]", "[exp_op11 → • exp_op11 || exp_op10, ,/)/||/?]", "[exp_op1 → • exp_op0, ,/)/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • + exp_op1, ,/)/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • - exp_op1, ,/)/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • ! exp_op1, ,/)/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • ~ exp_op1, ,/)/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_pre_increment, ,/)/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_pre_decrement, ,/)/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_cast, ,/)/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op10 → • exp_op9, ,/)/&&/?]", "[exp_op10 → • exp_op10 && exp_op9, ,/)/&&/?]", "[exp_op0 → • exp_op0_no_array, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0 → • exp_op0_array_creation, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_increment → • ++ exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_decrement → • -- exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_cast → • ( type ) exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op9 → • exp_op8, ,/)/|/?]", "[exp_op9 → • exp_op9 | exp_op8, ,/)/|/?]", "[exp_op0_no_array → • exp_atom, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_invoke, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_obj_creation, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_increment, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_decrement, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_member_access, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_typeof, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_checked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_unchecked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_array array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op8 → • exp_op7, ,/)/^/?]", "[exp_op8 → • exp_op8 ^ exp_op7, ,/)/^/?]", "[exp_atom → • NULL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_HEXA, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • REAL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • CHARACTER_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_REGULAR, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_VERBATIM, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • this, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • base, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_increment → • exp_op0 ++, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_decrement → • exp_op0 --, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_typeof → • typeof ( type_return ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_checked → • checked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_unchecked → • unchecked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op7 → • exp_op6, ,/)/&/?]", "[exp_op7 → • exp_op7 & exp_op6, ,/)/&/?]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]", "[exp_op6 → • exp_op5, ,/)/==/!=/?]", "[exp_op6 → • exp_op6 == exp_op5, ,/)/==/!=/?]", "[exp_op6 → • exp_op6 != exp_op5, ,/)/==/!=/?]", "[exp_op5 → • exp_op4, ,/)/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 < exp_op4, ,/)/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 <= exp_op4, ,/)/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 > exp_op4, ,/)/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 >= exp_op4, ,/)/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 is exp_op4, ,/)/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 as exp_op4, ,/)/</<=/>/>=/is/as/?]", "[exp_op4 → • exp_op3, ,/)/<</>>/?]", "[exp_op4 → • exp_op4 << exp_op3, ,/)/<</>>/?]", "[exp_op4 → • exp_op4 >> exp_op3, ,/)/<</>>/?]", "[exp_op3 → • exp_op2, ,/)/+/-/?]", "[exp_op3 → • exp_op3 + exp_op2, ,/)/+/-/?]", "[exp_op3 → • exp_op3 - exp_op2, ,/)/+/-/?]", "[exp_op2 → • exp_op1, ,/)/*///%/?]", "[exp_op2 → • exp_op2 * exp_op1, ,/)/*///%/?]", "[exp_op2 → • exp_op2 / exp_op1, ,/)/*///%/?]", "[exp_op2 → • exp_op2 % exp_op1, ,/)/*///%/?]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[30] {0x3d, 0x3b, 0x3c, 0x3a, 0x30, 0x39, 0x2c, 0x2d, 0x2e, 0x2f, 0x38, 0x2b, 0x2a, 0x37, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x36, 0x1e, 0x35, 0x34, 0x33, 0x32, 0x31},
               new ushort[30] {0xDB, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x20, 0x2D, 0x31, 0x41, 0x42, 0x43, 0x44})
            , new State(
               new string[112] {"[exp_argument → out • expression, ,/)]", "[expression → • exp_op12_conditional, ,/)]", "[expression → • exp_op13_assigment, ,/)]", "[exp_op12_conditional → • exp_op11, ,/)]", "[exp_op12_conditional → • exp_op11 ? expression : expression, ,/)]", "[exp_op13_assigment → • exp_op1 = expression, ,/)]", "[exp_op13_assigment → • exp_op1 += expression, ,/)]", "[exp_op13_assigment → • exp_op1 -= expression, ,/)]", "[exp_op13_assigment → • exp_op1 *= expression, ,/)]", "[exp_op13_assigment → • exp_op1 /= expression, ,/)]", "[exp_op13_assigment → • exp_op1 %= expression, ,/)]", "[exp_op13_assigment → • exp_op1 &= expression, ,/)]", "[exp_op13_assigment → • exp_op1 |= expression, ,/)]", "[exp_op13_assigment → • exp_op1 ^= expression, ,/)]", "[exp_op13_assigment → • exp_op1 <<= expression, ,/)]", "[exp_op13_assigment → • exp_op1 >>= expression, ,/)]", "[exp_op11 → • exp_op10, ,/)/||/?]", "[exp_op11 → • exp_op11 || exp_op10, ,/)/||/?]", "[exp_op1 → • exp_op0, ,/)/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • + exp_op1, ,/)/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • - exp_op1, ,/)/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • ! exp_op1, ,/)/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • ~ exp_op1, ,/)/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_pre_increment, ,/)/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_pre_decrement, ,/)/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_cast, ,/)/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op10 → • exp_op9, ,/)/&&/?]", "[exp_op10 → • exp_op10 && exp_op9, ,/)/&&/?]", "[exp_op0 → • exp_op0_no_array, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0 → • exp_op0_array_creation, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_increment → • ++ exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_decrement → • -- exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_cast → • ( type ) exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op9 → • exp_op8, ,/)/|/?]", "[exp_op9 → • exp_op9 | exp_op8, ,/)/|/?]", "[exp_op0_no_array → • exp_atom, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_invoke, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_obj_creation, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_increment, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_decrement, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_member_access, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_typeof, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_checked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_unchecked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_array array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op8 → • exp_op7, ,/)/^/?]", "[exp_op8 → • exp_op8 ^ exp_op7, ,/)/^/?]", "[exp_atom → • NULL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_HEXA, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • REAL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • CHARACTER_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_REGULAR, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_VERBATIM, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • this, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • base, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_increment → • exp_op0 ++, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_decrement → • exp_op0 --, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_typeof → • typeof ( type_return ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_checked → • checked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_unchecked → • unchecked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op7 → • exp_op6, ,/)/&/?]", "[exp_op7 → • exp_op7 & exp_op6, ,/)/&/?]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]", "[exp_op6 → • exp_op5, ,/)/==/!=/?]", "[exp_op6 → • exp_op6 == exp_op5, ,/)/==/!=/?]", "[exp_op6 → • exp_op6 != exp_op5, ,/)/==/!=/?]", "[exp_op5 → • exp_op4, ,/)/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 < exp_op4, ,/)/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 <= exp_op4, ,/)/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 > exp_op4, ,/)/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 >= exp_op4, ,/)/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 is exp_op4, ,/)/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 as exp_op4, ,/)/</<=/>/>=/is/as/?]", "[exp_op4 → • exp_op3, ,/)/<</>>/?]", "[exp_op4 → • exp_op4 << exp_op3, ,/)/<</>>/?]", "[exp_op4 → • exp_op4 >> exp_op3, ,/)/<</>>/?]", "[exp_op3 → • exp_op2, ,/)/+/-/?]", "[exp_op3 → • exp_op3 + exp_op2, ,/)/+/-/?]", "[exp_op3 → • exp_op3 - exp_op2, ,/)/+/-/?]", "[exp_op2 → • exp_op1, ,/)/*///%/?]", "[exp_op2 → • exp_op2 * exp_op1, ,/)/*///%/?]", "[exp_op2 → • exp_op2 / exp_op1, ,/)/*///%/?]", "[exp_op2 → • exp_op2 % exp_op1, ,/)/*///%/?]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[30] {0x3d, 0x3b, 0x3c, 0x3a, 0x30, 0x39, 0x2c, 0x2d, 0x2e, 0x2f, 0x38, 0x2b, 0x2a, 0x37, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x36, 0x1e, 0x35, 0x34, 0x33, 0x32, 0x31},
               new ushort[30] {0xDC, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x20, 0x2D, 0x31, 0x41, 0x42, 0x43, 0x44})
            , new State(
               new string[1] {"[exp_op0_member_access → exp_op0 . IDENTIFIER •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x3E])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[2] {"[exp_op9 → exp_op9 | exp_op8 •, $/]/,/)/|/&&/||/?/:/}]", "[exp_op8 → exp_op8 • ^ exp_op7, $/]/,/)/^/|/&&/||/?/:/}]"},
               new Terminal[11] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[11] {0x2, 0x57, 0x58, 0x6D, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xB4, 0x9E},
                   new ushort[11] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x79])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x78, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[67] {"[exp_op1_cast → ( type ) • exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op0, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • + exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • - exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0 → • exp_op0_no_array, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0 → • exp_op0_array_creation, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1_pre_increment → • ++ exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1_pre_decrement → • -- exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1_cast → • ( type ) exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_atom, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_invoke, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_obj_creation, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_post_increment, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_post_decrement, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_member_access, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_typeof, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_checked, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_no_array → • exp_op0_unchecked, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → • new type_array array_initializer, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • NULL_LITTERAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • INTEGER_LITTERAL_HEXA, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • REAL_LITTERAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • CHARACTER_LITTERAL, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • STRING_LITTERAL_REGULAR, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • STRING_LITTERAL_VERBATIM, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • IDENTIFIER, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • this, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • base, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_atom → • ( expression ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_invoke → • exp_op0 ( ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_obj_creation → • new type ( ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_post_increment → • exp_op0 ++, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_post_decrement → • exp_op0 --, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_typeof → • typeof ( type_return ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_checked → • checked ( expression ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_unchecked → • unchecked ( expression ), $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[17] {0x30, 0x2c, 0x2d, 0x2e, 0x2f, 0x2b, 0x2a, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x1e},
               new ushort[17] {0xDD, 0x7, 0xC, 0xD, 0xE, 0x10, 0x11, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x2D})
            , new State(
               new string[1] {"[exp_atom → ( expression ) •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x37])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[4] {"[type_array → type_non_array type_array_rank • _m85, (/)/{]", "[_m85 → • type_array_rank _m85, (/)/{]", "[_m85 → •, (/)/{]", "[type_array_rank → • [ type_array_rank_dim ], [/(/)/{]"},
               new Terminal[4] {new Terminal("_T[[]", 0x56), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[{]", 0xB3)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[4] {0x6C, 0x6D, 0xB3, 0x56},
                   new ushort[4] {0x1, 0x1, 0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x9C])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xBA, new Rule())
               },
               new ushort[2] {0x55, 0x1c},
               new ushort[2] {0xDE, 0xDF})
            , new State(
               new string[4] {"[type_array_rank → [ • type_array_rank_dim ], $/./[/]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/{/}]", "[type_array_rank_dim → • _m89, ]]", "[_m89 → • , _m89, ]]", "[_m89 → •, ]]"},
               new Terminal[2] {new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[2] {0x58, 0x57},
                   new ushort[2] {0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xE2, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x9E])
               },
               new ushort[2] {0x1d, 0x59},
               new ushort[2] {0xE0, 0xE1})
            , new State(
               new string[1] {"[qualified_name → IDENTIFIER _m69 •, [/(/)]"},
               new Terminal[3] {new Terminal("_T[[]", 0x56), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x0])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[_m69 → . • IDENTIFIER _m69, [/(/)]"},
               new Terminal[1] {new Terminal("IDENTIFIER", 0x13)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x13},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xE3, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[2] {"[exp_op8 → exp_op8 ^ exp_op7 •, $/]/,/)/^/|/&&/||/?/:/}]", "[exp_op7 → exp_op7 • & exp_op6, $/]/,/)/&/^/|/&&/||/?/:/}]"},
               new Terminal[12] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[12] {0x2, 0x57, 0x58, 0x6D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xB4, 0x9D},
                   new ushort[12] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x77])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8C, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[121] {"[exp_op0_array_creation → new type_non_array [ • exp_expression_list ] type_array_rank array_initializer, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → new type_non_array [ • exp_expression_list ] type_array_rank, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → new type_non_array [ • exp_expression_list ] array_initializer, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → new type_non_array [ • exp_expression_list ], $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[type_array_rank → [ • type_array_rank_dim ], [/(/{]", "[exp_expression_list → • expression, ]/,]", "[exp_expression_list → • exp_expression_list , expression, ]/,]", "[type_array_rank_dim → • _m89, ]]", "[expression → • exp_op12_conditional, ]]", "[expression → • exp_op13_assigment, ]]", "[_m89 → • , _m89, ]]", "[_m89 → •, ]]", "[exp_op12_conditional → • exp_op11, ]]", "[exp_op12_conditional → • exp_op11 ? expression : expression, ]]", "[exp_op13_assigment → • exp_op1 = expression, ]]", "[exp_op13_assigment → • exp_op1 += expression, ]]", "[exp_op13_assigment → • exp_op1 -= expression, ]]", "[exp_op13_assigment → • exp_op1 *= expression, ]]", "[exp_op13_assigment → • exp_op1 /= expression, ]]", "[exp_op13_assigment → • exp_op1 %= expression, ]]", "[exp_op13_assigment → • exp_op1 &= expression, ]]", "[exp_op13_assigment → • exp_op1 |= expression, ]]", "[exp_op13_assigment → • exp_op1 ^= expression, ]]", "[exp_op13_assigment → • exp_op1 <<= expression, ]]", "[exp_op13_assigment → • exp_op1 >>= expression, ]]", "[exp_op11 → • exp_op10, ]/||/?]", "[exp_op11 → • exp_op11 || exp_op10, ]/||/?]", "[exp_op1 → • exp_op0, ]/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • + exp_op1, ]/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • - exp_op1, ]/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • ! exp_op1, ]/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • ~ exp_op1, ]/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_pre_increment, ]/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_pre_decrement, ]/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_cast, ]/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op10 → • exp_op9, ]/&&/?]", "[exp_op10 → • exp_op10 && exp_op9, ]/&&/?]", "[exp_op0 → • exp_op0_no_array, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0 → • exp_op0_array_creation, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_increment → • ++ exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_decrement → • -- exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_cast → • ( type ) exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op9 → • exp_op8, ]/|/?]", "[exp_op9 → • exp_op9 | exp_op8, ]/|/?]", "[exp_op0_no_array → • exp_atom, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_invoke, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_obj_creation, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_increment, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_decrement, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_member_access, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_typeof, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_checked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_unchecked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_array array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op8 → • exp_op7, ]/^/?]", "[exp_op8 → • exp_op8 ^ exp_op7, ]/^/?]", "[exp_atom → • NULL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_HEXA, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • REAL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • CHARACTER_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_REGULAR, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_VERBATIM, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • this, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • base, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_increment → • exp_op0 ++, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_decrement → • exp_op0 --, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_typeof → • typeof ( type_return ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_checked → • checked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_unchecked → • unchecked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op7 → • exp_op6, ]/&/?]", "[exp_op7 → • exp_op7 & exp_op6, ]/&/?]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]", "[exp_op6 → • exp_op5, ]/==/!=/?]", "[exp_op6 → • exp_op6 == exp_op5, ]/==/!=/?]", "[exp_op6 → • exp_op6 != exp_op5, ]/==/!=/?]", "[exp_op5 → • exp_op4, ]/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 < exp_op4, ]/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 <= exp_op4, ]/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 > exp_op4, ]/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 >= exp_op4, ]/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 is exp_op4, ]/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 as exp_op4, ]/</<=/>/>=/is/as/?]", "[exp_op4 → • exp_op3, ]/<</>>/?]", "[exp_op4 → • exp_op4 << exp_op3, ]/<</>>/?]", "[exp_op4 → • exp_op4 >> exp_op3, ]/<</>>/?]", "[exp_op3 → • exp_op2, ]/+/-/?]", "[exp_op3 → • exp_op3 + exp_op2, ]/+/-/?]", "[exp_op3 → • exp_op3 - exp_op2, ]/+/-/?]", "[exp_op2 → • exp_op1, ]/*///%/?]", "[exp_op2 → • exp_op2 * exp_op1, ]/*///%/?]", "[exp_op2 → • exp_op2 / exp_op1, ]/*///%/?]", "[exp_op2 → • exp_op2 % exp_op1, ]/*///%/?]"},
               new Terminal[40] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[41] {
                   new DeciderState(
                   new ushort[40] {0x58, 0x57, 0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[40] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xE2, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x9E])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[33] {0x3e, 0x1d, 0x3d, 0x59, 0x3b, 0x3c, 0x3a, 0x30, 0x39, 0x2c, 0x2d, 0x2e, 0x2f, 0x38, 0x2b, 0x2a, 0x37, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x36, 0x1e, 0x35, 0x34, 0x33, 0x32, 0x31},
               new ushort[33] {0xE4, 0xE0, 0xE5, 0xE1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x20, 0x2D, 0x31, 0x41, 0x42, 0x43, 0x44})
            , new State(
               new string[1] {"[exp_op0_array_creation → new type_array array_initializer •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x49])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[117] {"[array_initializer → { • variable_initializer_list }, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[variable_initializer_list → • variable_initializer _m182, }]", "[variable_initializer_list → •, }]", "[variable_initializer → • expression, ,/}]", "[variable_initializer → • array_initializer, ,/}]", "[expression → • exp_op12_conditional, ,/}]", "[expression → • exp_op13_assigment, ,/}]", "[array_initializer → • { variable_initializer_list }, ,/}]", "[exp_op12_conditional → • exp_op11, ,/}]", "[exp_op12_conditional → • exp_op11 ? expression : expression, ,/}]", "[exp_op13_assigment → • exp_op1 = expression, ,/}]", "[exp_op13_assigment → • exp_op1 += expression, ,/}]", "[exp_op13_assigment → • exp_op1 -= expression, ,/}]", "[exp_op13_assigment → • exp_op1 *= expression, ,/}]", "[exp_op13_assigment → • exp_op1 /= expression, ,/}]", "[exp_op13_assigment → • exp_op1 %= expression, ,/}]", "[exp_op13_assigment → • exp_op1 &= expression, ,/}]", "[exp_op13_assigment → • exp_op1 |= expression, ,/}]", "[exp_op13_assigment → • exp_op1 ^= expression, ,/}]", "[exp_op13_assigment → • exp_op1 <<= expression, ,/}]", "[exp_op13_assigment → • exp_op1 >>= expression, ,/}]", "[exp_op11 → • exp_op10, ,/||/?/}]", "[exp_op11 → • exp_op11 || exp_op10, ,/||/?/}]", "[exp_op1 → • exp_op0, ,/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • + exp_op1, ,/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • - exp_op1, ,/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ! exp_op1, ,/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ~ exp_op1, ,/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_increment, ,/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_decrement, ,/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_cast, ,/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op10 → • exp_op9, ,/&&/?/}]", "[exp_op10 → • exp_op10 && exp_op9, ,/&&/?/}]", "[exp_op0 → • exp_op0_no_array, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0 → • exp_op0_array_creation, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_increment → • ++ exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_decrement → • -- exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_cast → • ( type ) exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op9 → • exp_op8, ,/|/?/}]", "[exp_op9 → • exp_op9 | exp_op8, ,/|/?/}]", "[exp_op0_no_array → • exp_atom, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_invoke, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_obj_creation, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_increment, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_decrement, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_member_access, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_typeof, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_checked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_unchecked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_array array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op8 → • exp_op7, ,/^/?/}]", "[exp_op8 → • exp_op8 ^ exp_op7, ,/^/?/}]", "[exp_atom → • NULL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_HEXA, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • REAL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • CHARACTER_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_REGULAR, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_VERBATIM, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • this, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • base, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_increment → • exp_op0 ++, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_decrement → • exp_op0 --, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_typeof → • typeof ( type_return ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_checked → • checked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_unchecked → • unchecked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op7 → • exp_op6, ,/&/?/}]", "[exp_op7 → • exp_op7 & exp_op6, ,/&/?/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]", "[exp_op6 → • exp_op5, ,/==/!=/?/}]", "[exp_op6 → • exp_op6 == exp_op5, ,/==/!=/?/}]", "[exp_op6 → • exp_op6 != exp_op5, ,/==/!=/?/}]", "[exp_op5 → • exp_op4, ,/</<=/>/>=/is/as/?/}]", "[exp_op5 → • exp_op5 < exp_op4, ,/</<=/>/>=/is/as/?/}]", "[exp_op5 → • exp_op5 <= exp_op4, ,/</<=/>/>=/is/as/?/}]", "[exp_op5 → • exp_op5 > exp_op4, ,/</<=/>/>=/is/as/?/}]", "[exp_op5 → • exp_op5 >= exp_op4, ,/</<=/>/>=/is/as/?/}]", "[exp_op5 → • exp_op5 is exp_op4, ,/</<=/>/>=/is/as/?/}]", "[exp_op5 → • exp_op5 as exp_op4, ,/</<=/>/>=/is/as/?/}]", "[exp_op4 → • exp_op3, ,/<</>>/?/}]", "[exp_op4 → • exp_op4 << exp_op3, ,/<</>>/?/}]", "[exp_op4 → • exp_op4 >> exp_op3, ,/<</>>/?/}]", "[exp_op3 → • exp_op2, ,/+/-/?/}]", "[exp_op3 → • exp_op3 + exp_op2, ,/+/-/?/}]", "[exp_op3 → • exp_op3 - exp_op2, ,/+/-/?/}]", "[exp_op2 → • exp_op1, ,/*///%/?/}]", "[exp_op2 → • exp_op2 * exp_op1, ,/*///%/?/}]", "[exp_op2 → • exp_op2 / exp_op1, ,/*///%/?/}]", "[exp_op2 → • exp_op2 % exp_op1, ,/*///%/?/}]"},
               new Terminal[40] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D), new Terminal("_T[{]", 0xB3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[41] {
                   new DeciderState(
                   new ushort[40] {0xB4, 0xB3, 0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[40] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x98])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xC0, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[33] {0x43, 0x42, 0x3d, 0x41, 0x3b, 0x3c, 0x3a, 0x30, 0x39, 0x2c, 0x2d, 0x2e, 0x2f, 0x38, 0x2b, 0x2a, 0x37, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x36, 0x1e, 0x35, 0x34, 0x33, 0x32, 0x31},
               new ushort[33] {0xE6, 0xE7, 0xE8, 0xE9, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x20, 0x2D, 0x31, 0x41, 0x42, 0x43, 0x44})
            , new State(
               new string[118] {"[exp_op0_obj_creation → new type ( • exp_argument_list ), $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_obj_creation → new type ( • ), $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_argument_list → • exp_argument, ,/)]", "[exp_argument_list → • exp_argument_list , exp_argument, ,/)]", "[exp_argument → • expression, )]", "[exp_argument → • ref expression, )]", "[exp_argument → • out expression, )]", "[expression → • exp_op12_conditional, )]", "[expression → • exp_op13_assigment, )]", "[exp_op12_conditional → • exp_op11, )]", "[exp_op12_conditional → • exp_op11 ? expression : expression, )]", "[exp_op13_assigment → • exp_op1 = expression, )]", "[exp_op13_assigment → • exp_op1 += expression, )]", "[exp_op13_assigment → • exp_op1 -= expression, )]", "[exp_op13_assigment → • exp_op1 *= expression, )]", "[exp_op13_assigment → • exp_op1 /= expression, )]", "[exp_op13_assigment → • exp_op1 %= expression, )]", "[exp_op13_assigment → • exp_op1 &= expression, )]", "[exp_op13_assigment → • exp_op1 |= expression, )]", "[exp_op13_assigment → • exp_op1 ^= expression, )]", "[exp_op13_assigment → • exp_op1 <<= expression, )]", "[exp_op13_assigment → • exp_op1 >>= expression, )]", "[exp_op11 → • exp_op10, )/||/?]", "[exp_op11 → • exp_op11 || exp_op10, )/||/?]", "[exp_op1 → • exp_op0, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • + exp_op1, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • - exp_op1, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • ! exp_op1, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • ~ exp_op1, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_pre_increment, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_pre_decrement, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_cast, )/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op10 → • exp_op9, )/&&/?]", "[exp_op10 → • exp_op10 && exp_op9, )/&&/?]", "[exp_op0 → • exp_op0_no_array, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0 → • exp_op0_array_creation, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_increment → • ++ exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_decrement → • -- exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_cast → • ( type ) exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op9 → • exp_op8, )/|/?]", "[exp_op9 → • exp_op9 | exp_op8, )/|/?]", "[exp_op0_no_array → • exp_atom, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_invoke, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_obj_creation, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_increment, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_decrement, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_member_access, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_typeof, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_checked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_unchecked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_array array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op8 → • exp_op7, )/^/?]", "[exp_op8 → • exp_op8 ^ exp_op7, )/^/?]", "[exp_atom → • NULL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_HEXA, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • REAL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • CHARACTER_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_REGULAR, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_VERBATIM, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • this, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • base, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_increment → • exp_op0 ++, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_decrement → • exp_op0 --, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_typeof → • typeof ( type_return ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_checked → • checked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_unchecked → • unchecked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op7 → • exp_op6, )/&/?]", "[exp_op7 → • exp_op7 & exp_op6, )/&/?]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]", "[exp_op6 → • exp_op5, )/==/!=/?]", "[exp_op6 → • exp_op6 == exp_op5, )/==/!=/?]", "[exp_op6 → • exp_op6 != exp_op5, )/==/!=/?]", "[exp_op5 → • exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 < exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 <= exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 > exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 >= exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 is exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 as exp_op4, )/</<=/>/>=/is/as/?]", "[exp_op4 → • exp_op3, )/<</>>/?]", "[exp_op4 → • exp_op4 << exp_op3, )/<</>>/?]", "[exp_op4 → • exp_op4 >> exp_op3, )/<</>>/?]", "[exp_op3 → • exp_op2, )/+/-/?]", "[exp_op3 → • exp_op3 + exp_op2, )/+/-/?]", "[exp_op3 → • exp_op3 - exp_op2, )/+/-/?]", "[exp_op2 → • exp_op1, )/*///%/?]", "[exp_op2 → • exp_op2 * exp_op1, )/*///%/?]", "[exp_op2 → • exp_op2 / exp_op1, )/*///%/?]", "[exp_op2 → • exp_op2 % exp_op1, )/*///%/?]"},
               new Terminal[41] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D), new Terminal("_T[ref]", 0xB1), new Terminal("_T[out]", 0xB2)},
               new DeciderState[42] {
                   new DeciderState(
                   new ushort[41] {0x6D, 0xB1, 0xB2, 0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[41] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xEB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB3, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB4, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[32] {0x3f, 0x40, 0x3d, 0x3b, 0x3c, 0x3a, 0x30, 0x39, 0x2c, 0x2d, 0x2e, 0x2f, 0x38, 0x2b, 0x2a, 0x37, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x36, 0x1e, 0x35, 0x34, 0x33, 0x32, 0x31},
               new ushort[32] {0xEA, 0xB1, 0xB2, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x20, 0x2D, 0x31, 0x41, 0x42, 0x43, 0x44})
            , new State(
               new string[3] {"[exp_op7 → exp_op7 & exp_op6 •, $/]/,/)/&/^/|/&&/||/?/:/}]", "[exp_op6 → exp_op6 • == exp_op5, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op6 → exp_op6 • != exp_op5, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]"},
               new Terminal[14] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[4] {
                   new DeciderState(
                   new ushort[14] {0x2, 0x57, 0x58, 0x6D, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xB4, 0x9B, 0x9C},
                   new ushort[14] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x3}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x75])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x91, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x92, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op0_member_access → type_predefined . IDENTIFIER •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x3F])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op0_typeof → typeof ( type_return • ), $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[1] {new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x6D},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xEC, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_return → void •, )]"},
               new Terminal[1] {new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x6D},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x29])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_return → type •, )]"},
               new Terminal[1] {new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x6D},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x2A])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op0_checked → checked ( expression • ), $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[1] {new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x6D},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xED, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op0_unchecked → unchecked ( expression • ), $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[1] {new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x6D},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xEE, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[7] {"[exp_op6 → exp_op6 == exp_op5 •, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → exp_op5 • < exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → exp_op5 • <= exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → exp_op5 • > exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → exp_op5 • >= exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → exp_op5 • is exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → exp_op5 • as exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]"},
               new Terminal[20] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[8] {
                   new DeciderState(
                   new ushort[20] {0x2, 0x57, 0x58, 0x6D, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xB4, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A},
                   new ushort[20] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x72])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x93, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x94, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x95, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x96, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x97, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x98, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[7] {"[exp_op6 → exp_op6 != exp_op5 •, $/]/,/)/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → exp_op5 • < exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → exp_op5 • <= exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → exp_op5 • > exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → exp_op5 • >= exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → exp_op5 • is exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op5 → exp_op5 • as exp_op4, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]"},
               new Terminal[20] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[8] {
                   new DeciderState(
                   new ushort[20] {0x2, 0x57, 0x58, 0x6D, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xB4, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A},
                   new ushort[20] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x73])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x93, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x94, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x95, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x96, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x97, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x98, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[3] {"[exp_op5 → exp_op5 < exp_op4 •, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → exp_op4 • << exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → exp_op4 • >> exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]"},
               new Terminal[22] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[4] {
                   new DeciderState(
                   new ushort[22] {0x2, 0x57, 0x58, 0x6D, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xB4, 0x93, 0x94},
                   new ushort[22] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x3}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x6B])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x99, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9A, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[3] {"[exp_op5 → exp_op5 <= exp_op4 •, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → exp_op4 • << exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → exp_op4 • >> exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]"},
               new Terminal[22] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[4] {
                   new DeciderState(
                   new ushort[22] {0x2, 0x57, 0x58, 0x6D, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xB4, 0x93, 0x94},
                   new ushort[22] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x3}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x6C])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x99, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9A, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[3] {"[exp_op5 → exp_op5 > exp_op4 •, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → exp_op4 • << exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → exp_op4 • >> exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]"},
               new Terminal[22] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[4] {
                   new DeciderState(
                   new ushort[22] {0x2, 0x57, 0x58, 0x6D, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xB4, 0x93, 0x94},
                   new ushort[22] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x3}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x6D])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x99, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9A, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[3] {"[exp_op5 → exp_op5 >= exp_op4 •, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → exp_op4 • << exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → exp_op4 • >> exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]"},
               new Terminal[22] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[4] {
                   new DeciderState(
                   new ushort[22] {0x2, 0x57, 0x58, 0x6D, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xB4, 0x93, 0x94},
                   new ushort[22] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x3}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x6E])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x99, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9A, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[3] {"[exp_op5 → exp_op5 is exp_op4 •, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → exp_op4 • << exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → exp_op4 • >> exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]"},
               new Terminal[22] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[4] {
                   new DeciderState(
                   new ushort[22] {0x2, 0x57, 0x58, 0x6D, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xB4, 0x93, 0x94},
                   new ushort[22] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x3}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x6F])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x99, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9A, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[3] {"[exp_op5 → exp_op5 as exp_op4 •, $/]/,/)/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → exp_op4 • << exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op4 → exp_op4 • >> exp_op3, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]"},
               new Terminal[22] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[4] {
                   new DeciderState(
                   new ushort[22] {0x2, 0x57, 0x58, 0x6D, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xB4, 0x93, 0x94},
                   new ushort[22] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x3}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x70])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x99, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9A, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[3] {"[exp_op4 → exp_op4 << exp_op3 •, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → exp_op3 • + exp_op2, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → exp_op3 • - exp_op2, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]"},
               new Terminal[24] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[4] {
                   new DeciderState(
                   new ushort[24] {0x2, 0x57, 0x58, 0x6D, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xB4, 0x8A, 0x8B},
                   new ushort[24] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x3}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x68])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9C, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[3] {"[exp_op4 → exp_op4 >> exp_op3 •, $/]/,/)/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → exp_op3 • + exp_op2, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op3 → exp_op3 • - exp_op2, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]"},
               new Terminal[24] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[4] {
                   new DeciderState(
                   new ushort[24] {0x2, 0x57, 0x58, 0x6D, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xB4, 0x8A, 0x8B},
                   new ushort[24] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x3}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x69])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9C, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[4] {"[exp_op3 → exp_op3 + exp_op2 •, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → exp_op2 • * exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → exp_op2 • / exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → exp_op2 • % exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]"},
               new Terminal[27] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[5] {
                   new DeciderState(
                   new ushort[27] {0x2, 0x57, 0x58, 0x6D, 0x8A, 0x8B, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xB4, 0x8E, 0x8F, 0x90},
                   new ushort[27] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x3, 0x4}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x65])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9F, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[4] {"[exp_op3 → exp_op3 - exp_op2 •, $/]/,/)/+/-/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → exp_op2 • * exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → exp_op2 • / exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]", "[exp_op2 → exp_op2 • % exp_op1, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]"},
               new Terminal[27] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[5] {
                   new DeciderState(
                   new ushort[27] {0x2, 0x57, 0x58, 0x6D, 0x8A, 0x8B, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xB4, 0x8E, 0x8F, 0x90},
                   new ushort[27] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x3, 0x4}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x66])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9F, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op2 → exp_op2 * exp_op1 •, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]"},
               new Terminal[27] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[27] {0x2, 0x57, 0x58, 0x6D, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xB4},
                   new ushort[27] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x61])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op2 → exp_op2 / exp_op1 •, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]"},
               new Terminal[27] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[27] {0x2, 0x57, 0x58, 0x6D, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xB4},
                   new ushort[27] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x62])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op2 → exp_op2 % exp_op1 •, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/}]"},
               new Terminal[27] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[27] {0x2, 0x57, 0x58, 0x6D, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xB4},
                   new ushort[27] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x63])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[112] {"[exp_op12_conditional → exp_op11 ? expression : • expression, $/]/,/)/:/}]", "[expression → • exp_op12_conditional, $/]/,/)/:/}]", "[expression → • exp_op13_assigment, $/]/,/)/:/}]", "[exp_op12_conditional → • exp_op11, $/]/,/)/:/}]", "[exp_op12_conditional → • exp_op11 ? expression : expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 = expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 += expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 -= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 *= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 /= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 %= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 &= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 |= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 ^= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 <<= expression, $/]/,/)/:/}]", "[exp_op13_assigment → • exp_op1 >>= expression, $/]/,/)/:/}]", "[exp_op11 → • exp_op10, $/]/,/)/||/?/:/}]", "[exp_op11 → • exp_op11 || exp_op10, $/]/,/)/||/?/:/}]", "[exp_op1 → • exp_op0, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • + exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • - exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ! exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ~ exp_op1, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_increment, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_decrement, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_cast, $/]/,/)/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op10 → • exp_op9, $/]/,/)/&&/?/:/}]", "[exp_op10 → • exp_op10 && exp_op9, $/]/,/)/&&/?/:/}]", "[exp_op0 → • exp_op0_no_array, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0 → • exp_op0_array_creation, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_increment → • ++ exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_decrement → • -- exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_cast → • ( type ) exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op9 → • exp_op8, $/]/,/)/|/?/:/}]", "[exp_op9 → • exp_op9 | exp_op8, $/]/,/)/|/?/:/}]", "[exp_op0_no_array → • exp_atom, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_invoke, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_obj_creation, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_increment, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_decrement, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_member_access, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_typeof, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_checked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_unchecked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_array array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op8 → • exp_op7, $/]/,/)/^/?/:/}]", "[exp_op8 → • exp_op8 ^ exp_op7, $/]/,/)/^/?/:/}]", "[exp_atom → • NULL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_HEXA, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • REAL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • CHARACTER_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_REGULAR, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_VERBATIM, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • this, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • base, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_increment → • exp_op0 ++, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_decrement → • exp_op0 --, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_typeof → • typeof ( type_return ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_checked → • checked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_unchecked → • unchecked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op7 → • exp_op6, $/]/,/)/&/?/:/}]", "[exp_op7 → • exp_op7 & exp_op6, $/]/,/)/&/?/:/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]", "[exp_op6 → • exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op6 → • exp_op6 == exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op6 → • exp_op6 != exp_op5, $/]/,/)/==/!=/?/:/}]", "[exp_op5 → • exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 < exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 <= exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 > exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 >= exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 is exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op5 → • exp_op5 as exp_op4, $/]/,/)/</<=/>/>=/is/as/?/:/}]", "[exp_op4 → • exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op4 → • exp_op4 << exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op4 → • exp_op4 >> exp_op3, $/]/,/)/<</>>/?/:/}]", "[exp_op3 → • exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op3 → • exp_op3 + exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op3 → • exp_op3 - exp_op2, $/]/,/)/+/-/?/:/}]", "[exp_op2 → • exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 * exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 / exp_op1, $/]/,/)/*///%/?/:/}]", "[exp_op2 → • exp_op2 % exp_op1, $/]/,/)/*///%/?/:/}]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[30] {0x3d, 0x3b, 0x3c, 0x3a, 0x30, 0x39, 0x2c, 0x2d, 0x2e, 0x2f, 0x38, 0x2b, 0x2a, 0x37, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x36, 0x1e, 0x35, 0x34, 0x33, 0x32, 0x31},
               new ushort[30] {0xEF, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x20, 0x2D, 0x31, 0x41, 0x42, 0x43, 0x44})
            , new State(
               new string[1] {"[exp_op0_invoke → exp_op0 ( exp_argument_list ) •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x38])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[115] {"[exp_argument_list → exp_argument_list , • exp_argument, ,/)]", "[exp_argument → • expression, ,/)]", "[exp_argument → • ref expression, ,/)]", "[exp_argument → • out expression, ,/)]", "[expression → • exp_op12_conditional, ,/)]", "[expression → • exp_op13_assigment, ,/)]", "[exp_op12_conditional → • exp_op11, ,/)]", "[exp_op12_conditional → • exp_op11 ? expression : expression, ,/)]", "[exp_op13_assigment → • exp_op1 = expression, ,/)]", "[exp_op13_assigment → • exp_op1 += expression, ,/)]", "[exp_op13_assigment → • exp_op1 -= expression, ,/)]", "[exp_op13_assigment → • exp_op1 *= expression, ,/)]", "[exp_op13_assigment → • exp_op1 /= expression, ,/)]", "[exp_op13_assigment → • exp_op1 %= expression, ,/)]", "[exp_op13_assigment → • exp_op1 &= expression, ,/)]", "[exp_op13_assigment → • exp_op1 |= expression, ,/)]", "[exp_op13_assigment → • exp_op1 ^= expression, ,/)]", "[exp_op13_assigment → • exp_op1 <<= expression, ,/)]", "[exp_op13_assigment → • exp_op1 >>= expression, ,/)]", "[exp_op11 → • exp_op10, ,/)/||/?]", "[exp_op11 → • exp_op11 || exp_op10, ,/)/||/?]", "[exp_op1 → • exp_op0, ,/)/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • + exp_op1, ,/)/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • - exp_op1, ,/)/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • ! exp_op1, ,/)/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • ~ exp_op1, ,/)/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_pre_increment, ,/)/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_pre_decrement, ,/)/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_cast, ,/)/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op10 → • exp_op9, ,/)/&&/?]", "[exp_op10 → • exp_op10 && exp_op9, ,/)/&&/?]", "[exp_op0 → • exp_op0_no_array, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0 → • exp_op0_array_creation, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_increment → • ++ exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_decrement → • -- exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_cast → • ( type ) exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op9 → • exp_op8, ,/)/|/?]", "[exp_op9 → • exp_op9 | exp_op8, ,/)/|/?]", "[exp_op0_no_array → • exp_atom, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_invoke, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_obj_creation, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_increment, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_decrement, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_member_access, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_typeof, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_checked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_unchecked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_array array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op8 → • exp_op7, ,/)/^/?]", "[exp_op8 → • exp_op8 ^ exp_op7, ,/)/^/?]", "[exp_atom → • NULL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_HEXA, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • REAL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • CHARACTER_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_REGULAR, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_VERBATIM, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • this, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • base, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_increment → • exp_op0 ++, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_decrement → • exp_op0 --, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_typeof → • typeof ( type_return ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_checked → • checked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_unchecked → • unchecked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op7 → • exp_op6, ,/)/&/?]", "[exp_op7 → • exp_op7 & exp_op6, ,/)/&/?]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]", "[exp_op6 → • exp_op5, ,/)/==/!=/?]", "[exp_op6 → • exp_op6 == exp_op5, ,/)/==/!=/?]", "[exp_op6 → • exp_op6 != exp_op5, ,/)/==/!=/?]", "[exp_op5 → • exp_op4, ,/)/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 < exp_op4, ,/)/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 <= exp_op4, ,/)/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 > exp_op4, ,/)/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 >= exp_op4, ,/)/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 is exp_op4, ,/)/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 as exp_op4, ,/)/</<=/>/>=/is/as/?]", "[exp_op4 → • exp_op3, ,/)/<</>>/?]", "[exp_op4 → • exp_op4 << exp_op3, ,/)/<</>>/?]", "[exp_op4 → • exp_op4 >> exp_op3, ,/)/<</>>/?]", "[exp_op3 → • exp_op2, ,/)/+/-/?]", "[exp_op3 → • exp_op3 + exp_op2, ,/)/+/-/?]", "[exp_op3 → • exp_op3 - exp_op2, ,/)/+/-/?]", "[exp_op2 → • exp_op1, ,/)/*///%/?]", "[exp_op2 → • exp_op2 * exp_op1, ,/)/*///%/?]", "[exp_op2 → • exp_op2 / exp_op1, ,/)/*///%/?]", "[exp_op2 → • exp_op2 % exp_op1, ,/)/*///%/?]"},
               new Terminal[40] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D), new Terminal("_T[ref]", 0xB1), new Terminal("_T[out]", 0xB2)},
               new DeciderState[41] {
                   new DeciderState(
                   new ushort[40] {0xB1, 0xB2, 0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[40] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB3, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB4, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[31] {0x40, 0x3d, 0x3b, 0x3c, 0x3a, 0x30, 0x39, 0x2c, 0x2d, 0x2e, 0x2f, 0x38, 0x2b, 0x2a, 0x37, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x36, 0x1e, 0x35, 0x34, 0x33, 0x32, 0x31},
               new ushort[31] {0xF0, 0xB2, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x20, 0x2D, 0x31, 0x41, 0x42, 0x43, 0x44})
            , new State(
               new string[1] {"[exp_argument → ref expression •, ,/)]"},
               new Terminal[2] {new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[2] {0x58, 0x6D},
                   new ushort[2] {0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x92])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_argument → out expression •, ,/)]"},
               new Terminal[2] {new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[2] {0x58, 0x6D},
                   new ushort[2] {0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x93])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op1_cast → ( type ) exp_op1 •, $/]/,/)/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[38] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[38] {0x2, 0x57, 0x58, 0x6D, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[38] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x57])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_array → type_non_array type_array_rank _m85 •, (/)/{]"},
               new Terminal[3] {new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[{]", 0xB3)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[3] {0x6C, 0x6D, 0xB3},
                   new ushort[3] {0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x17])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[4] {"[_m85 → type_array_rank • _m85, (/)/{]", "[_m85 → • type_array_rank _m85, (/)/{]", "[_m85 → •, (/)/{]", "[type_array_rank → • [ type_array_rank_dim ], [/(/)/{]"},
               new Terminal[4] {new Terminal("_T[[]", 0x56), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[{]", 0xB3)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[4] {0x6C, 0x6D, 0xB3, 0x56},
                   new ushort[4] {0x1, 0x1, 0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x9C])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xBA, new Rule())
               },
               new ushort[2] {0x55, 0x1c},
               new ushort[2] {0xF1, 0xDF})
            , new State(
               new string[1] {"[type_array_rank → [ type_array_rank_dim • ], $/./[/]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/{/}]"},
               new Terminal[1] {new Terminal("_T[]]", 0x57)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x57},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xF2, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_array_rank_dim → _m89 •, ]]"},
               new Terminal[1] {new Terminal("_T[]]", 0x57)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x57},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x19])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[3] {"[_m89 → , • _m89, ]]", "[_m89 → • , _m89, ]]", "[_m89 → •, ]]"},
               new Terminal[2] {new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[2] {0x58, 0x57},
                   new ushort[2] {0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xE2, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x9E])
               },
               new ushort[1] {0x59},
               new ushort[1] {0xF3})
            , new State(
               new string[3] {"[_m69 → . IDENTIFIER • _m69, [/(/)]", "[_m69 → • . IDENTIFIER _m69, [/(/)]", "[_m69 → •, [/(/)]"},
               new Terminal[4] {new Terminal("_T[.]", 0x44), new Terminal("_T[[]", 0x56), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[4] {0x44, 0x56, 0x6C, 0x6D},
                   new ushort[4] {0x1, 0x2, 0x2, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xBC, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x9A])
               },
               new ushort[1] {0x45},
               new ushort[1] {0xF4})
            , new State(
               new string[5] {"[exp_op0_array_creation → new type_non_array [ exp_expression_list • ] type_array_rank array_initializer, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → new type_non_array [ exp_expression_list • ] type_array_rank, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → new type_non_array [ exp_expression_list • ] array_initializer, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → new type_non_array [ exp_expression_list • ], $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_expression_list → exp_expression_list • , expression, ]/,]"},
               new Terminal[2] {new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[2] {0x57, 0x58},
                   new ushort[2] {0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xF5, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xF6, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_expression_list → expression •, ]/,]"},
               new Terminal[2] {new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[2] {0x57, 0x58},
                   new ushort[2] {0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x8D])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[array_initializer → { variable_initializer_list • }, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[1] {new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0xB4},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xF7, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[3] {"[variable_initializer_list → variable_initializer • _m182, }]", "[_m182 → • , variable_initializer _m182, }]", "[_m182 → •, }]"},
               new Terminal[2] {new Terminal("_T[,]", 0x58), new Terminal("_T[}]", 0xB4)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[2] {0x58, 0xB4},
                   new ushort[2] {0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xF9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0xA0])
               },
               new ushort[1] {0xb6},
               new ushort[1] {0xF8})
            , new State(
               new string[1] {"[variable_initializer → expression •, ,/}]"},
               new Terminal[2] {new Terminal("_T[,]", 0x58), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[2] {0x58, 0xB4},
                   new ushort[2] {0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x95])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[variable_initializer → array_initializer •, ,/}]"},
               new Terminal[2] {new Terminal("_T[,]", 0x58), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[2] {0x58, 0xB4},
                   new ushort[2] {0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x96])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[2] {"[exp_op0_obj_creation → new type ( exp_argument_list • ), $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_argument_list → exp_argument_list • , exp_argument, ,/)]"},
               new Terminal[2] {new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[2] {0x6D, 0x58},
                   new ushort[2] {0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xDA, new Rule())
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op0_obj_creation → new type ( ) •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x3B])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op0_typeof → typeof ( type_return ) •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x42])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op0_checked → checked ( expression ) •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x43])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op0_unchecked → unchecked ( expression ) •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x44])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_op12_conditional → exp_op11 ? expression : expression •, $/]/,/)/:/}]"},
               new Terminal[6] {new Terminal("$", 0x2), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D), new Terminal("_T[:]", 0xA3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[6] {0x2, 0x57, 0x58, 0x6D, 0xA3, 0xB4},
                   new ushort[6] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x7F])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_argument_list → exp_argument_list , exp_argument •, ,/)]"},
               new Terminal[2] {new Terminal("_T[,]", 0x58), new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[2] {0x58, 0x6D},
                   new ushort[2] {0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x90])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[_m85 → type_array_rank _m85 •, (/)/{]"},
               new Terminal[3] {new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[{]", 0xB3)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[3] {0x6C, 0x6D, 0xB3},
                   new ushort[3] {0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x9B])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[type_array_rank → [ type_array_rank_dim ] •, $/./[/]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/{/}]"},
               new Terminal[44] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[[]", 0x56), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[{]", 0xB3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[44] {0x2, 0x44, 0x56, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB3, 0xB4},
                   new ushort[44] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x18])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[_m89 → , _m89 •, ]]"},
               new Terminal[1] {new Terminal("_T[]]", 0x57)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0x57},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x9D])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[_m69 → . IDENTIFIER _m69 •, [/(/)]"},
               new Terminal[3] {new Terminal("_T[[]", 0x56), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[3] {0x56, 0x6C, 0x6D},
                   new ushort[3] {0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x99])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[6] {"[exp_op0_array_creation → new type_non_array [ exp_expression_list ] • type_array_rank array_initializer, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → new type_non_array [ exp_expression_list ] • type_array_rank, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → new type_non_array [ exp_expression_list ] • array_initializer, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → new type_non_array [ exp_expression_list ] •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[type_array_rank → • [ type_array_rank_dim ], $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/{/}]", "[array_initializer → • { variable_initializer_list }, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[44] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[[]", 0x56), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[{]", 0xB3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[4] {
                   new DeciderState(
                   new ushort[44] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4, 0x56, 0xB3},
                   new ushort[44] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x3}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x48])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xBA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xC0, new Rule())
               },
               new ushort[2] {0x1c, 0x41},
               new ushort[2] {0xFB, 0xFC})
            , new State(
               new string[112] {"[exp_expression_list → exp_expression_list , • expression, ]/,]", "[expression → • exp_op12_conditional, ]/,]", "[expression → • exp_op13_assigment, ]/,]", "[exp_op12_conditional → • exp_op11, ]/,]", "[exp_op12_conditional → • exp_op11 ? expression : expression, ]/,]", "[exp_op13_assigment → • exp_op1 = expression, ]/,]", "[exp_op13_assigment → • exp_op1 += expression, ]/,]", "[exp_op13_assigment → • exp_op1 -= expression, ]/,]", "[exp_op13_assigment → • exp_op1 *= expression, ]/,]", "[exp_op13_assigment → • exp_op1 /= expression, ]/,]", "[exp_op13_assigment → • exp_op1 %= expression, ]/,]", "[exp_op13_assigment → • exp_op1 &= expression, ]/,]", "[exp_op13_assigment → • exp_op1 |= expression, ]/,]", "[exp_op13_assigment → • exp_op1 ^= expression, ]/,]", "[exp_op13_assigment → • exp_op1 <<= expression, ]/,]", "[exp_op13_assigment → • exp_op1 >>= expression, ]/,]", "[exp_op11 → • exp_op10, ]/,/||/?]", "[exp_op11 → • exp_op11 || exp_op10, ]/,/||/?]", "[exp_op1 → • exp_op0, ]/,/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • + exp_op1, ]/,/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • - exp_op1, ]/,/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • ! exp_op1, ]/,/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • ~ exp_op1, ]/,/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_pre_increment, ]/,/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_pre_decrement, ]/,/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1 → • exp_op1_cast, ]/,/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op10 → • exp_op9, ]/,/&&/?]", "[exp_op10 → • exp_op10 && exp_op9, ]/,/&&/?]", "[exp_op0 → • exp_op0_no_array, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0 → • exp_op0_array_creation, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_increment → • ++ exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_decrement → • -- exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_cast → • ( type ) exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op9 → • exp_op8, ]/,/|/?]", "[exp_op9 → • exp_op9 | exp_op8, ]/,/|/?]", "[exp_op0_no_array → • exp_atom, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_invoke, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_obj_creation, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_increment, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_decrement, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_member_access, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_typeof, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_checked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_unchecked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_array array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op8 → • exp_op7, ]/,/^/?]", "[exp_op8 → • exp_op8 ^ exp_op7, ]/,/^/?]", "[exp_atom → • NULL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_HEXA, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • REAL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • CHARACTER_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_REGULAR, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_VERBATIM, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • this, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • base, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_increment → • exp_op0 ++, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_decrement → • exp_op0 --, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_typeof → • typeof ( type_return ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_checked → • checked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_unchecked → • unchecked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op7 → • exp_op6, ]/,/&/?]", "[exp_op7 → • exp_op7 & exp_op6, ]/,/&/?]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]", "[exp_op6 → • exp_op5, ]/,/==/!=/?]", "[exp_op6 → • exp_op6 == exp_op5, ]/,/==/!=/?]", "[exp_op6 → • exp_op6 != exp_op5, ]/,/==/!=/?]", "[exp_op5 → • exp_op4, ]/,/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 < exp_op4, ]/,/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 <= exp_op4, ]/,/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 > exp_op4, ]/,/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 >= exp_op4, ]/,/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 is exp_op4, ]/,/</<=/>/>=/is/as/?]", "[exp_op5 → • exp_op5 as exp_op4, ]/,/</<=/>/>=/is/as/?]", "[exp_op4 → • exp_op3, ]/,/<</>>/?]", "[exp_op4 → • exp_op4 << exp_op3, ]/,/<</>>/?]", "[exp_op4 → • exp_op4 >> exp_op3, ]/,/<</>>/?]", "[exp_op3 → • exp_op2, ]/,/+/-/?]", "[exp_op3 → • exp_op3 + exp_op2, ]/,/+/-/?]", "[exp_op3 → • exp_op3 - exp_op2, ]/,/+/-/?]", "[exp_op2 → • exp_op1, ]/,/*///%/?]", "[exp_op2 → • exp_op2 * exp_op1, ]/,/*///%/?]", "[exp_op2 → • exp_op2 / exp_op1, ]/,/*///%/?]", "[exp_op2 → • exp_op2 % exp_op1, ]/,/*///%/?]"},
               new Terminal[38] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D)},
               new DeciderState[39] {
                   new DeciderState(
                   new ushort[38] {0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[38] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[30] {0x3d, 0x3b, 0x3c, 0x3a, 0x30, 0x39, 0x2c, 0x2d, 0x2e, 0x2f, 0x38, 0x2b, 0x2a, 0x37, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x36, 0x1e, 0x35, 0x34, 0x33, 0x32, 0x31},
               new ushort[30] {0xFD, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x20, 0x2D, 0x31, 0x41, 0x42, 0x43, 0x44})
            , new State(
               new string[1] {"[array_initializer → { variable_initializer_list } •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x94])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[variable_initializer_list → variable_initializer _m182 •, }]"},
               new Terminal[1] {new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0xB4},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x97])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[115] {"[_m182 → , • variable_initializer _m182, }]", "[variable_initializer → • expression, ,/}]", "[variable_initializer → • array_initializer, ,/}]", "[expression → • exp_op12_conditional, ,/}]", "[expression → • exp_op13_assigment, ,/}]", "[array_initializer → • { variable_initializer_list }, ,/}]", "[exp_op12_conditional → • exp_op11, ,/}]", "[exp_op12_conditional → • exp_op11 ? expression : expression, ,/}]", "[exp_op13_assigment → • exp_op1 = expression, ,/}]", "[exp_op13_assigment → • exp_op1 += expression, ,/}]", "[exp_op13_assigment → • exp_op1 -= expression, ,/}]", "[exp_op13_assigment → • exp_op1 *= expression, ,/}]", "[exp_op13_assigment → • exp_op1 /= expression, ,/}]", "[exp_op13_assigment → • exp_op1 %= expression, ,/}]", "[exp_op13_assigment → • exp_op1 &= expression, ,/}]", "[exp_op13_assigment → • exp_op1 |= expression, ,/}]", "[exp_op13_assigment → • exp_op1 ^= expression, ,/}]", "[exp_op13_assigment → • exp_op1 <<= expression, ,/}]", "[exp_op13_assigment → • exp_op1 >>= expression, ,/}]", "[exp_op11 → • exp_op10, ,/||/?/}]", "[exp_op11 → • exp_op11 || exp_op10, ,/||/?/}]", "[exp_op1 → • exp_op0, ,/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • + exp_op1, ,/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • - exp_op1, ,/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ! exp_op1, ,/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • ~ exp_op1, ,/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_increment, ,/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_pre_decrement, ,/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op1 → • exp_op1_cast, ,/?/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op10 → • exp_op9, ,/&&/?/}]", "[exp_op10 → • exp_op10 && exp_op9, ,/&&/?/}]", "[exp_op0 → • exp_op0_no_array, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0 → • exp_op0_array_creation, ./(/++/--/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_increment → • ++ exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_pre_decrement → • -- exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op1_cast → • ( type ) exp_op1, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op9 → • exp_op8, ,/|/?/}]", "[exp_op9 → • exp_op9 | exp_op8, ,/|/?/}]", "[exp_op0_no_array → • exp_atom, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_invoke, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_obj_creation, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_increment, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_post_decrement, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_member_access, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_typeof, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_checked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_no_array → • exp_op0_unchecked, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] type_array_rank, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ] array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_non_array [ exp_expression_list ], =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_array_creation → • new type_array array_initializer, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op8 → • exp_op7, ,/^/?/}]", "[exp_op8 → • exp_op8 ^ exp_op7, ,/^/?/}]", "[exp_atom → • NULL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_TRUE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • BOOLEAN_LITTERAL_FALSE, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_DECIMAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • INTEGER_LITTERAL_HEXA, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • REAL_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • CHARACTER_LITTERAL, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_REGULAR, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • STRING_LITTERAL_VERBATIM, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • this, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • base, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_atom → • ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_invoke → • exp_op0 ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( exp_argument_list ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_obj_creation → • new type ( ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_increment → • exp_op0 ++, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_post_decrement → • exp_op0 --, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • exp_op0 . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_member_access → • type_predefined . IDENTIFIER, =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_typeof → • typeof ( type_return ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_checked → • checked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op0_unchecked → • unchecked ( expression ), =/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=]", "[exp_op7 → • exp_op6, ,/&/?/}]", "[exp_op7 → • exp_op7 & exp_op6, ,/&/?/}]", "[type_predefined → • bool, .]", "[type_predefined → • byte, .]", "[type_predefined → • char, .]", "[type_predefined → • decimal, .]", "[type_predefined → • double, .]", "[type_predefined → • float, .]", "[type_predefined → • int, .]", "[type_predefined → • long, .]", "[type_predefined → • object, .]", "[type_predefined → • sbyte, .]", "[type_predefined → • short, .]", "[type_predefined → • string, .]", "[type_predefined → • uint, .]", "[type_predefined → • ulong, .]", "[type_predefined → • ushort, .]", "[exp_op6 → • exp_op5, ,/==/!=/?/}]", "[exp_op6 → • exp_op6 == exp_op5, ,/==/!=/?/}]", "[exp_op6 → • exp_op6 != exp_op5, ,/==/!=/?/}]", "[exp_op5 → • exp_op4, ,/</<=/>/>=/is/as/?/}]", "[exp_op5 → • exp_op5 < exp_op4, ,/</<=/>/>=/is/as/?/}]", "[exp_op5 → • exp_op5 <= exp_op4, ,/</<=/>/>=/is/as/?/}]", "[exp_op5 → • exp_op5 > exp_op4, ,/</<=/>/>=/is/as/?/}]", "[exp_op5 → • exp_op5 >= exp_op4, ,/</<=/>/>=/is/as/?/}]", "[exp_op5 → • exp_op5 is exp_op4, ,/</<=/>/>=/is/as/?/}]", "[exp_op5 → • exp_op5 as exp_op4, ,/</<=/>/>=/is/as/?/}]", "[exp_op4 → • exp_op3, ,/<</>>/?/}]", "[exp_op4 → • exp_op4 << exp_op3, ,/<</>>/?/}]", "[exp_op4 → • exp_op4 >> exp_op3, ,/<</>>/?/}]", "[exp_op3 → • exp_op2, ,/+/-/?/}]", "[exp_op3 → • exp_op3 + exp_op2, ,/+/-/?/}]", "[exp_op3 → • exp_op3 - exp_op2, ,/+/-/?/}]", "[exp_op2 → • exp_op1, ,/*///%/?/}]", "[exp_op2 → • exp_op2 * exp_op1, ,/*///%/?/}]", "[exp_op2 → • exp_op2 / exp_op1, ,/*///%/?/}]", "[exp_op2 → • exp_op2 % exp_op1, ,/*///%/?/}]"},
               new Terminal[39] {new Terminal("NULL_LITTERAL", 0x8), new Terminal("BOOLEAN_LITTERAL_TRUE", 0x9), new Terminal("BOOLEAN_LITTERAL_FALSE", 0xA), new Terminal("INTEGER_LITTERAL_DECIMAL", 0xC), new Terminal("INTEGER_LITTERAL_HEXA", 0xD), new Terminal("REAL_LITTERAL", 0xF), new Terminal("CHARACTER_LITTERAL", 0x10), new Terminal("STRING_LITTERAL_REGULAR", 0x11), new Terminal("STRING_LITTERAL_VERBATIM", 0x12), new Terminal("IDENTIFIER", 0x13), new Terminal("_T[object]", 0x46), new Terminal("_T[string]", 0x47), new Terminal("_T[bool]", 0x48), new Terminal("_T[decimal]", 0x49), new Terminal("_T[sbyte]", 0x4A), new Terminal("_T[byte]", 0x4B), new Terminal("_T[short]", 0x4C), new Terminal("_T[ushort]", 0x4D), new Terminal("_T[int]", 0x4E), new Terminal("_T[uint]", 0x4F), new Terminal("_T[long]", 0x50), new Terminal("_T[ulong]", 0x51), new Terminal("_T[char]", 0x52), new Terminal("_T[float]", 0x53), new Terminal("_T[double]", 0x54), new Terminal("_T[this]", 0x6A), new Terminal("_T[base]", 0x6B), new Terminal("_T[(]", 0x6C), new Terminal("_T[new]", 0x70), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[typeof]", 0x79), new Terminal("_T[checked]", 0x7C), new Terminal("_T[unchecked]", 0x7F), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[!]", 0x8C), new Terminal("_T[~]", 0x8D), new Terminal("_T[{]", 0xB3)},
               new DeciderState[40] {
                   new DeciderState(
                   new ushort[39] {0xB3, 0x8A, 0x8B, 0x8C, 0x8D, 0x73, 0x74, 0x6C, 0x70, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x6A, 0x6B, 0x79, 0x7C, 0x7F, 0x48, 0x4B, 0x52, 0x49, 0x54, 0x53, 0x4E, 0x50, 0x46, 0x4A, 0x4C, 0x47, 0x4F, 0x51, 0x4D},
                   new ushort[39] {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xC0, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x8, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xA, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xB, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x12, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x13, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x14, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x1F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x21, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x22, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x23, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x24, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x25, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x26, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x27, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x28, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x29, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x2F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x30, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x32, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x33, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x34, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x35, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x36, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x37, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x38, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x39, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3A, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3B, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3C, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3D, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3E, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x3F, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0x40, new Rule())
               },
               new ushort[32] {0x42, 0x3d, 0x41, 0x3b, 0x3c, 0x3a, 0x30, 0x39, 0x2c, 0x2d, 0x2e, 0x2f, 0x38, 0x2b, 0x2a, 0x37, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28, 0x29, 0x36, 0x1e, 0x35, 0x34, 0x33, 0x32, 0x31},
               new ushort[32] {0xFE, 0xE8, 0xE9, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x20, 0x2D, 0x31, 0x41, 0x42, 0x43, 0x44})
            , new State(
               new string[1] {"[exp_op0_obj_creation → new type ( exp_argument_list ) •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x3A])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[3] {"[exp_op0_array_creation → new type_non_array [ exp_expression_list ] type_array_rank • array_initializer, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[exp_op0_array_creation → new type_non_array [ exp_expression_list ] type_array_rank •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]", "[array_initializer → • { variable_initializer_list }, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[43] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[{]", 0xB3), new Terminal("_T[}]", 0xB4)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[43] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4, 0xB3},
                   new ushort[43] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x46])
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xC0, new Rule())
               },
               new ushort[1] {0x41},
               new ushort[1] {0xFF})
            , new State(
               new string[1] {"[exp_op0_array_creation → new type_non_array [ exp_expression_list ] array_initializer •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x47])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[exp_expression_list → exp_expression_list , expression •, ]/,]"},
               new Terminal[2] {new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[2] {0x57, 0x58},
                   new ushort[2] {0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x8E])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[3] {"[_m182 → , variable_initializer • _m182, }]", "[_m182 → • , variable_initializer _m182, }]", "[_m182 → •, }]"},
               new Terminal[2] {new Terminal("_T[,]", 0x58), new Terminal("_T[}]", 0xB4)},
               new DeciderState[3] {
                   new DeciderState(
                   new ushort[2] {0x58, 0xB4},
                   new ushort[2] {0x1, 0x2}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xF9, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0xA0])
               },
               new ushort[1] {0xb6},
               new ushort[1] {0x100})
            , new State(
               new string[1] {"[exp_op0_array_creation → new type_non_array [ exp_expression_list ] type_array_rank array_initializer •, $/./]/,/(/)/++/--/+/-/*///%/<</>>/</<=/>/>=/is/as/==/!=/&/^/|/&&/||/?/:/=/+=/-=/*=//=/%=/&=/|=/^=/<<=/>>=/}]"},
               new Terminal[42] {new Terminal("$", 0x2), new Terminal("_T[.]", 0x44), new Terminal("_T[]]", 0x57), new Terminal("_T[,]", 0x58), new Terminal("_T[(]", 0x6C), new Terminal("_T[)]", 0x6D), new Terminal("_T[++]", 0x73), new Terminal("_T[--]", 0x74), new Terminal("_T[+]", 0x8A), new Terminal("_T[-]", 0x8B), new Terminal("_T[*]", 0x8E), new Terminal("_T[/]", 0x8F), new Terminal("_T[%]", 0x90), new Terminal("_T[<<]", 0x93), new Terminal("_T[>>]", 0x94), new Terminal("_T[<]", 0x95), new Terminal("_T[<=]", 0x96), new Terminal("_T[>]", 0x97), new Terminal("_T[>=]", 0x98), new Terminal("_T[is]", 0x99), new Terminal("_T[as]", 0x9A), new Terminal("_T[==]", 0x9B), new Terminal("_T[!=]", 0x9C), new Terminal("_T[&]", 0x9D), new Terminal("_T[^]", 0x9E), new Terminal("_T[|]", 0x9F), new Terminal("_T[&&]", 0xA0), new Terminal("_T[||]", 0xA1), new Terminal("_T[?]", 0xA2), new Terminal("_T[:]", 0xA3), new Terminal("_T[=]", 0xA4), new Terminal("_T[+=]", 0xA5), new Terminal("_T[-=]", 0xA6), new Terminal("_T[*=]", 0xA7), new Terminal("_T[/=]", 0xA8), new Terminal("_T[%=]", 0xA9), new Terminal("_T[&=]", 0xAA), new Terminal("_T[|=]", 0xAB), new Terminal("_T[^=]", 0xAC), new Terminal("_T[<<=]", 0xAD), new Terminal("_T[>>=]", 0xAE), new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[42] {0x2, 0x44, 0x57, 0x58, 0x6C, 0x6D, 0x73, 0x74, 0x8A, 0x8B, 0x8E, 0x8F, 0x90, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xB4},
                   new ushort[42] {0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x45])
               },
               new ushort[0] {},
               new ushort[0] {})
            , new State(
               new string[1] {"[_m182 → , variable_initializer _m182 •, }]"},
               new Terminal[1] {new Terminal("_T[}]", 0xB4)},
               new DeciderState[2] {
                   new DeciderState(
                   new ushort[1] {0xB4},
                   new ushort[1] {0x1}, 0xFFFF, new Rule())
                   , new DeciderState(
                   new ushort[0] {},
                   new ushort[0] {}, 0xFFFF, staticRules[0x9F])
               },
               new ushort[0] {},
               new ushort[0] {})
        };
        protected override void setup()
        {
            rules = staticRules;
            states = staticStates;
            errorSimulationLength = 3;
        }
        public Test2_Parser(Test2_Lexer lexer) : base (lexer) {}
    }
}
