
namespace Analyzer
{


    public class Lexer_Hime_Earth_CIL_GrammarCSharp : Hime.Kernel.Parsers.LexerText
    {
        private static ushort[] p_SymbolsSID = { 0x128, 0x13, 0xC, 0xDD, 0xEF, 0xF0, 0xF1, 0x105, 0x106, 0x123, 0x124, 0x125, 0x126, 0x127, 0x129, 0x12E, 0x130, 0x13D, 0x136, 0x137, 0x138, 0x13B, 0x13C, 0x151, 0x152, 0x158, 0x7, 0x141, 0xF, 0x11, 0x176, 0x185, 0x132, 0x160, 0x10C, 0x13E, 0x10D, 0x13F, 0x135, 0x140, 0x142, 0x12C, 0x12F, 0x12D, 0x131, 0x133, 0x134, 0x139, 0x143, 0x145, 0x13A, 0x144, 0x109, 0x19D, 0x17E, 0xD, 0x10, 0x12, 0x14B, 0x1AB, 0xE7, 0x146, 0x147, 0x1AC, 0x14A, 0x1AA, 0x21F, 0x103, 0x29A, 0xE1, 0xE4, 0x104, 0xE8, 0xE9, 0x1A0, 0xEB, 0x16B, 0x102, 0x163, 0x286, 0x18B, 0x195, 0x220, 0xEC, 0x294, 0xE3, 0xE5, 0x187, 0x1A3, 0xEA, 0x15B, 0x197, 0x256, 0x297, 0x1EC, 0x177, 0x112, 0xDF, 0xE0, 0x25E, 0x1BE, 0x173, 0x1CA, 0xED, 0xE6, 0x193, 0x1AD, 0x14E, 0x1AF, 0x1CD, 0x296, 0x2A0, 0x183, 0x19B, 0xE2, 0x16D, 0x115, 0x1C9, 0x1B2, 0x1CB, 0x222, 0x288, 0x1B1, 0x229, 0x189, 0x1C0, 0x29F, 0x1CC, 0x1BF, 0x298, 0x22A, 0x2AE, 0x118, 0x27E, 0x1B0 };
        private static string[] p_SymbolsName = { "_T[/]", "IDENTIFIER", "INTEGER_LITTERAL_DECIMAL", "_T[.]", "_T[[]", "_T[]]", "_T[,]", "_T[(]", "_T[)]", "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[*]", "_T[%]", "_T[<]", "_T[>]", "_T[=]", "_T[&]", "_T[^]", "_T[|]", "_T[?]", "_T[:]", "_T[{]", "_T[}]", "_T[;]", "SEPARATOR", "_T[/=]", "REAL_LITTERAL", "STRING_LITTERAL_REGULAR", "_T[do]", "_T[in]", "_T[is]", "_T[if]", "_T[++]", "_T[+=]", "_T[--]", "_T[-=]", "_T[!=]", "_T[*=]", "_T[%=]", "_T[<<]", "_T[<=]", "_T[>>]", "_T[>=]", "_T[as]", "_T[==]", "_T[&&]", "_T[&=]", "_T[^=]", "_T[||]", "_T[|=]", "_T[new]", "_T[try]", "_T[for]", "INTEGER_LITTERAL_HEXA", "CHARACTER_LITTERAL", "STRING_LITTERAL_VERBATIM", "_T[out]", "_T[set]", "_T[int]", "_T[<<=]", "_T[>>=]", "_T[add]", "_T[ref]", "_T[get]", "_T[true]", "_T[this]", "_T[type]", "_T[bool]", "_T[byte]", "_T[base]", "_T[uint]", "_T[long]", "_T[lock]", "_T[char]", "_T[case]", "_T[void]", "_T[else]", "_T[enum]", "_T[goto]", "_T[throw]", "_T[false]", "_T[float]", "_T[field]", "_T[sbyte]", "_T[short]", "_T[break]", "_T[using]", "_T[ulong]", "_T[const]", "_T[catch]", "_T[class]", "_T[param]", "_T[event]", "_T[while]", "_T[typeof]", "_T[object]", "_T[string]", "_T[struct]", "_T[static]", "_T[switch]", "_T[sealed]", "_T[double]", "_T[ushort]", "_T[return]", "_T[remove]", "_T[params]", "_T[public]", "_T[extern]", "_T[method]", "_T[module]", "_T[foreach]", "_T[finally]", "_T[decimal]", "_T[default]", "_T[checked]", "_T[virtual]", "_T[private]", "_T[override]", "_T[operator]", "_T[delegate]", "_T[internal]", "_T[implicit]", "_T[continue]", "_T[volatile]", "_T[assembly]", "_T[abstract]", "_T[readonly]", "_T[property]", "_T[explicit]", "_T[namespace]", "_T[unchecked]", "_T[interface]", "_T[protected]" };

        private static ushort[][] p_Transitions0 = { new ushort[3] { 0x2F, 0x2F, 0x2D }, new ushort[3] { 0x6E, 0x6E, 0x2E }, new ushort[3] { 0x74, 0x74, 0x2F }, new ushort[3] { 0x66, 0x66, 0x130 }, new ushort[3] { 0x30, 0x30, 0x134 }, new ushort[3] { 0x27, 0x27, 0x1 }, new ushort[3] { 0x22, 0x22, 0x2 }, new ushort[3] { 0x40, 0x40, 0x3 }, new ushort[3] { 0x2E, 0x2E, 0x139 }, new ushort[3] { 0x6F, 0x6F, 0x30 }, new ushort[3] { 0x73, 0x73, 0x31 }, new ushort[3] { 0x62, 0x62, 0x32 }, new ushort[3] { 0x64, 0x64, 0x131 }, new ushort[3] { 0x75, 0x75, 0x13A }, new ushort[3] { 0x69, 0x69, 0x33 }, new ushort[3] { 0x6C, 0x6C, 0x13B }, new ushort[3] { 0x63, 0x63, 0x34 }, new ushort[3] { 0x5B, 0x5B, 0x140 }, new ushort[3] { 0x5D, 0x5D, 0x141 }, new ushort[3] { 0x2C, 0x2C, 0x142 }, new ushort[3] { 0x76, 0x76, 0x35 }, new ushort[3] { 0x28, 0x28, 0x143 }, new ushort[3] { 0x29, 0x29, 0x144 }, new ushort[3] { 0x2B, 0x2B, 0x145 }, new ushort[3] { 0x2D, 0x2D, 0x146 }, new ushort[3] { 0x21, 0x21, 0x147 }, new ushort[3] { 0x7E, 0x7E, 0x148 }, new ushort[3] { 0x2A, 0x2A, 0x149 }, new ushort[3] { 0x25, 0x25, 0x14A }, new ushort[3] { 0x3C, 0x3C, 0x14B }, new ushort[3] { 0x3E, 0x3E, 0x14C }, new ushort[3] { 0x61, 0x61, 0x36 }, new ushort[3] { 0x3D, 0x3D, 0x14D }, new ushort[3] { 0x26, 0x26, 0x14E }, new ushort[3] { 0x5E, 0x5E, 0x14F }, new ushort[3] { 0x7C, 0x7C, 0x150 }, new ushort[3] { 0x3F, 0x3F, 0x151 }, new ushort[3] { 0x3A, 0x3A, 0x152 }, new ushort[3] { 0x72, 0x72, 0x37 }, new ushort[3] { 0x70, 0x70, 0x38 }, new ushort[3] { 0x7B, 0x7B, 0x153 }, new ushort[3] { 0x7D, 0x7D, 0x154 }, new ushort[3] { 0x3B, 0x3B, 0x155 }, new ushort[3] { 0x65, 0x65, 0x39 }, new ushort[3] { 0x77, 0x77, 0x3A }, new ushort[3] { 0x67, 0x67, 0x3B }, new ushort[3] { 0x6D, 0x6D, 0x132 }, new ushort[3] { 0xA, 0xA, 0x156 }, new ushort[3] { 0x2028, 0x2029, 0x156 }, new ushort[3] { 0x9, 0x9, 0x158 }, new ushort[3] { 0xB, 0xC, 0x158 }, new ushort[3] { 0x20, 0x20, 0x158 }, new ushort[3] { 0x31, 0x39, 0x135 }, new ushort[3] { 0x44, 0x44, 0x133 }, new ushort[3] { 0x46, 0x46, 0x133 }, new ushort[3] { 0x4D, 0x4D, 0x133 }, new ushort[3] { 0x41, 0x43, 0x3C }, new ushort[3] { 0x45, 0x45, 0x3C }, new ushort[3] { 0x47, 0x4B, 0x3C }, new ushort[3] { 0x4E, 0x54, 0x3C }, new ushort[3] { 0x56, 0x5A, 0x3C }, new ushort[3] { 0x68, 0x68, 0x3C }, new ushort[3] { 0x6A, 0x6B, 0x3C }, new ushort[3] { 0x71, 0x71, 0x3C }, new ushort[3] { 0x78, 0x7A, 0x3C }, new ushort[3] { 0x4C, 0x4C, 0x13C }, new ushort[3] { 0x55, 0x55, 0x13D }, new ushort[3] { 0xD, 0xD, 0x157 } };

        private static ushort[][] p_Transitions1 = { new ushort[3] { 0x5C, 0x5C, 0xC }, new ushort[3] { 0xA, 0xA, 0xE }, new ushort[3] { 0x27, 0x27, 0xE }, new ushort[3] { 0x2028, 0x2029, 0xE }, new ushort[3] { 0xD, 0xD, 0xF }, new ushort[3] { 0x0, 0x9, 0x10 }, new ushort[3] { 0xB, 0xC, 0x10 }, new ushort[3] { 0xE, 0x26, 0x10 }, new ushort[3] { 0x28, 0x5B, 0x10 }, new ushort[3] { 0x5D, 0x2027, 0x10 }, new ushort[3] { 0x202A, 0xFFFF, 0x10 } };

        private static ushort[][] p_Transitions2 = { new ushort[3] { 0x5C, 0x5C, 0xD }, new ushort[3] { 0x22, 0x22, 0x165 }, new ushort[3] { 0xD, 0xD, 0xF }, new ushort[3] { 0xA, 0xA, 0xE }, new ushort[3] { 0x2028, 0x2029, 0xE }, new ushort[3] { 0x0, 0x9, 0x2 }, new ushort[3] { 0xB, 0xC, 0x2 }, new ushort[3] { 0xE, 0x21, 0x2 }, new ushort[3] { 0x23, 0x5B, 0x2 }, new ushort[3] { 0x5D, 0x2027, 0x2 }, new ushort[3] { 0x202A, 0xFFFF, 0x2 } };

        private static ushort[][] p_Transitions3 = { new ushort[3] { 0x22, 0x22, 0x11 }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions4 = { new ushort[3] { 0xA, 0xA, 0xE }, new ushort[3] { 0x2028, 0x2029, 0xE }, new ushort[3] { 0x0, 0x9, 0x13 }, new ushort[3] { 0xB, 0xC, 0x13 }, new ushort[3] { 0xE, 0x2027, 0x13 }, new ushort[3] { 0x202A, 0xFFFF, 0x13 }, new ushort[3] { 0xD, 0xD, 0xF } };

        private static ushort[][] p_Transitions5 = { new ushort[3] { 0xA, 0xA, 0xE }, new ushort[3] { 0x2028, 0x2029, 0xE }, new ushort[3] { 0x0, 0x9, 0x2C }, new ushort[3] { 0xB, 0xC, 0x2C }, new ushort[3] { 0xE, 0x2027, 0x2C }, new ushort[3] { 0x202A, 0xFFFF, 0x2C }, new ushort[3] { 0xD, 0xD, 0xF } };

        private static ushort[][] p_Transitions6 = { new ushort[3] { 0x0, 0x29, 0x6 }, new ushort[3] { 0x2B, 0xFFFF, 0x6 }, new ushort[3] { 0x2A, 0x2A, 0x14 } };

        private static ushort[][] p_Transitions7 = { new ushort[3] { 0x0, 0x29, 0x7 }, new ushort[3] { 0x2B, 0xFFFF, 0x7 }, new ushort[3] { 0x2A, 0x2A, 0x2B } };

        private static ushort[][] p_Transitions8 = { new ushort[3] { 0x30, 0x39, 0x180 }, new ushort[3] { 0x41, 0x46, 0x180 }, new ushort[3] { 0x61, 0x66, 0x180 } };

        private static ushort[][] p_Transitions9 = { new ushort[3] { 0x2B, 0x2B, 0xB }, new ushort[3] { 0x2D, 0x2D, 0xB }, new ushort[3] { 0x31, 0x39, 0x15D }, new ushort[3] { 0x30, 0x30, 0x15E } };

        private static ushort[][] p_Transitions10 = { new ushort[3] { 0x31, 0x39, 0x15B }, new ushort[3] { 0x30, 0x30, 0x15C } };

        private static ushort[][] p_Transitions11 = { new ushort[3] { 0x31, 0x39, 0x15D }, new ushort[3] { 0x30, 0x30, 0x15E } };

        private static ushort[][] p_Transitions12 = { new ushort[3] { 0x78, 0x78, 0x15 }, new ushort[3] { 0x55, 0x55, 0x17 }, new ushort[3] { 0x75, 0x75, 0x17 }, new ushort[3] { 0x22, 0x22, 0x10 }, new ushort[3] { 0x27, 0x27, 0x10 }, new ushort[3] { 0x30, 0x30, 0x10 }, new ushort[3] { 0x5C, 0x5C, 0x10 }, new ushort[3] { 0x61, 0x62, 0x10 }, new ushort[3] { 0x66, 0x66, 0x10 }, new ushort[3] { 0x6E, 0x6E, 0x10 }, new ushort[3] { 0x72, 0x72, 0x10 }, new ushort[3] { 0x74, 0x74, 0x10 }, new ushort[3] { 0x76, 0x76, 0x10 } };

        private static ushort[][] p_Transitions13 = { new ushort[3] { 0x78, 0x78, 0x1F }, new ushort[3] { 0x55, 0x55, 0x18 }, new ushort[3] { 0x75, 0x75, 0x18 }, new ushort[3] { 0x22, 0x22, 0x2 }, new ushort[3] { 0x27, 0x27, 0x2 }, new ushort[3] { 0x30, 0x30, 0x2 }, new ushort[3] { 0x5C, 0x5C, 0x2 }, new ushort[3] { 0x61, 0x62, 0x2 }, new ushort[3] { 0x66, 0x66, 0x2 }, new ushort[3] { 0x6E, 0x6E, 0x2 }, new ushort[3] { 0x72, 0x72, 0x2 }, new ushort[3] { 0x74, 0x74, 0x2 }, new ushort[3] { 0x76, 0x76, 0x2 } };

        private static ushort[][] p_Transitions14 = { };

        private static ushort[][] p_Transitions15 = { new ushort[3] { 0xA, 0xA, 0xE } };

        private static ushort[][] p_Transitions16 = { new ushort[3] { 0x27, 0x27, 0x184 } };

        private static ushort[][] p_Transitions17 = { new ushort[3] { 0x0, 0x21, 0x11 }, new ushort[3] { 0x23, 0xFFFF, 0x11 }, new ushort[3] { 0x22, 0x22, 0x185 } };

        private static ushort[][] p_Transitions18 = { new ushort[3] { 0x2A, 0x2A, 0x7 }, new ushort[3] { 0x2F, 0x2F, 0x5 } };

        private static ushort[][] p_Transitions19 = { new ushort[3] { 0xA, 0xA, 0x18E }, new ushort[3] { 0x2028, 0x2029, 0x18E }, new ushort[3] { 0xD, 0xD, 0x18F } };

        private static ushort[][] p_Transitions20 = { new ushort[3] { 0x2F, 0x2F, 0x190 }, new ushort[3] { 0x0, 0x2E, 0x6 }, new ushort[3] { 0x30, 0xFFFF, 0x6 } };

        private static ushort[][] p_Transitions21 = { new ushort[3] { 0x30, 0x39, 0x22 }, new ushort[3] { 0x41, 0x46, 0x22 }, new ushort[3] { 0x61, 0x66, 0x22 } };

        private static ushort[][] p_Transitions22 = { new ushort[3] { 0x30, 0x39, 0x25 }, new ushort[3] { 0x41, 0x46, 0x25 }, new ushort[3] { 0x61, 0x66, 0x25 } };

        private static ushort[][] p_Transitions23 = { new ushort[3] { 0x30, 0x39, 0x19 }, new ushort[3] { 0x41, 0x46, 0x19 }, new ushort[3] { 0x61, 0x66, 0x19 } };

        private static ushort[][] p_Transitions24 = { new ushort[3] { 0x30, 0x39, 0x1A }, new ushort[3] { 0x41, 0x46, 0x1A }, new ushort[3] { 0x61, 0x66, 0x1A } };

        private static ushort[][] p_Transitions25 = { new ushort[3] { 0x30, 0x39, 0x1C }, new ushort[3] { 0x41, 0x46, 0x1C }, new ushort[3] { 0x61, 0x66, 0x1C } };

        private static ushort[][] p_Transitions26 = { new ushort[3] { 0x30, 0x39, 0x1D }, new ushort[3] { 0x41, 0x46, 0x1D }, new ushort[3] { 0x61, 0x66, 0x1D } };

        private static ushort[][] p_Transitions27 = { new ushort[3] { 0x30, 0x39, 0x1E }, new ushort[3] { 0x41, 0x46, 0x1E }, new ushort[3] { 0x61, 0x66, 0x1E } };

        private static ushort[][] p_Transitions28 = { new ushort[3] { 0x30, 0x39, 0x16 }, new ushort[3] { 0x41, 0x46, 0x16 }, new ushort[3] { 0x61, 0x66, 0x16 } };

        private static ushort[][] p_Transitions29 = { new ushort[3] { 0x30, 0x39, 0x20 }, new ushort[3] { 0x41, 0x46, 0x20 }, new ushort[3] { 0x61, 0x66, 0x20 } };

        private static ushort[][] p_Transitions30 = { new ushort[3] { 0x30, 0x39, 0x21 }, new ushort[3] { 0x41, 0x46, 0x21 }, new ushort[3] { 0x61, 0x66, 0x21 } };

        private static ushort[][] p_Transitions31 = { new ushort[3] { 0x30, 0x39, 0x26 }, new ushort[3] { 0x41, 0x46, 0x26 }, new ushort[3] { 0x61, 0x66, 0x26 } };

        private static ushort[][] p_Transitions32 = { new ushort[3] { 0x30, 0x39, 0x27 }, new ushort[3] { 0x41, 0x46, 0x27 }, new ushort[3] { 0x61, 0x66, 0x27 } };

        private static ushort[][] p_Transitions33 = { new ushort[3] { 0x30, 0x39, 0x10 }, new ushort[3] { 0x41, 0x46, 0x10 }, new ushort[3] { 0x61, 0x66, 0x10 } };

        private static ushort[][] p_Transitions34 = { new ushort[3] { 0x30, 0x39, 0x23 }, new ushort[3] { 0x41, 0x46, 0x23 }, new ushort[3] { 0x61, 0x66, 0x23 }, new ushort[3] { 0x27, 0x27, 0x184 } };

        private static ushort[][] p_Transitions35 = { new ushort[3] { 0x30, 0x39, 0x24 }, new ushort[3] { 0x41, 0x46, 0x24 }, new ushort[3] { 0x61, 0x66, 0x24 }, new ushort[3] { 0x27, 0x27, 0x184 } };

        private static ushort[][] p_Transitions36 = { new ushort[3] { 0x30, 0x39, 0x10 }, new ushort[3] { 0x41, 0x46, 0x10 }, new ushort[3] { 0x61, 0x66, 0x10 }, new ushort[3] { 0x27, 0x27, 0x184 } };

        private static ushort[][] p_Transitions37 = { new ushort[3] { 0x30, 0x39, 0x1B }, new ushort[3] { 0x41, 0x46, 0x1B }, new ushort[3] { 0x61, 0x66, 0x1B }, new ushort[3] { 0x27, 0x27, 0x184 } };

        private static ushort[][] p_Transitions38 = { new ushort[3] { 0x30, 0x39, 0x28 }, new ushort[3] { 0x41, 0x46, 0x28 }, new ushort[3] { 0x61, 0x66, 0x28 }, new ushort[3] { 0x22, 0x22, 0x165 }, new ushort[3] { 0x5C, 0x5C, 0xD }, new ushort[3] { 0xD, 0xD, 0xF }, new ushort[3] { 0xA, 0xA, 0xE }, new ushort[3] { 0x2028, 0x2029, 0xE }, new ushort[3] { 0x0, 0x9, 0x2 }, new ushort[3] { 0xB, 0xC, 0x2 }, new ushort[3] { 0xE, 0x21, 0x2 }, new ushort[3] { 0x23, 0x2F, 0x2 }, new ushort[3] { 0x3A, 0x40, 0x2 }, new ushort[3] { 0x47, 0x5B, 0x2 }, new ushort[3] { 0x5D, 0x60, 0x2 }, new ushort[3] { 0x67, 0x2027, 0x2 }, new ushort[3] { 0x202A, 0xFFFF, 0x2 } };

        private static ushort[][] p_Transitions39 = { new ushort[3] { 0x30, 0x39, 0x26 }, new ushort[3] { 0x41, 0x46, 0x26 }, new ushort[3] { 0x61, 0x66, 0x26 }, new ushort[3] { 0x22, 0x22, 0x165 }, new ushort[3] { 0x5C, 0x5C, 0xD }, new ushort[3] { 0xD, 0xD, 0xF }, new ushort[3] { 0xA, 0xA, 0xE }, new ushort[3] { 0x2028, 0x2029, 0xE }, new ushort[3] { 0x0, 0x9, 0x2 }, new ushort[3] { 0xB, 0xC, 0x2 }, new ushort[3] { 0xE, 0x21, 0x2 }, new ushort[3] { 0x23, 0x2F, 0x2 }, new ushort[3] { 0x3A, 0x40, 0x2 }, new ushort[3] { 0x47, 0x5B, 0x2 }, new ushort[3] { 0x5D, 0x60, 0x2 }, new ushort[3] { 0x67, 0x2027, 0x2 }, new ushort[3] { 0x202A, 0xFFFF, 0x2 } };

        private static ushort[][] p_Transitions40 = { new ushort[3] { 0x30, 0x39, 0x29 }, new ushort[3] { 0x41, 0x46, 0x29 }, new ushort[3] { 0x61, 0x66, 0x29 }, new ushort[3] { 0x22, 0x22, 0x165 }, new ushort[3] { 0x5C, 0x5C, 0xD }, new ushort[3] { 0xD, 0xD, 0xF }, new ushort[3] { 0xA, 0xA, 0xE }, new ushort[3] { 0x2028, 0x2029, 0xE }, new ushort[3] { 0x0, 0x9, 0x2 }, new ushort[3] { 0xB, 0xC, 0x2 }, new ushort[3] { 0xE, 0x21, 0x2 }, new ushort[3] { 0x23, 0x2F, 0x2 }, new ushort[3] { 0x3A, 0x40, 0x2 }, new ushort[3] { 0x47, 0x5B, 0x2 }, new ushort[3] { 0x5D, 0x60, 0x2 }, new ushort[3] { 0x67, 0x2027, 0x2 }, new ushort[3] { 0x202A, 0xFFFF, 0x2 } };

        private static ushort[][] p_Transitions41 = { new ushort[3] { 0x30, 0x39, 0x2A }, new ushort[3] { 0x41, 0x46, 0x2A }, new ushort[3] { 0x61, 0x66, 0x2A }, new ushort[3] { 0x22, 0x22, 0x165 }, new ushort[3] { 0x5C, 0x5C, 0xD }, new ushort[3] { 0xD, 0xD, 0xF }, new ushort[3] { 0xA, 0xA, 0xE }, new ushort[3] { 0x2028, 0x2029, 0xE }, new ushort[3] { 0x0, 0x9, 0x2 }, new ushort[3] { 0xB, 0xC, 0x2 }, new ushort[3] { 0xE, 0x21, 0x2 }, new ushort[3] { 0x23, 0x2F, 0x2 }, new ushort[3] { 0x3A, 0x40, 0x2 }, new ushort[3] { 0x47, 0x5B, 0x2 }, new ushort[3] { 0x5D, 0x60, 0x2 }, new ushort[3] { 0x67, 0x2027, 0x2 }, new ushort[3] { 0x202A, 0xFFFF, 0x2 } };

        private static ushort[][] p_Transitions42 = { new ushort[3] { 0x22, 0x22, 0x165 }, new ushort[3] { 0x5C, 0x5C, 0xD }, new ushort[3] { 0xD, 0xD, 0xF }, new ushort[3] { 0xA, 0xA, 0xE }, new ushort[3] { 0x2028, 0x2029, 0xE }, new ushort[3] { 0x0, 0x9, 0x2 }, new ushort[3] { 0xB, 0xC, 0x2 }, new ushort[3] { 0xE, 0x21, 0x2 }, new ushort[3] { 0x23, 0x5B, 0x2 }, new ushort[3] { 0x5D, 0x2027, 0x2 }, new ushort[3] { 0x202A, 0xFFFF, 0x2 } };

        private static ushort[][] p_Transitions43 = { new ushort[3] { 0x2F, 0x2F, 0x17C }, new ushort[3] { 0x0, 0x2E, 0x7 }, new ushort[3] { 0x30, 0xFFFF, 0x7 } };

        private static ushort[][] p_Transitions44 = { new ushort[3] { 0xA, 0xA, 0x17C }, new ushort[3] { 0xD, 0xD, 0x17C }, new ushort[3] { 0x2028, 0x2029, 0x17C } };

        private static ushort[][] p_Transitions45 = { new ushort[3] { 0x2F, 0x2F, 0x4 }, new ushort[3] { 0x2A, 0x2A, 0x6 }, new ushort[3] { 0x3D, 0x3D, 0x159 } };

        private static ushort[][] p_Transitions46 = { new ushort[3] { 0x75, 0x75, 0x3D }, new ushort[3] { 0x65, 0x65, 0x44 }, new ushort[3] { 0x61, 0x61, 0x3E }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x62, 0x64, 0x3C }, new ushort[3] { 0x66, 0x74, 0x3C }, new ushort[3] { 0x76, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions47 = { new ushort[3] { 0x72, 0x72, 0x45 }, new ushort[3] { 0x68, 0x68, 0x3F }, new ushort[3] { 0x79, 0x79, 0x40 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x67, 0x3C }, new ushort[3] { 0x69, 0x71, 0x3C }, new ushort[3] { 0x73, 0x78, 0x3C }, new ushort[3] { 0x7A, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions48 = { new ushort[3] { 0x62, 0x62, 0x47 }, new ushort[3] { 0x75, 0x75, 0xE6 }, new ushort[3] { 0x76, 0x76, 0x48 }, new ushort[3] { 0x70, 0x70, 0x49 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x61, 0x3C }, new ushort[3] { 0x63, 0x6F, 0x3C }, new ushort[3] { 0x71, 0x74, 0x3C }, new ushort[3] { 0x77, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions49 = { new ushort[3] { 0x74, 0x74, 0x54 }, new ushort[3] { 0x62, 0x62, 0x55 }, new ushort[3] { 0x68, 0x68, 0x56 }, new ushort[3] { 0x77, 0x77, 0x5A }, new ushort[3] { 0x65, 0x65, 0xE7 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x61, 0x3C }, new ushort[3] { 0x63, 0x64, 0x3C }, new ushort[3] { 0x66, 0x67, 0x3C }, new ushort[3] { 0x69, 0x73, 0x3C }, new ushort[3] { 0x75, 0x76, 0x3C }, new ushort[3] { 0x78, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions50 = { new ushort[3] { 0x6F, 0x6F, 0x62 }, new ushort[3] { 0x79, 0x79, 0x63 }, new ushort[3] { 0x61, 0x61, 0x64 }, new ushort[3] { 0x72, 0x72, 0x4B }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x62, 0x6E, 0x3C }, new ushort[3] { 0x70, 0x71, 0x3C }, new ushort[3] { 0x73, 0x78, 0x3C }, new ushort[3] { 0x7A, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions51 = { new ushort[3] { 0x6E, 0x6E, 0x167 }, new ushort[3] { 0x73, 0x73, 0x168 }, new ushort[3] { 0x66, 0x66, 0x169 }, new ushort[3] { 0x6D, 0x6D, 0x6E }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x65, 0x3C }, new ushort[3] { 0x67, 0x6C, 0x3C }, new ushort[3] { 0x6F, 0x72, 0x3C }, new ushort[3] { 0x74, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions52 = { new ushort[3] { 0x68, 0x68, 0x71 }, new ushort[3] { 0x6F, 0x6F, 0x72 }, new ushort[3] { 0x61, 0x61, 0x75 }, new ushort[3] { 0x6C, 0x6C, 0x76 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x62, 0x67, 0x3C }, new ushort[3] { 0x69, 0x6B, 0x3C }, new ushort[3] { 0x6D, 0x6E, 0x3C }, new ushort[3] { 0x70, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions53 = { new ushort[3] { 0x6F, 0x6F, 0x81 }, new ushort[3] { 0x69, 0x69, 0x82 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x68, 0x3C }, new ushort[3] { 0x6A, 0x6E, 0x3C }, new ushort[3] { 0x70, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions54 = { new ushort[3] { 0x73, 0x73, 0x175 }, new ushort[3] { 0x64, 0x64, 0xE8 }, new ushort[3] { 0x62, 0x62, 0x8A }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x61, 0x3C }, new ushort[3] { 0x63, 0x63, 0x3C }, new ushort[3] { 0x65, 0x72, 0x3C }, new ushort[3] { 0x74, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions55 = { new ushort[3] { 0x65, 0x65, 0xE9 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions56 = { new ushort[3] { 0x61, 0x61, 0x83 }, new ushort[3] { 0x75, 0x75, 0x8C }, new ushort[3] { 0x72, 0x72, 0x8F }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x62, 0x71, 0x3C }, new ushort[3] { 0x73, 0x74, 0x3C }, new ushort[3] { 0x76, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions57 = { new ushort[3] { 0x6C, 0x6C, 0x90 }, new ushort[3] { 0x78, 0x78, 0x91 }, new ushort[3] { 0x76, 0x76, 0x4C }, new ushort[3] { 0x6E, 0x6E, 0x93 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6B, 0x3C }, new ushort[3] { 0x6D, 0x6D, 0x3C }, new ushort[3] { 0x6F, 0x75, 0x3C }, new ushort[3] { 0x77, 0x77, 0x3C }, new ushort[3] { 0x79, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions58 = { new ushort[3] { 0x68, 0x68, 0x5B }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x67, 0x3C }, new ushort[3] { 0x69, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions59 = { new ushort[3] { 0x6F, 0x6F, 0x94 }, new ushort[3] { 0x65, 0x65, 0xEA }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x6E, 0x3C }, new ushort[3] { 0x70, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions60 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions61 = { new ushort[3] { 0x6C, 0x6C, 0xEB }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6B, 0x3C }, new ushort[3] { 0x6D, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions62 = { new ushort[3] { 0x6D, 0x6D, 0x4D }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6C, 0x3C }, new ushort[3] { 0x6E, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions63 = { new ushort[3] { 0x69, 0x69, 0xED }, new ushort[3] { 0x72, 0x72, 0x9F }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x68, 0x3C }, new ushort[3] { 0x6A, 0x71, 0x3C }, new ushort[3] { 0x73, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions64 = { new ushort[3] { 0x70, 0x70, 0xEE }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6F, 0x3C }, new ushort[3] { 0x71, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions65 = { new ushort[3] { 0x6C, 0x6C, 0xA0 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6B, 0x3C }, new ushort[3] { 0x6D, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions66 = { new ushort[3] { 0x6F, 0x6F, 0xA1 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6E, 0x3C }, new ushort[3] { 0x70, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions67 = { new ushort[3] { 0x6E, 0x6E, 0x77 }, new ushort[3] { 0x65, 0x65, 0xA2 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x6D, 0x3C }, new ushort[3] { 0x6F, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions68 = { new ushort[3] { 0x77, 0x77, 0x17D }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x76, 0x3C }, new ushort[3] { 0x78, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions69 = { new ushort[3] { 0x75, 0x75, 0xEC }, new ushort[3] { 0x79, 0x79, 0x17E }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x74, 0x3C }, new ushort[3] { 0x76, 0x78, 0x3C }, new ushort[3] { 0x7A, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions70 = { new ushort[3] { 0x72, 0x72, 0x17F }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x71, 0x3C }, new ushort[3] { 0x73, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions71 = { new ushort[3] { 0x6A, 0x6A, 0x4E }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x69, 0x3C }, new ushort[3] { 0x6B, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions72 = { new ushort[3] { 0x65, 0x65, 0x84 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions73 = { new ushort[3] { 0x65, 0x65, 0x85 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions74 = { new ushort[3] { 0x65, 0x65, 0x89 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions75 = { new ushort[3] { 0x65, 0x65, 0xAB }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions76 = { new ushort[3] { 0x65, 0x65, 0xB9 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions77 = { new ushort[3] { 0x65, 0x65, 0x8B }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions78 = { new ushort[3] { 0x65, 0x65, 0xBB }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions79 = { new ushort[3] { 0x65, 0x65, 0xC3 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions80 = { new ushort[3] { 0x65, 0x65, 0xC2 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions81 = { new ushort[3] { 0x65, 0x65, 0xCB }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions82 = { new ushort[3] { 0x65, 0x65, 0x6A }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions83 = { new ushort[3] { 0x65, 0x65, 0x6C }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions84 = { new ushort[3] { 0x72, 0x72, 0xA3 }, new ushort[3] { 0x61, 0x61, 0x96 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x62, 0x71, 0x3C }, new ushort[3] { 0x73, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions85 = { new ushort[3] { 0x79, 0x79, 0xA4 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x78, 0x3C }, new ushort[3] { 0x7A, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions86 = { new ushort[3] { 0x6F, 0x6F, 0xA5 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6E, 0x3C }, new ushort[3] { 0x70, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions87 = { new ushort[3] { 0x6F, 0x6F, 0xC5 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6E, 0x3C }, new ushort[3] { 0x70, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions88 = { new ushort[3] { 0x6F, 0x6F, 0xC9 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6E, 0x3C }, new ushort[3] { 0x70, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions89 = { new ushort[3] { 0x6F, 0x6F, 0x74 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6E, 0x3C }, new ushort[3] { 0x70, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions90 = { new ushort[3] { 0x69, 0x69, 0x97 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x68, 0x3C }, new ushort[3] { 0x6A, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions91 = { new ushort[3] { 0x69, 0x69, 0xBA }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x68, 0x3C }, new ushort[3] { 0x6A, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions92 = { new ushort[3] { 0x69, 0x69, 0xC1 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x68, 0x3C }, new ushort[3] { 0x6A, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions93 = { new ushort[3] { 0x69, 0x69, 0x6B }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x68, 0x3C }, new ushort[3] { 0x6A, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions94 = { new ushort[3] { 0x69, 0x69, 0x6D }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x68, 0x3C }, new ushort[3] { 0x6A, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions95 = { new ushort[3] { 0x69, 0x69, 0x73 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x68, 0x3C }, new ushort[3] { 0x6A, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions96 = { new ushort[3] { 0x69, 0x69, 0xD6 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x68, 0x3C }, new ushort[3] { 0x6A, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions97 = { new ushort[3] { 0x69, 0x69, 0xDC }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x68, 0x3C }, new ushort[3] { 0x6A, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions98 = { new ushort[3] { 0x6F, 0x6F, 0xEF }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6E, 0x3C }, new ushort[3] { 0x70, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions99 = { new ushort[3] { 0x74, 0x74, 0xF0 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions100 = { new ushort[3] { 0x73, 0x73, 0xF1 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x72, 0x3C }, new ushort[3] { 0x74, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions101 = { new ushort[3] { 0x63, 0x63, 0x5C }, new ushort[3] { 0x66, 0x66, 0x78 }, new ushort[3] { 0x6C, 0x6C, 0x4F }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x62, 0x3C }, new ushort[3] { 0x64, 0x65, 0x3C }, new ushort[3] { 0x67, 0x6B, 0x3C }, new ushort[3] { 0x6D, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions102 = { new ushort[3] { 0x68, 0x68, 0x57 }, new ushort[3] { 0x69, 0x69, 0xAC }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x67, 0x3C }, new ushort[3] { 0x6A, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions103 = { new ushort[3] { 0x6E, 0x6E, 0xF2 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6D, 0x3C }, new ushort[3] { 0x6F, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions104 = { new ushort[3] { 0x63, 0x63, 0xAE }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x62, 0x3C }, new ushort[3] { 0x64, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions105 = { new ushort[3] { 0x63, 0x63, 0xC6 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x62, 0x3C }, new ushort[3] { 0x64, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions106 = { new ushort[3] { 0x63, 0x63, 0xC7 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x62, 0x3C }, new ushort[3] { 0x64, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions107 = { new ushort[3] { 0x63, 0x63, 0xDA }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x62, 0x3C }, new ushort[3] { 0x64, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions108 = { new ushort[3] { 0x63, 0x63, 0x9C }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x62, 0x3C }, new ushort[3] { 0x64, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions109 = { new ushort[3] { 0x63, 0x63, 0xE1 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x62, 0x3C }, new ushort[3] { 0x64, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions110 = { new ushort[3] { 0x70, 0x70, 0xA7 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6F, 0x3C }, new ushort[3] { 0x71, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions111 = { new ushort[3] { 0x70, 0x70, 0x7F }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6F, 0x3C }, new ushort[3] { 0x71, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions112 = { new ushort[3] { 0x6E, 0x6E, 0xF3 }, new ushort[3] { 0x63, 0x63, 0xF4 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x62, 0x3C }, new ushort[3] { 0x64, 0x6D, 0x3C }, new ushort[3] { 0x6F, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions113 = { new ushort[3] { 0x61, 0x61, 0xF5 }, new ushort[3] { 0x65, 0x65, 0x69 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x62, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions114 = { new ushort[3] { 0x6E, 0x6E, 0xB0 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6D, 0x3C }, new ushort[3] { 0x6F, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions115 = { new ushort[3] { 0x6E, 0x6E, 0xDB }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6D, 0x3C }, new ushort[3] { 0x6F, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions116 = { new ushort[3] { 0x6E, 0x6E, 0xDF }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6D, 0x3C }, new ushort[3] { 0x6F, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions117 = { new ushort[3] { 0x73, 0x73, 0xF6 }, new ushort[3] { 0x74, 0x74, 0xB1 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x72, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions118 = { new ushort[3] { 0x61, 0x61, 0xB2 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x62, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions119 = { new ushort[3] { 0x61, 0x61, 0xAA }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x62, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions120 = { new ushort[3] { 0x61, 0x61, 0xB5 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x62, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions121 = { new ushort[3] { 0x61, 0x61, 0x9A }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x62, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions122 = { new ushort[3] { 0x61, 0x61, 0x9B }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x62, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions123 = { new ushort[3] { 0x61, 0x61, 0xCE }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x62, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions124 = { new ushort[3] { 0x61, 0x61, 0xD5 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x62, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions125 = { new ushort[3] { 0x61, 0x61, 0xD8 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x62, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions126 = { new ushort[3] { 0x61, 0x61, 0xDE }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x62, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions127 = { new ushort[3] { 0x61, 0x61, 0xE2 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x62, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions128 = { new ushort[3] { 0x61, 0x61, 0xE4 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x62, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions129 = { new ushort[3] { 0x69, 0x69, 0xF7 }, new ushort[3] { 0x6C, 0x6C, 0x79 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x68, 0x3C }, new ushort[3] { 0x6A, 0x6B, 0x3C }, new ushort[3] { 0x6D, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions130 = { new ushort[3] { 0x72, 0x72, 0x98 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x71, 0x3C }, new ushort[3] { 0x73, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions131 = { new ushort[3] { 0x72, 0x72, 0xB7 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x71, 0x3C }, new ushort[3] { 0x73, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions132 = { new ushort[3] { 0x72, 0x72, 0x87 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x71, 0x3C }, new ushort[3] { 0x73, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions133 = { new ushort[3] { 0x72, 0x72, 0x7A }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x71, 0x3C }, new ushort[3] { 0x73, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions134 = { new ushort[3] { 0x72, 0x72, 0x7E }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x71, 0x3C }, new ushort[3] { 0x73, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions135 = { new ushort[3] { 0x72, 0x72, 0x60 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x71, 0x3C }, new ushort[3] { 0x73, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions136 = { new ushort[3] { 0x72, 0x72, 0xD2 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x71, 0x3C }, new ushort[3] { 0x73, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions137 = { new ushort[3] { 0x72, 0x72, 0xE0 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x71, 0x3C }, new ushort[3] { 0x73, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions138 = { new ushort[3] { 0x73, 0x73, 0x99 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x72, 0x3C }, new ushort[3] { 0x74, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions139 = { new ushort[3] { 0x73, 0x73, 0x6F }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x72, 0x3C }, new ushort[3] { 0x74, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions140 = { new ushort[3] { 0x62, 0x62, 0xA9 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x61, 0x3C }, new ushort[3] { 0x63, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions141 = { new ushort[3] { 0x62, 0x62, 0xC4 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x61, 0x3C }, new ushort[3] { 0x63, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions142 = { new ushort[3] { 0x62, 0x62, 0xDD }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x61, 0x3C }, new ushort[3] { 0x63, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions143 = { new ushort[3] { 0x6F, 0x6F, 0x92 }, new ushort[3] { 0x69, 0x69, 0xB8 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x68, 0x3C }, new ushort[3] { 0x6A, 0x6E, 0x3C }, new ushort[3] { 0x70, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions144 = { new ushort[3] { 0x73, 0x73, 0xF8 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x72, 0x3C }, new ushort[3] { 0x74, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions145 = { new ushort[3] { 0x74, 0x74, 0x51 }, new ushort[3] { 0x70, 0x70, 0xA8 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6F, 0x3C }, new ushort[3] { 0x71, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions146 = { new ushort[3] { 0x74, 0x74, 0x53 }, new ushort[3] { 0x70, 0x70, 0x4A }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6F, 0x3C }, new ushort[3] { 0x71, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions147 = { new ushort[3] { 0x75, 0x75, 0xF9 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x74, 0x3C }, new ushort[3] { 0x76, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions148 = { new ushort[3] { 0x74, 0x74, 0xFA }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions149 = { new ushort[3] { 0x74, 0x74, 0xAF }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions150 = { new ushort[3] { 0x74, 0x74, 0xBE }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions151 = { new ushort[3] { 0x74, 0x74, 0xBF }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions152 = { new ushort[3] { 0x74, 0x74, 0xB6 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions153 = { new ushort[3] { 0x74, 0x74, 0x86 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions154 = { new ushort[3] { 0x74, 0x74, 0x61 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions155 = { new ushort[3] { 0x74, 0x74, 0xD7 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions156 = { new ushort[3] { 0x74, 0x74, 0xE5 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions157 = { new ushort[3] { 0x64, 0x64, 0xB4 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x63, 0x3C }, new ushort[3] { 0x65, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions158 = { new ushort[3] { 0x64, 0x64, 0x59 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x63, 0x3C }, new ushort[3] { 0x65, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions159 = { new ushort[3] { 0x6F, 0x6F, 0xFB }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6E, 0x3C }, new ushort[3] { 0x70, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions160 = { new ushort[3] { 0x73, 0x73, 0xFC }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x72, 0x3C }, new ushort[3] { 0x74, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions161 = { new ushort[3] { 0x61, 0x61, 0xFD }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x62, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions162 = { new ushort[3] { 0x6C, 0x6C, 0xFE }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6B, 0x3C }, new ushort[3] { 0x6D, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions163 = { new ushort[3] { 0x69, 0x69, 0xBC }, new ushort[3] { 0x75, 0x75, 0xBD }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x68, 0x3C }, new ushort[3] { 0x6A, 0x74, 0x3C }, new ushort[3] { 0x76, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions164 = { new ushort[3] { 0x74, 0x74, 0xFF }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions165 = { new ushort[3] { 0x72, 0x72, 0x100 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x71, 0x3C }, new ushort[3] { 0x73, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions166 = { new ushort[3] { 0x6C, 0x6C, 0xC0 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6B, 0x3C }, new ushort[3] { 0x6D, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions167 = { new ushort[3] { 0x6C, 0x6C, 0x5D }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6B, 0x3C }, new ushort[3] { 0x6D, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions168 = { new ushort[3] { 0x6C, 0x6C, 0x5E }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6B, 0x3C }, new ushort[3] { 0x6D, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions169 = { new ushort[3] { 0x6C, 0x6C, 0xCA }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6B, 0x3C }, new ushort[3] { 0x6D, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions170 = { new ushort[3] { 0x6C, 0x6C, 0xCF }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6B, 0x3C }, new ushort[3] { 0x6D, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions171 = { new ushort[3] { 0x61, 0x61, 0x101 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x62, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions172 = { new ushort[3] { 0x6E, 0x6E, 0x102 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6D, 0x3C }, new ushort[3] { 0x6F, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions173 = { new ushort[3] { 0x6E, 0x6E, 0x103 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6D, 0x3C }, new ushort[3] { 0x6F, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions174 = { new ushort[3] { 0x68, 0x68, 0x52 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x67, 0x3C }, new ushort[3] { 0x69, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions175 = { new ushort[3] { 0x68, 0x68, 0xCC }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x67, 0x3C }, new ushort[3] { 0x69, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions176 = { new ushort[3] { 0x73, 0x73, 0x104 }, new ushort[3] { 0x74, 0x74, 0x5F }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x72, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions177 = { new ushort[3] { 0x63, 0x63, 0x105 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x62, 0x3C }, new ushort[3] { 0x64, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions178 = { new ushort[3] { 0x73, 0x73, 0x106 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x72, 0x3C }, new ushort[3] { 0x74, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions179 = { new ushort[3] { 0x75, 0x75, 0xC8 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x74, 0x3C }, new ushort[3] { 0x76, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions180 = { new ushort[3] { 0x75, 0x75, 0xCD }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x74, 0x3C }, new ushort[3] { 0x76, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions181 = { new ushort[3] { 0x75, 0x75, 0xD1 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x74, 0x3C }, new ushort[3] { 0x76, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions182 = { new ushort[3] { 0x75, 0x75, 0xD4 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x74, 0x3C }, new ushort[3] { 0x76, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions183 = { new ushort[3] { 0x61, 0x61, 0x107 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x62, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions184 = { new ushort[3] { 0x76, 0x76, 0x7C }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x75, 0x3C }, new ushort[3] { 0x77, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions185 = { new ushort[3] { 0x6E, 0x6E, 0x108 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6D, 0x3C }, new ushort[3] { 0x6F, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions186 = { new ushort[3] { 0x6C, 0x6C, 0x109 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6B, 0x3C }, new ushort[3] { 0x6D, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions187 = { new ushort[3] { 0x63, 0x63, 0x10B }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x62, 0x3C }, new ushort[3] { 0x64, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions188 = { new ushort[3] { 0x6E, 0x6E, 0x10C }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6D, 0x3C }, new ushort[3] { 0x6F, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions189 = { new ushort[3] { 0x63, 0x63, 0x10D }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x62, 0x3C }, new ushort[3] { 0x64, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions190 = { new ushort[3] { 0x69, 0x69, 0x10E }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x68, 0x3C }, new ushort[3] { 0x6A, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions191 = { new ushort[3] { 0x63, 0x63, 0x10F }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x62, 0x3C }, new ushort[3] { 0x64, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions192 = { new ushort[3] { 0x65, 0x65, 0x110 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions193 = { new ushort[3] { 0x6D, 0x6D, 0xD0 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6C, 0x3C }, new ushort[3] { 0x6E, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions194 = { new ushort[3] { 0x6D, 0x6D, 0x8E }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6C, 0x3C }, new ushort[3] { 0x6E, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions195 = { new ushort[3] { 0x67, 0x67, 0x7D }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x66, 0x3C }, new ushort[3] { 0x68, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions196 = { new ushort[3] { 0x6C, 0x6C, 0x111 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6B, 0x3C }, new ushort[3] { 0x6D, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions197 = { new ushort[3] { 0x72, 0x72, 0x112 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x71, 0x3C }, new ushort[3] { 0x73, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions198 = { new ushort[3] { 0x6B, 0x6B, 0xD3 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6A, 0x3C }, new ushort[3] { 0x6C, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions199 = { new ushort[3] { 0x6B, 0x6B, 0xE3 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6A, 0x3C }, new ushort[3] { 0x6C, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions200 = { new ushort[3] { 0x72, 0x72, 0x113 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x71, 0x3C }, new ushort[3] { 0x73, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions201 = { new ushort[3] { 0x76, 0x76, 0x114 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x75, 0x3C }, new ushort[3] { 0x77, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions202 = { new ushort[3] { 0x69, 0x69, 0x115 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x68, 0x3C }, new ushort[3] { 0x6A, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions203 = { new ushort[3] { 0x72, 0x72, 0x116 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x71, 0x3C }, new ushort[3] { 0x73, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions204 = { new ushort[3] { 0x6F, 0x6F, 0x117 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6E, 0x3C }, new ushort[3] { 0x70, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions205 = { new ushort[3] { 0x6C, 0x6C, 0x118 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6B, 0x3C }, new ushort[3] { 0x6D, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions206 = { new ushort[3] { 0x63, 0x63, 0x119 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x62, 0x3C }, new ushort[3] { 0x64, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions207 = { new ushort[3] { 0x6C, 0x6C, 0x11A }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6B, 0x3C }, new ushort[3] { 0x6D, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions208 = { new ushort[3] { 0x61, 0x61, 0x11B }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x62, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions209 = { new ushort[3] { 0x6C, 0x6C, 0x11C }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6B, 0x3C }, new ushort[3] { 0x6D, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions210 = { new ushort[3] { 0x6E, 0x6E, 0xD9 }, new ushort[3] { 0x66, 0x66, 0x80 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x65, 0x3C }, new ushort[3] { 0x67, 0x6D, 0x3C }, new ushort[3] { 0x6F, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions211 = { new ushort[3] { 0x65, 0x65, 0x11D }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions212 = { new ushort[3] { 0x61, 0x61, 0x11E }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x62, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions213 = { new ushort[3] { 0x74, 0x74, 0x11F }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions214 = { new ushort[3] { 0x64, 0x64, 0x120 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x63, 0x3C }, new ushort[3] { 0x65, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions215 = { new ushort[3] { 0x6F, 0x6F, 0x121 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6E, 0x3C }, new ushort[3] { 0x70, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions216 = { new ushort[3] { 0x74, 0x74, 0x122 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions217 = { new ushort[3] { 0x61, 0x61, 0x123 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x62, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions218 = { new ushort[3] { 0x69, 0x69, 0x124 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x68, 0x3C }, new ushort[3] { 0x6A, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions219 = { new ushort[3] { 0x75, 0x75, 0x125 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x74, 0x3C }, new ushort[3] { 0x76, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions220 = { new ushort[3] { 0x6C, 0x6C, 0x126 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6B, 0x3C }, new ushort[3] { 0x6D, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions221 = { new ushort[3] { 0x6C, 0x6C, 0x127 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6B, 0x3C }, new ushort[3] { 0x6D, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions222 = { new ushort[3] { 0x63, 0x63, 0x128 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x62, 0x3C }, new ushort[3] { 0x64, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions223 = { new ushort[3] { 0x6C, 0x6C, 0x129 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6B, 0x3C }, new ushort[3] { 0x6D, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions224 = { new ushort[3] { 0x74, 0x74, 0x12A }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions225 = { new ushort[3] { 0x69, 0x69, 0x12B }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x68, 0x3C }, new ushort[3] { 0x6A, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions226 = { new ushort[3] { 0x63, 0x63, 0x12C }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x62, 0x3C }, new ushort[3] { 0x64, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions227 = { new ushort[3] { 0x65, 0x65, 0x12D }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions228 = { new ushort[3] { 0x63, 0x63, 0x12E }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x62, 0x3C }, new ushort[3] { 0x64, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions229 = { new ushort[3] { 0x65, 0x65, 0x12F }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions230 = { new ushort[3] { 0x74, 0x74, 0x186 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions231 = { new ushort[3] { 0x74, 0x74, 0x187 }, new ushort[3] { 0x61, 0x61, 0xA6 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x62, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions232 = { new ushort[3] { 0x64, 0x64, 0x18B }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x63, 0x3C }, new ushort[3] { 0x65, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions233 = { new ushort[3] { 0x66, 0x66, 0x18C }, new ushort[3] { 0x74, 0x74, 0xB3 }, new ushort[3] { 0x6D, 0x6D, 0x58 }, new ushort[3] { 0x61, 0x61, 0x9E }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x62, 0x65, 0x3C }, new ushort[3] { 0x67, 0x6C, 0x3C }, new ushort[3] { 0x6E, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions234 = { new ushort[3] { 0x74, 0x74, 0x18D }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions235 = { new ushort[3] { 0x6C, 0x6C, 0x191 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6B, 0x3C }, new ushort[3] { 0x6D, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions236 = { new ushort[3] { 0x65, 0x65, 0x192 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions237 = { new ushort[3] { 0x73, 0x73, 0x193 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x72, 0x3C }, new ushort[3] { 0x74, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions238 = { new ushort[3] { 0x65, 0x65, 0x194 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions239 = { new ushort[3] { 0x6C, 0x6C, 0x195 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6B, 0x3C }, new ushort[3] { 0x6D, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions240 = { new ushort[3] { 0x65, 0x65, 0x196 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions241 = { new ushort[3] { 0x65, 0x65, 0x197 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions242 = { new ushort[3] { 0x74, 0x74, 0x198 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions243 = { new ushort[3] { 0x67, 0x67, 0x199 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x66, 0x3C }, new ushort[3] { 0x68, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions244 = { new ushort[3] { 0x6B, 0x6B, 0x19A }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6A, 0x3C }, new ushort[3] { 0x6C, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions245 = { new ushort[3] { 0x72, 0x72, 0x19B }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x71, 0x3C }, new ushort[3] { 0x73, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions246 = { new ushort[3] { 0x65, 0x65, 0x19C }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions247 = { new ushort[3] { 0x64, 0x64, 0x19D }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x63, 0x3C }, new ushort[3] { 0x65, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions248 = { new ushort[3] { 0x65, 0x65, 0x19E }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions249 = { new ushort[3] { 0x6D, 0x6D, 0x19F }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6C, 0x3C }, new ushort[3] { 0x6E, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions250 = { new ushort[3] { 0x6F, 0x6F, 0x1A0 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6E, 0x3C }, new ushort[3] { 0x70, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions251 = { new ushort[3] { 0x77, 0x77, 0x1A1 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x76, 0x3C }, new ushort[3] { 0x78, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions252 = { new ushort[3] { 0x65, 0x65, 0x1A2 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions253 = { new ushort[3] { 0x74, 0x74, 0x1A3 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions254 = { new ushort[3] { 0x64, 0x64, 0x1A4 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x63, 0x3C }, new ushort[3] { 0x65, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions255 = { new ushort[3] { 0x65, 0x65, 0x1A5 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions256 = { new ushort[3] { 0x74, 0x74, 0x1A6 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions257 = { new ushort[3] { 0x6B, 0x6B, 0x1A7 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6A, 0x3C }, new ushort[3] { 0x6C, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions258 = { new ushort[3] { 0x67, 0x67, 0x1A8 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x66, 0x3C }, new ushort[3] { 0x68, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions259 = { new ushort[3] { 0x67, 0x67, 0x1A9 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x66, 0x3C }, new ushort[3] { 0x68, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions260 = { new ushort[3] { 0x74, 0x74, 0x1AA }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions261 = { new ushort[3] { 0x68, 0x68, 0x1AB }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x67, 0x3C }, new ushort[3] { 0x69, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions262 = { new ushort[3] { 0x73, 0x73, 0x1AC }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x72, 0x3C }, new ushort[3] { 0x74, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions263 = { new ushort[3] { 0x6D, 0x6D, 0x1AD }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6C, 0x3C }, new ushort[3] { 0x6E, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions264 = { new ushort[3] { 0x74, 0x74, 0x1AE }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions265 = { new ushort[3] { 0x65, 0x65, 0x1AF }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions266 = { new ushort[3] { 0x66, 0x66, 0x1B0 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x65, 0x3C }, new ushort[3] { 0x67, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions267 = { new ushort[3] { 0x74, 0x74, 0x1B1 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions268 = { new ushort[3] { 0x67, 0x67, 0x1B2 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x66, 0x3C }, new ushort[3] { 0x68, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions269 = { new ushort[3] { 0x74, 0x74, 0x1B3 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions270 = { new ushort[3] { 0x63, 0x63, 0x1B4 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x62, 0x3C }, new ushort[3] { 0x64, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions271 = { new ushort[3] { 0x68, 0x68, 0x1B5 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x67, 0x3C }, new ushort[3] { 0x69, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions272 = { new ushort[3] { 0x64, 0x64, 0x1B6 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x63, 0x3C }, new ushort[3] { 0x65, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions273 = { new ushort[3] { 0x65, 0x65, 0x1B7 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions274 = { new ushort[3] { 0x74, 0x74, 0x1B8 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions275 = { new ushort[3] { 0x6E, 0x6E, 0x1B9 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6D, 0x3C }, new ushort[3] { 0x6F, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions276 = { new ushort[3] { 0x65, 0x65, 0x1BA }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions277 = { new ushort[3] { 0x63, 0x63, 0x1BC }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x62, 0x3C }, new ushort[3] { 0x64, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions278 = { new ushort[3] { 0x6E, 0x6E, 0x1BD }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6D, 0x3C }, new ushort[3] { 0x6F, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions279 = { new ushort[3] { 0x64, 0x64, 0x1BE }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x63, 0x3C }, new ushort[3] { 0x65, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions280 = { new ushort[3] { 0x65, 0x65, 0x1BF }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions281 = { new ushort[3] { 0x68, 0x68, 0x1C0 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x67, 0x3C }, new ushort[3] { 0x69, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions282 = { new ushort[3] { 0x79, 0x79, 0x1C1 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x78, 0x3C }, new ushort[3] { 0x7A, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions283 = { new ushort[3] { 0x6C, 0x6C, 0x1C2 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6B, 0x3C }, new ushort[3] { 0x6D, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions284 = { new ushort[3] { 0x74, 0x74, 0x1C3 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions285 = { new ushort[3] { 0x64, 0x64, 0x1C4 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x63, 0x3C }, new ushort[3] { 0x65, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions286 = { new ushort[3] { 0x6C, 0x6C, 0x1C5 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6B, 0x3C }, new ushort[3] { 0x6D, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions287 = { new ushort[3] { 0x65, 0x65, 0x1C6 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions288 = { new ushort[3] { 0x65, 0x65, 0x1C7 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions289 = { new ushort[3] { 0x72, 0x72, 0x1C8 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x71, 0x3C }, new ushort[3] { 0x73, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions290 = { new ushort[3] { 0x65, 0x65, 0x1C9 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions291 = { new ushort[3] { 0x6C, 0x6C, 0x1CA }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6B, 0x3C }, new ushort[3] { 0x6D, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions292 = { new ushort[3] { 0x74, 0x74, 0x1CB }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions293 = { new ushort[3] { 0x65, 0x65, 0x1CC }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions294 = { new ushort[3] { 0x65, 0x65, 0x1CD }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions295 = { new ushort[3] { 0x79, 0x79, 0x1CE }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x78, 0x3C }, new ushort[3] { 0x7A, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions296 = { new ushort[3] { 0x74, 0x74, 0x1CF }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions297 = { new ushort[3] { 0x79, 0x79, 0x1D0 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x78, 0x3C }, new ushort[3] { 0x7A, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions298 = { new ushort[3] { 0x79, 0x79, 0x1D1 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x78, 0x3C }, new ushort[3] { 0x7A, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions299 = { new ushort[3] { 0x74, 0x74, 0x1D2 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions300 = { new ushort[3] { 0x65, 0x65, 0x1D3 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions301 = { new ushort[3] { 0x64, 0x64, 0x1D4 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x63, 0x3C }, new ushort[3] { 0x65, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions302 = { new ushort[3] { 0x65, 0x65, 0x1D5 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions303 = { new ushort[3] { 0x64, 0x64, 0x1D6 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x63, 0x3C }, new ushort[3] { 0x65, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions304 = { new ushort[3] { 0x61, 0x61, 0x41 }, new ushort[3] { 0x6C, 0x6C, 0x42 }, new ushort[3] { 0x6F, 0x6F, 0x46 }, new ushort[3] { 0x69, 0x69, 0x43 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x62, 0x68, 0x3C }, new ushort[3] { 0x6A, 0x6B, 0x3C }, new ushort[3] { 0x6D, 0x6E, 0x3C }, new ushort[3] { 0x70, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions305 = { new ushort[3] { 0x65, 0x65, 0x65 }, new ushort[3] { 0x6F, 0x6F, 0x166 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x6E, 0x3C }, new ushort[3] { 0x70, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions306 = { new ushort[3] { 0x65, 0x65, 0x95 }, new ushort[3] { 0x6F, 0x6F, 0x9D }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x6E, 0x3C }, new ushort[3] { 0x70, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions307 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions308 = { new ushort[3] { 0x58, 0x58, 0x8 }, new ushort[3] { 0x78, 0x78, 0x8 }, new ushort[3] { 0x4C, 0x4C, 0x136 }, new ushort[3] { 0x6C, 0x6C, 0x136 }, new ushort[3] { 0x44, 0x44, 0x15A }, new ushort[3] { 0x46, 0x46, 0x15A }, new ushort[3] { 0x4D, 0x4D, 0x15A }, new ushort[3] { 0x64, 0x64, 0x15A }, new ushort[3] { 0x66, 0x66, 0x15A }, new ushort[3] { 0x6D, 0x6D, 0x15A }, new ushort[3] { 0x45, 0x45, 0x9 }, new ushort[3] { 0x65, 0x65, 0x9 }, new ushort[3] { 0x2E, 0x2E, 0xA }, new ushort[3] { 0x55, 0x55, 0x137 }, new ushort[3] { 0x75, 0x75, 0x137 } };

        private static ushort[][] p_Transitions309 = { new ushort[3] { 0x30, 0x39, 0x135 }, new ushort[3] { 0x44, 0x44, 0x15A }, new ushort[3] { 0x46, 0x46, 0x15A }, new ushort[3] { 0x4D, 0x4D, 0x15A }, new ushort[3] { 0x64, 0x64, 0x15A }, new ushort[3] { 0x66, 0x66, 0x15A }, new ushort[3] { 0x6D, 0x6D, 0x15A }, new ushort[3] { 0x45, 0x45, 0x9 }, new ushort[3] { 0x65, 0x65, 0x9 }, new ushort[3] { 0x2E, 0x2E, 0xA } };

        private static ushort[][] p_Transitions310 = { new ushort[3] { 0x55, 0x55, 0x138 }, new ushort[3] { 0x75, 0x75, 0x138 }, new ushort[3] { 0x44, 0x44, 0x15A }, new ushort[3] { 0x46, 0x46, 0x15A }, new ushort[3] { 0x4D, 0x4D, 0x15A }, new ushort[3] { 0x64, 0x64, 0x15A }, new ushort[3] { 0x66, 0x66, 0x15A }, new ushort[3] { 0x6D, 0x6D, 0x15A }, new ushort[3] { 0x45, 0x45, 0x9 }, new ushort[3] { 0x65, 0x65, 0x9 }, new ushort[3] { 0x2E, 0x2E, 0xA } };

        private static ushort[][] p_Transitions311 = { new ushort[3] { 0x4C, 0x4C, 0x138 }, new ushort[3] { 0x6C, 0x6C, 0x138 }, new ushort[3] { 0x44, 0x44, 0x15A }, new ushort[3] { 0x46, 0x46, 0x15A }, new ushort[3] { 0x4D, 0x4D, 0x15A }, new ushort[3] { 0x64, 0x64, 0x15A }, new ushort[3] { 0x66, 0x66, 0x15A }, new ushort[3] { 0x6D, 0x6D, 0x15A }, new ushort[3] { 0x45, 0x45, 0x9 }, new ushort[3] { 0x65, 0x65, 0x9 }, new ushort[3] { 0x2E, 0x2E, 0xA } };

        private static ushort[][] p_Transitions312 = { new ushort[3] { 0x44, 0x44, 0x15A }, new ushort[3] { 0x46, 0x46, 0x15A }, new ushort[3] { 0x4D, 0x4D, 0x15A }, new ushort[3] { 0x64, 0x64, 0x15A }, new ushort[3] { 0x66, 0x66, 0x15A }, new ushort[3] { 0x6D, 0x6D, 0x15A }, new ushort[3] { 0x45, 0x45, 0x9 }, new ushort[3] { 0x65, 0x65, 0x9 }, new ushort[3] { 0x2E, 0x2E, 0xA } };

        private static ushort[][] p_Transitions313 = { new ushort[3] { 0x31, 0x39, 0x15B }, new ushort[3] { 0x30, 0x30, 0x15C } };

        private static ushort[][] p_Transitions314 = { new ushort[3] { 0x73, 0x73, 0x66 }, new ushort[3] { 0x69, 0x69, 0x67 }, new ushort[3] { 0x6C, 0x6C, 0x13E }, new ushort[3] { 0x6E, 0x6E, 0x68 }, new ushort[3] { 0x4C, 0x4C, 0x13F }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x4B, 0x3C }, new ushort[3] { 0x4D, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x68, 0x3C }, new ushort[3] { 0x6A, 0x6B, 0x3C }, new ushort[3] { 0x6D, 0x6D, 0x3C }, new ushort[3] { 0x6F, 0x72, 0x3C }, new ushort[3] { 0x74, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions315 = { new ushort[3] { 0x6F, 0x6F, 0x70 }, new ushort[3] { 0x55, 0x55, 0x13F }, new ushort[3] { 0x75, 0x75, 0x13F }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x54, 0x3C }, new ushort[3] { 0x56, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6E, 0x3C }, new ushort[3] { 0x70, 0x74, 0x3C }, new ushort[3] { 0x76, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions316 = { new ushort[3] { 0x55, 0x55, 0x13F }, new ushort[3] { 0x75, 0x75, 0x13F }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x54, 0x3C }, new ushort[3] { 0x56, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x74, 0x3C }, new ushort[3] { 0x76, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions317 = { new ushort[3] { 0x4C, 0x4C, 0x13F }, new ushort[3] { 0x6C, 0x6C, 0x13F }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x4B, 0x3C }, new ushort[3] { 0x4D, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6B, 0x3C }, new ushort[3] { 0x6D, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions318 = { new ushort[3] { 0x6F, 0x6F, 0xAD }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6E, 0x3C }, new ushort[3] { 0x70, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions319 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions320 = { };

        private static ushort[][] p_Transitions321 = { };

        private static ushort[][] p_Transitions322 = { };

        private static ushort[][] p_Transitions323 = { };

        private static ushort[][] p_Transitions324 = { };

        private static ushort[][] p_Transitions325 = { new ushort[3] { 0x2B, 0x2B, 0x16A }, new ushort[3] { 0x3D, 0x3D, 0x16B } };

        private static ushort[][] p_Transitions326 = { new ushort[3] { 0x2D, 0x2D, 0x16C }, new ushort[3] { 0x3D, 0x3D, 0x16D } };

        private static ushort[][] p_Transitions327 = { new ushort[3] { 0x3D, 0x3D, 0x16E } };

        private static ushort[][] p_Transitions328 = { };

        private static ushort[][] p_Transitions329 = { new ushort[3] { 0x3D, 0x3D, 0x16F } };

        private static ushort[][] p_Transitions330 = { new ushort[3] { 0x3D, 0x3D, 0x170 } };

        private static ushort[][] p_Transitions331 = { new ushort[3] { 0x3C, 0x3C, 0x171 }, new ushort[3] { 0x3D, 0x3D, 0x172 } };

        private static ushort[][] p_Transitions332 = { new ushort[3] { 0x3E, 0x3E, 0x173 }, new ushort[3] { 0x3D, 0x3D, 0x174 } };

        private static ushort[][] p_Transitions333 = { new ushort[3] { 0x3D, 0x3D, 0x176 } };

        private static ushort[][] p_Transitions334 = { new ushort[3] { 0x26, 0x26, 0x177 }, new ushort[3] { 0x3D, 0x3D, 0x178 } };

        private static ushort[][] p_Transitions335 = { new ushort[3] { 0x3D, 0x3D, 0x179 } };

        private static ushort[][] p_Transitions336 = { new ushort[3] { 0x7C, 0x7C, 0x17A }, new ushort[3] { 0x3D, 0x3D, 0x17B } };

        private static ushort[][] p_Transitions337 = { };

        private static ushort[][] p_Transitions338 = { };

        private static ushort[][] p_Transitions339 = { };

        private static ushort[][] p_Transitions340 = { };

        private static ushort[][] p_Transitions341 = { };

        private static ushort[][] p_Transitions342 = { new ushort[3] { 0x2F, 0x2F, 0x12 }, new ushort[3] { 0x9, 0xD, 0x17C }, new ushort[3] { 0x20, 0x20, 0x17C }, new ushort[3] { 0x2028, 0x2029, 0x17C } };

        private static ushort[][] p_Transitions343 = { new ushort[3] { 0xA, 0xA, 0x156 }, new ushort[3] { 0x2F, 0x2F, 0x12 }, new ushort[3] { 0x9, 0x9, 0x17C }, new ushort[3] { 0xB, 0xD, 0x17C }, new ushort[3] { 0x20, 0x20, 0x17C }, new ushort[3] { 0x2028, 0x2029, 0x17C } };

        private static ushort[][] p_Transitions344 = { new ushort[3] { 0x2F, 0x2F, 0x12 }, new ushort[3] { 0x9, 0xD, 0x17C }, new ushort[3] { 0x20, 0x20, 0x17C }, new ushort[3] { 0x2028, 0x2029, 0x17C } };

        private static ushort[][] p_Transitions345 = { };

        private static ushort[][] p_Transitions346 = { };

        private static ushort[][] p_Transitions347 = { new ushort[3] { 0x30, 0x39, 0x15B }, new ushort[3] { 0x45, 0x45, 0x9 }, new ushort[3] { 0x65, 0x65, 0x9 }, new ushort[3] { 0x44, 0x44, 0x15A }, new ushort[3] { 0x46, 0x46, 0x15A }, new ushort[3] { 0x4D, 0x4D, 0x15A }, new ushort[3] { 0x64, 0x64, 0x15A }, new ushort[3] { 0x66, 0x66, 0x15A }, new ushort[3] { 0x6D, 0x6D, 0x15A } };

        private static ushort[][] p_Transitions348 = { new ushort[3] { 0x4C, 0x4C, 0x15F }, new ushort[3] { 0x6C, 0x6C, 0x15F }, new ushort[3] { 0x45, 0x45, 0x9 }, new ushort[3] { 0x65, 0x65, 0x9 }, new ushort[3] { 0x55, 0x55, 0x160 }, new ushort[3] { 0x75, 0x75, 0x160 }, new ushort[3] { 0x44, 0x44, 0x15A }, new ushort[3] { 0x46, 0x46, 0x15A }, new ushort[3] { 0x4D, 0x4D, 0x15A }, new ushort[3] { 0x64, 0x64, 0x15A }, new ushort[3] { 0x66, 0x66, 0x15A }, new ushort[3] { 0x6D, 0x6D, 0x15A } };

        private static ushort[][] p_Transitions349 = { new ushort[3] { 0x30, 0x39, 0x15D }, new ushort[3] { 0x44, 0x44, 0x15A }, new ushort[3] { 0x46, 0x46, 0x15A }, new ushort[3] { 0x4D, 0x4D, 0x15A }, new ushort[3] { 0x64, 0x64, 0x15A }, new ushort[3] { 0x66, 0x66, 0x15A }, new ushort[3] { 0x6D, 0x6D, 0x15A } };

        private static ushort[][] p_Transitions350 = { new ushort[3] { 0x4C, 0x4C, 0x161 }, new ushort[3] { 0x6C, 0x6C, 0x161 }, new ushort[3] { 0x44, 0x44, 0x15A }, new ushort[3] { 0x46, 0x46, 0x15A }, new ushort[3] { 0x4D, 0x4D, 0x15A }, new ushort[3] { 0x64, 0x64, 0x15A }, new ushort[3] { 0x66, 0x66, 0x15A }, new ushort[3] { 0x6D, 0x6D, 0x15A }, new ushort[3] { 0x55, 0x55, 0x162 }, new ushort[3] { 0x75, 0x75, 0x162 } };

        private static ushort[][] p_Transitions351 = { new ushort[3] { 0x55, 0x55, 0x163 }, new ushort[3] { 0x75, 0x75, 0x163 }, new ushort[3] { 0x45, 0x45, 0x9 }, new ushort[3] { 0x65, 0x65, 0x9 }, new ushort[3] { 0x44, 0x44, 0x15A }, new ushort[3] { 0x46, 0x46, 0x15A }, new ushort[3] { 0x4D, 0x4D, 0x15A }, new ushort[3] { 0x64, 0x64, 0x15A }, new ushort[3] { 0x66, 0x66, 0x15A }, new ushort[3] { 0x6D, 0x6D, 0x15A } };

        private static ushort[][] p_Transitions352 = { new ushort[3] { 0x4C, 0x4C, 0x163 }, new ushort[3] { 0x6C, 0x6C, 0x163 }, new ushort[3] { 0x45, 0x45, 0x9 }, new ushort[3] { 0x65, 0x65, 0x9 }, new ushort[3] { 0x44, 0x44, 0x15A }, new ushort[3] { 0x46, 0x46, 0x15A }, new ushort[3] { 0x4D, 0x4D, 0x15A }, new ushort[3] { 0x64, 0x64, 0x15A }, new ushort[3] { 0x66, 0x66, 0x15A }, new ushort[3] { 0x6D, 0x6D, 0x15A } };

        private static ushort[][] p_Transitions353 = { new ushort[3] { 0x55, 0x55, 0x164 }, new ushort[3] { 0x75, 0x75, 0x164 }, new ushort[3] { 0x44, 0x44, 0x15A }, new ushort[3] { 0x46, 0x46, 0x15A }, new ushort[3] { 0x4D, 0x4D, 0x15A }, new ushort[3] { 0x64, 0x64, 0x15A }, new ushort[3] { 0x66, 0x66, 0x15A }, new ushort[3] { 0x6D, 0x6D, 0x15A } };

        private static ushort[][] p_Transitions354 = { new ushort[3] { 0x4C, 0x4C, 0x164 }, new ushort[3] { 0x6C, 0x6C, 0x164 }, new ushort[3] { 0x44, 0x44, 0x15A }, new ushort[3] { 0x46, 0x46, 0x15A }, new ushort[3] { 0x4D, 0x4D, 0x15A }, new ushort[3] { 0x64, 0x64, 0x15A }, new ushort[3] { 0x66, 0x66, 0x15A }, new ushort[3] { 0x6D, 0x6D, 0x15A } };

        private static ushort[][] p_Transitions355 = { new ushort[3] { 0x45, 0x45, 0x9 }, new ushort[3] { 0x65, 0x65, 0x9 }, new ushort[3] { 0x44, 0x44, 0x15A }, new ushort[3] { 0x46, 0x46, 0x15A }, new ushort[3] { 0x4D, 0x4D, 0x15A }, new ushort[3] { 0x64, 0x64, 0x15A }, new ushort[3] { 0x66, 0x66, 0x15A }, new ushort[3] { 0x6D, 0x6D, 0x15A } };

        private static ushort[][] p_Transitions356 = { new ushort[3] { 0x44, 0x44, 0x15A }, new ushort[3] { 0x46, 0x46, 0x15A }, new ushort[3] { 0x4D, 0x4D, 0x15A }, new ushort[3] { 0x64, 0x64, 0x15A }, new ushort[3] { 0x66, 0x66, 0x15A }, new ushort[3] { 0x6D, 0x6D, 0x15A } };

        private static ushort[][] p_Transitions357 = { };

        private static ushort[][] p_Transitions358 = { new ushort[3] { 0x75, 0x75, 0x8D }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x74, 0x3C }, new ushort[3] { 0x76, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions359 = { new ushort[3] { 0x74, 0x74, 0x188 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x73, 0x3C }, new ushort[3] { 0x75, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions360 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions361 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions362 = { };

        private static ushort[][] p_Transitions363 = { };

        private static ushort[][] p_Transitions364 = { };

        private static ushort[][] p_Transitions365 = { };

        private static ushort[][] p_Transitions366 = { };

        private static ushort[][] p_Transitions367 = { };

        private static ushort[][] p_Transitions368 = { };

        private static ushort[][] p_Transitions369 = { new ushort[3] { 0x3D, 0x3D, 0x189 } };

        private static ushort[][] p_Transitions370 = { };

        private static ushort[][] p_Transitions371 = { new ushort[3] { 0x3D, 0x3D, 0x18A } };

        private static ushort[][] p_Transitions372 = { };

        private static ushort[][] p_Transitions373 = { new ushort[3] { 0x73, 0x73, 0x50 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x72, 0x3C }, new ushort[3] { 0x74, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions374 = { };

        private static ushort[][] p_Transitions375 = { };

        private static ushort[][] p_Transitions376 = { };

        private static ushort[][] p_Transitions377 = { };

        private static ushort[][] p_Transitions378 = { };

        private static ushort[][] p_Transitions379 = { };

        private static ushort[][] p_Transitions380 = { new ushort[3] { 0x2F, 0x2F, 0x12 }, new ushort[3] { 0x9, 0xD, 0x17C }, new ushort[3] { 0x20, 0x20, 0x17C }, new ushort[3] { 0x2028, 0x2029, 0x17C } };

        private static ushort[][] p_Transitions381 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions382 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions383 = { new ushort[3] { 0x65, 0x65, 0x7B }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions384 = { new ushort[3] { 0x30, 0x39, 0x180 }, new ushort[3] { 0x41, 0x46, 0x180 }, new ushort[3] { 0x61, 0x66, 0x180 }, new ushort[3] { 0x4C, 0x4C, 0x181 }, new ushort[3] { 0x6C, 0x6C, 0x181 }, new ushort[3] { 0x55, 0x55, 0x182 }, new ushort[3] { 0x75, 0x75, 0x182 } };

        private static ushort[][] p_Transitions385 = { new ushort[3] { 0x55, 0x55, 0x183 }, new ushort[3] { 0x75, 0x75, 0x183 } };

        private static ushort[][] p_Transitions386 = { new ushort[3] { 0x4C, 0x4C, 0x183 }, new ushort[3] { 0x6C, 0x6C, 0x183 } };

        private static ushort[][] p_Transitions387 = { };

        private static ushort[][] p_Transitions388 = { };

        private static ushort[][] p_Transitions389 = { new ushort[3] { 0x22, 0x22, 0x11 } };

        private static ushort[][] p_Transitions390 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions391 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions392 = { new ushort[3] { 0x65, 0x65, 0x88 }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x64, 0x3C }, new ushort[3] { 0x66, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions393 = { };

        private static ushort[][] p_Transitions394 = { };

        private static ushort[][] p_Transitions395 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions396 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions397 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions398 = { new ushort[3] { 0x2F, 0x2F, 0x12 }, new ushort[3] { 0x9, 0xD, 0x17C }, new ushort[3] { 0x20, 0x20, 0x17C }, new ushort[3] { 0x2028, 0x2029, 0x17C } };

        private static ushort[][] p_Transitions399 = { new ushort[3] { 0xA, 0xA, 0x18E }, new ushort[3] { 0x2F, 0x2F, 0x12 }, new ushort[3] { 0x9, 0x9, 0x17C }, new ushort[3] { 0xB, 0xD, 0x17C }, new ushort[3] { 0x20, 0x20, 0x17C }, new ushort[3] { 0x2028, 0x2029, 0x17C } };

        private static ushort[][] p_Transitions400 = { new ushort[3] { 0x2F, 0x2F, 0x12 }, new ushort[3] { 0x9, 0xD, 0x17C }, new ushort[3] { 0x20, 0x20, 0x17C }, new ushort[3] { 0x2028, 0x2029, 0x17C } };

        private static ushort[][] p_Transitions401 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions402 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions403 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions404 = { new ushort[3] { 0x6F, 0x6F, 0x10A }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x6E, 0x3C }, new ushort[3] { 0x70, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions405 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions406 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions407 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions408 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions409 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions410 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions411 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions412 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions413 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions414 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions415 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions416 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions417 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions418 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions419 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions420 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions421 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions422 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions423 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions424 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions425 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions426 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions427 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions428 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions429 = { new ushort[3] { 0x73, 0x73, 0x1BB }, new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x72, 0x3C }, new ushort[3] { 0x74, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions430 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions431 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions432 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions433 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions434 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions435 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions436 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions437 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions438 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions439 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions440 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions441 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions442 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions443 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions444 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions445 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions446 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions447 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions448 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions449 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions450 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions451 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions452 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions453 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions454 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions455 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions456 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions457 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions458 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions459 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions460 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions461 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions462 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions463 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions464 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions465 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions466 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions467 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions468 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions469 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][] p_Transitions470 = { new ushort[3] { 0x30, 0x39, 0x3C }, new ushort[3] { 0x41, 0x5A, 0x3C }, new ushort[3] { 0x5F, 0x5F, 0x3C }, new ushort[3] { 0x61, 0x7A, 0x3C } };

        private static ushort[][][] p_Transitions = { p_Transitions0, p_Transitions1, p_Transitions2, p_Transitions3, p_Transitions4, p_Transitions5, p_Transitions6, p_Transitions7, p_Transitions8, p_Transitions9, p_Transitions10, p_Transitions11, p_Transitions12, p_Transitions13, p_Transitions14, p_Transitions15, p_Transitions16, p_Transitions17, p_Transitions18, p_Transitions19, p_Transitions20, p_Transitions21, p_Transitions22, p_Transitions23, p_Transitions24, p_Transitions25, p_Transitions26, p_Transitions27, p_Transitions28, p_Transitions29, p_Transitions30, p_Transitions31, p_Transitions32, p_Transitions33, p_Transitions34, p_Transitions35, p_Transitions36, p_Transitions37, p_Transitions38, p_Transitions39, p_Transitions40, p_Transitions41, p_Transitions42, p_Transitions43, p_Transitions44, p_Transitions45, p_Transitions46, p_Transitions47, p_Transitions48, p_Transitions49, p_Transitions50, p_Transitions51, p_Transitions52, p_Transitions53, p_Transitions54, p_Transitions55, p_Transitions56, p_Transitions57, p_Transitions58, p_Transitions59, p_Transitions60, p_Transitions61, p_Transitions62, p_Transitions63, p_Transitions64, p_Transitions65, p_Transitions66, p_Transitions67, p_Transitions68, p_Transitions69, p_Transitions70, p_Transitions71, p_Transitions72, p_Transitions73, p_Transitions74, p_Transitions75, p_Transitions76, p_Transitions77, p_Transitions78, p_Transitions79, p_Transitions80, p_Transitions81, p_Transitions82, p_Transitions83, p_Transitions84, p_Transitions85, p_Transitions86, p_Transitions87, p_Transitions88, p_Transitions89, p_Transitions90, p_Transitions91, p_Transitions92, p_Transitions93, p_Transitions94, p_Transitions95, p_Transitions96, p_Transitions97, p_Transitions98, p_Transitions99, p_Transitions100, p_Transitions101, p_Transitions102, p_Transitions103, p_Transitions104, p_Transitions105, p_Transitions106, p_Transitions107, p_Transitions108, p_Transitions109, p_Transitions110, p_Transitions111, p_Transitions112, p_Transitions113, p_Transitions114, p_Transitions115, p_Transitions116, p_Transitions117, p_Transitions118, p_Transitions119, p_Transitions120, p_Transitions121, p_Transitions122, p_Transitions123, p_Transitions124, p_Transitions125, p_Transitions126, p_Transitions127, p_Transitions128, p_Transitions129, p_Transitions130, p_Transitions131, p_Transitions132, p_Transitions133, p_Transitions134, p_Transitions135, p_Transitions136, p_Transitions137, p_Transitions138, p_Transitions139, p_Transitions140, p_Transitions141, p_Transitions142, p_Transitions143, p_Transitions144, p_Transitions145, p_Transitions146, p_Transitions147, p_Transitions148, p_Transitions149, p_Transitions150, p_Transitions151, p_Transitions152, p_Transitions153, p_Transitions154, p_Transitions155, p_Transitions156, p_Transitions157, p_Transitions158, p_Transitions159, p_Transitions160, p_Transitions161, p_Transitions162, p_Transitions163, p_Transitions164, p_Transitions165, p_Transitions166, p_Transitions167, p_Transitions168, p_Transitions169, p_Transitions170, p_Transitions171, p_Transitions172, p_Transitions173, p_Transitions174, p_Transitions175, p_Transitions176, p_Transitions177, p_Transitions178, p_Transitions179, p_Transitions180, p_Transitions181, p_Transitions182, p_Transitions183, p_Transitions184, p_Transitions185, p_Transitions186, p_Transitions187, p_Transitions188, p_Transitions189, p_Transitions190, p_Transitions191, p_Transitions192, p_Transitions193, p_Transitions194, p_Transitions195, p_Transitions196, p_Transitions197, p_Transitions198, p_Transitions199, p_Transitions200, p_Transitions201, p_Transitions202, p_Transitions203, p_Transitions204, p_Transitions205, p_Transitions206, p_Transitions207, p_Transitions208, p_Transitions209, p_Transitions210, p_Transitions211, p_Transitions212, p_Transitions213, p_Transitions214, p_Transitions215, p_Transitions216, p_Transitions217, p_Transitions218, p_Transitions219, p_Transitions220, p_Transitions221, p_Transitions222, p_Transitions223, p_Transitions224, p_Transitions225, p_Transitions226, p_Transitions227, p_Transitions228, p_Transitions229, p_Transitions230, p_Transitions231, p_Transitions232, p_Transitions233, p_Transitions234, p_Transitions235, p_Transitions236, p_Transitions237, p_Transitions238, p_Transitions239, p_Transitions240, p_Transitions241, p_Transitions242, p_Transitions243, p_Transitions244, p_Transitions245, p_Transitions246, p_Transitions247, p_Transitions248, p_Transitions249, p_Transitions250, p_Transitions251, p_Transitions252, p_Transitions253, p_Transitions254, p_Transitions255, p_Transitions256, p_Transitions257, p_Transitions258, p_Transitions259, p_Transitions260, p_Transitions261, p_Transitions262, p_Transitions263, p_Transitions264, p_Transitions265, p_Transitions266, p_Transitions267, p_Transitions268, p_Transitions269, p_Transitions270, p_Transitions271, p_Transitions272, p_Transitions273, p_Transitions274, p_Transitions275, p_Transitions276, p_Transitions277, p_Transitions278, p_Transitions279, p_Transitions280, p_Transitions281, p_Transitions282, p_Transitions283, p_Transitions284, p_Transitions285, p_Transitions286, p_Transitions287, p_Transitions288, p_Transitions289, p_Transitions290, p_Transitions291, p_Transitions292, p_Transitions293, p_Transitions294, p_Transitions295, p_Transitions296, p_Transitions297, p_Transitions298, p_Transitions299, p_Transitions300, p_Transitions301, p_Transitions302, p_Transitions303, p_Transitions304, p_Transitions305, p_Transitions306, p_Transitions307, p_Transitions308, p_Transitions309, p_Transitions310, p_Transitions311, p_Transitions312, p_Transitions313, p_Transitions314, p_Transitions315, p_Transitions316, p_Transitions317, p_Transitions318, p_Transitions319, p_Transitions320, p_Transitions321, p_Transitions322, p_Transitions323, p_Transitions324, p_Transitions325, p_Transitions326, p_Transitions327, p_Transitions328, p_Transitions329, p_Transitions330, p_Transitions331, p_Transitions332, p_Transitions333, p_Transitions334, p_Transitions335, p_Transitions336, p_Transitions337, p_Transitions338, p_Transitions339, p_Transitions340, p_Transitions341, p_Transitions342, p_Transitions343, p_Transitions344, p_Transitions345, p_Transitions346, p_Transitions347, p_Transitions348, p_Transitions349, p_Transitions350, p_Transitions351, p_Transitions352, p_Transitions353, p_Transitions354, p_Transitions355, p_Transitions356, p_Transitions357, p_Transitions358, p_Transitions359, p_Transitions360, p_Transitions361, p_Transitions362, p_Transitions363, p_Transitions364, p_Transitions365, p_Transitions366, p_Transitions367, p_Transitions368, p_Transitions369, p_Transitions370, p_Transitions371, p_Transitions372, p_Transitions373, p_Transitions374, p_Transitions375, p_Transitions376, p_Transitions377, p_Transitions378, p_Transitions379, p_Transitions380, p_Transitions381, p_Transitions382, p_Transitions383, p_Transitions384, p_Transitions385, p_Transitions386, p_Transitions387, p_Transitions388, p_Transitions389, p_Transitions390, p_Transitions391, p_Transitions392, p_Transitions393, p_Transitions394, p_Transitions395, p_Transitions396, p_Transitions397, p_Transitions398, p_Transitions399, p_Transitions400, p_Transitions401, p_Transitions402, p_Transitions403, p_Transitions404, p_Transitions405, p_Transitions406, p_Transitions407, p_Transitions408, p_Transitions409, p_Transitions410, p_Transitions411, p_Transitions412, p_Transitions413, p_Transitions414, p_Transitions415, p_Transitions416, p_Transitions417, p_Transitions418, p_Transitions419, p_Transitions420, p_Transitions421, p_Transitions422, p_Transitions423, p_Transitions424, p_Transitions425, p_Transitions426, p_Transitions427, p_Transitions428, p_Transitions429, p_Transitions430, p_Transitions431, p_Transitions432, p_Transitions433, p_Transitions434, p_Transitions435, p_Transitions436, p_Transitions437, p_Transitions438, p_Transitions439, p_Transitions440, p_Transitions441, p_Transitions442, p_Transitions443, p_Transitions444, p_Transitions445, p_Transitions446, p_Transitions447, p_Transitions448, p_Transitions449, p_Transitions450, p_Transitions451, p_Transitions452, p_Transitions453, p_Transitions454, p_Transitions455, p_Transitions456, p_Transitions457, p_Transitions458, p_Transitions459, p_Transitions460, p_Transitions461, p_Transitions462, p_Transitions463, p_Transitions464, p_Transitions465, p_Transitions466, p_Transitions467, p_Transitions468, p_Transitions469, p_Transitions470 };
        private static int[] p_Finals = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 1, 1, 1, 1, 1, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 26, 26, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 26, 52, 53, 54, 55, 55, 55, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 26, 26, 26, 1, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134 };

        public Lexer_Hime_Earth_CIL_GrammarCSharp(string input) : base(input) { }
        protected Lexer_Hime_Earth_CIL_GrammarCSharp(string input, int position, int line, System.Collections.Generic.List<Hime.Kernel.Parsers.LexerTextError> errors) : base(input, position, line, errors) { }

        public static string GetSymbolName(ushort SID)
        {
            for (int i = 0; i != p_SymbolsSID.Length; i++)
            {
                if (p_SymbolsSID[i] == SID)
                    return p_SymbolsName[i];
            }
            return null;
        }



        public Lexer_Hime_Earth_CIL_GrammarCSharp Clone_Hime_Earth_CIL_GrammarCSharp() { return new Lexer_Hime_Earth_CIL_GrammarCSharp(p_Input, p_CurrentPosition, p_Line, p_Errors); }
        public override Hime.Kernel.Parsers.SymbolToken GetNextToken(ushort[] IDs) { throw new Hime.Kernel.Parsers.LexerException("Text lexer does not support this method."); }
        public override Hime.Kernel.Parsers.SymbolToken GetNextToken()
        {
            if (p_CurrentPosition == p_Length)
            {
                p_CurrentPosition++;
                return new Hime.Kernel.Parsers.SymbolTokenDollar();
            }
            if (p_CurrentPosition > p_Length)
                return new Hime.Kernel.Parsers.SymbolTokenEpsilon();

            while (true)
            {
                if (p_CurrentPosition == p_Length)
                {
                    p_CurrentPosition++;
                    return new Hime.Kernel.Parsers.SymbolTokenDollar();
                }
                Hime.Kernel.Parsers.SymbolTokenText Token = GetNextToken_DFA();
                if (Token == null)
                {
                    p_Errors.Add(new Hime.Kernel.Parsers.LexerTextErrorDiscardedChar(p_Input[p_CurrentPosition], p_Line, CurrentColumn));
                    p_CurrentPosition++;
                }

                else if (Token.SymbolID == 7)
                {
                    p_CurrentPosition += Token.ValueText.Length;
                    foreach (char c in Token.ValueText) { if (c == '\n') p_Line++; }
                }

                else
                {

                    p_CurrentPosition += Token.ValueText.Length;
                    foreach (char c in Token.ValueText) { if (c == '\n') p_Line++; }
                    return Token;
                }
            }
        }

        private Hime.Kernel.Parsers.SymbolTokenText GetNextToken_DFA()
        {
            System.Collections.Generic.List<Hime.Kernel.Parsers.SymbolTokenText> MatchedTokens = new System.Collections.Generic.List<Hime.Kernel.Parsers.SymbolTokenText>();
            int End = p_CurrentPosition;
            ushort State = 0;

            while (true)
            {
                if (p_Finals[State] != -1)
                {
                    string Value = p_Input.Substring(p_CurrentPosition, End - p_CurrentPosition);
                    MatchedTokens.Add(new Hime.Kernel.Parsers.SymbolTokenText(p_SymbolsName[p_Finals[State]], p_SymbolsSID[p_Finals[State]], Value, p_Line));
                }
                if (End == p_Length)
                    break;
                ushort Char = System.Convert.ToUInt16(p_Input[End]);
                ushort NextState = 0xFFFF;
                End++;
                for (int i = 0; i != p_Transitions[State].Length; i++)
                {
                    if (Char >= p_Transitions[State][i][0] && Char <= p_Transitions[State][i][1])
                        NextState = p_Transitions[State][i][2];
                }
                if (NextState == 0xFFFF)
                    break;
                State = NextState;
            }
            if (MatchedTokens.Count == 0)
                return null;
            return MatchedTokens[MatchedTokens.Count - 1];
        }
    }

    public class Parser_Hime_Earth_CIL_GrammarCSharp : Hime.Kernel.Parsers.IParser
    {

        private delegate void Production(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes);

        private static void ReduceRule_14_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x14, "qualified_name"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_15_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x15, "type"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_15_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x15, "type"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_16_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x16, "type_non_array"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_16_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x16, "type_non_array"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_17_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x17, "type_object"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_17_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x17, "type_object"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_17_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x17, "type_object"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_18_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x18, "type_simple"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_18_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x18, "type_simple"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_18_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x18, "type_simple"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_18_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x18, "type_simple"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_19_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x19, "type_simple_integral"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_19_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x19, "type_simple_integral"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_19_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x19, "type_simple_integral"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_19_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x19, "type_simple_integral"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_19_4(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x19, "type_simple_integral"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_19_5(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x19, "type_simple_integral"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_19_6(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x19, "type_simple_integral"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_19_7(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x19, "type_simple_integral"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_19_8(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x19, "type_simple_integral"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1A_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1A, "type_simple_float"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1A_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1A, "type_simple_float"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1B_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1B, "type_array"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1C_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1C, "type_array_rank"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1D_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1D, "type_array_rank_dim"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1E_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1E, "type_predefined"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1E_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1E, "type_predefined"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1E_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1E, "type_predefined"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1E_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1E, "type_predefined"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1E_4(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1E, "type_predefined"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1E_5(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1E, "type_predefined"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1E_6(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1E, "type_predefined"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1E_7(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1E, "type_predefined"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1E_8(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1E, "type_predefined"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1E_9(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1E, "type_predefined"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1E_A(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1E, "type_predefined"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1E_B(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1E, "type_predefined"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1E_C(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1E, "type_predefined"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1E_D(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1E, "type_predefined"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1E_E(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1E, "type_predefined"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1F_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1F, "type_return"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1F_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1F, "type_return"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_20_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x20, "exp_atom"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_20_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x20, "exp_atom"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_20_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x20, "exp_atom"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_20_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x20, "exp_atom"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_20_4(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x20, "exp_atom"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_20_5(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x20, "exp_atom"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_20_6(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x20, "exp_atom"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_20_7(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x20, "exp_atom"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_20_8(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x20, "exp_atom"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_20_9(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x20, "exp_atom"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_20_A(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x20, "exp_atom"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_20_B(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x20, "exp_atom"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_20_C(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x20, "exp_atom"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_21_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 4, 4);
            nodes.RemoveRange(nodes.Count - 4, 4);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x21, "exp_op0_invoke"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_21_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x21, "exp_op0_invoke"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_22_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 5, 5);
            nodes.RemoveRange(nodes.Count - 5, 5);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x22, "exp_op0_obj_creation"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_22_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 4, 4);
            nodes.RemoveRange(nodes.Count - 4, 4);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x22, "exp_op0_obj_creation"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_23_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x23, "exp_op0_post_increment"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_24_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x24, "exp_op0_post_decrement"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_25_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x25, "exp_op0_member_access"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_25_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x25, "exp_op0_member_access"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_26_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 4, 4);
            nodes.RemoveRange(nodes.Count - 4, 4);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x26, "exp_op0_element_access"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_26_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x26, "exp_op0_element_access"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_27_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 4, 4);
            nodes.RemoveRange(nodes.Count - 4, 4);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x27, "exp_op0_typeof"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_28_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 4, 4);
            nodes.RemoveRange(nodes.Count - 4, 4);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x28, "exp_op0_checked"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_29_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 4, 4);
            nodes.RemoveRange(nodes.Count - 4, 4);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x29, "exp_op0_unchecked"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_2A_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 7, 7);
            nodes.RemoveRange(nodes.Count - 7, 7);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x2A, "exp_op0_array_creation"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_2A_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 6, 6);
            nodes.RemoveRange(nodes.Count - 6, 6);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x2A, "exp_op0_array_creation"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_2A_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 6, 6);
            nodes.RemoveRange(nodes.Count - 6, 6);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x2A, "exp_op0_array_creation"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_2A_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 5, 5);
            nodes.RemoveRange(nodes.Count - 5, 5);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x2A, "exp_op0_array_creation"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_2A_4(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x2A, "exp_op0_array_creation"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_2B_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x2B, "exp_op0_no_array"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_2B_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x2B, "exp_op0_no_array"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_2B_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x2B, "exp_op0_no_array"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_2B_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x2B, "exp_op0_no_array"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_2B_4(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x2B, "exp_op0_no_array"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_2B_5(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x2B, "exp_op0_no_array"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_2B_6(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x2B, "exp_op0_no_array"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_2B_7(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x2B, "exp_op0_no_array"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_2B_8(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x2B, "exp_op0_no_array"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_2C_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x2C, "exp_op0"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_2C_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x2C, "exp_op0"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_2D_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x2D, "exp_op1_pre_increment"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_2E_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x2E, "exp_op1_pre_decrement"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_2F_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 4, 4);
            nodes.RemoveRange(nodes.Count - 4, 4);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x2F, "exp_op1_cast"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_30_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x30, "exp_op1"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_30_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x30, "exp_op1"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_30_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x30, "exp_op1"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_30_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x30, "exp_op1"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_30_4(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x30, "exp_op1"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_30_5(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x30, "exp_op1"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_30_6(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x30, "exp_op1"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_30_7(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x30, "exp_op1"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_31_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x31, "exp_op2"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_31_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x31, "exp_op2"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_31_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x31, "exp_op2"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_31_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x31, "exp_op2"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_32_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x32, "exp_op3"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_32_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x32, "exp_op3"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_32_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x32, "exp_op3"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_33_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x33, "exp_op4"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_33_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x33, "exp_op4"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_33_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x33, "exp_op4"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_34_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x34, "exp_op5"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_34_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x34, "exp_op5"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_34_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x34, "exp_op5"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_34_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x34, "exp_op5"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_34_4(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x34, "exp_op5"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_34_5(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x34, "exp_op5"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_34_6(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x34, "exp_op5"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_35_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x35, "exp_op6"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_35_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x35, "exp_op6"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_35_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x35, "exp_op6"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_36_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x36, "exp_op7"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_36_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x36, "exp_op7"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_37_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x37, "exp_op8"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_37_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x37, "exp_op8"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_38_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x38, "exp_op9"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_38_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x38, "exp_op9"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_39_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x39, "exp_op10"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_39_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x39, "exp_op10"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_3A_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x3A, "exp_op11"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_3A_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x3A, "exp_op11"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_3B_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x3B, "exp_op12_conditional"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_3B_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 5, 5);
            nodes.RemoveRange(nodes.Count - 5, 5);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x3B, "exp_op12_conditional"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_3C_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_3C_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_3C_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_3C_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_3C_4(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_3C_5(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_3C_6(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_3C_7(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_3C_8(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_3C_9(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_3C_A(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x3C, "exp_op13_assigment"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_3D_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x3D, "expression"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_3D_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x3D, "expression"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_3E_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x3E, "exp_expression_list"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_3E_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x3E, "exp_expression_list"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_3F_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x3F, "exp_argument_list"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_3F_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x3F, "exp_argument_list"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_40_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x40, "exp_argument"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_40_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x40, "exp_argument"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_40_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x40, "exp_argument"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_41_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x41, "method_parameter_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_41_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x41, "method_parameter_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_42_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 4, 4);
            nodes.RemoveRange(nodes.Count - 4, 4);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x42, "method_parameter_fixed"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_42_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x42, "method_parameter_fixed"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_43_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 4, 4);
            nodes.RemoveRange(nodes.Count - 4, 4);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x43, "method_parameter_array"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_44_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x44, "method_parameter_fixed_list"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_44_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x44, "method_parameter_fixed_list"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_45_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x45, "method_parameters"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_45_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x45, "method_parameters"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_45_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x45, "method_parameters"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_46_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x46, "array_initializer"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_47_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x47, "variable_initializer"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_47_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x47, "variable_initializer"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_48_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x48, "variable_initializer_list"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_48_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x48, "variable_initializer_list"));

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_49_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x49, "variable_declarator"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_49_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x49, "variable_declarator"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_4A_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x4A, "variable_declarators"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_4B_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x4B, "stmt_empty"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_4C_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x4C, "stmt_labeled"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_4D_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x4D, "stmt_variable_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_4E_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 4, 4);
            nodes.RemoveRange(nodes.Count - 4, 4);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x4E, "stmt_constant_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_4F_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x4F, "stmt_exp"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_4F_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x4F, "stmt_exp"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_4F_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x4F, "stmt_exp"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_4F_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x4F, "stmt_exp"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_4F_4(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x4F, "stmt_exp"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_4F_5(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x4F, "stmt_exp"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_4F_6(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x4F, "stmt_exp"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_50_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x50, "stmt_exp_list"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_51_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x51, "stmt_expression"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_52_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 7, 7);
            nodes.RemoveRange(nodes.Count - 7, 7);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x52, "stmt_if_matched"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_52_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 7, 7);
            nodes.RemoveRange(nodes.Count - 7, 7);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x52, "stmt_if_matched"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_52_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 7, 7);
            nodes.RemoveRange(nodes.Count - 7, 7);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x52, "stmt_if_matched"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_52_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 7, 7);
            nodes.RemoveRange(nodes.Count - 7, 7);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x52, "stmt_if_matched"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_53_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 5, 5);
            nodes.RemoveRange(nodes.Count - 5, 5);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x53, "stmt_if_open"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_53_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 7, 7);
            nodes.RemoveRange(nodes.Count - 7, 7);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x53, "stmt_if_open"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_53_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 7, 7);
            nodes.RemoveRange(nodes.Count - 7, 7);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x53, "stmt_if_open"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_54_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x54, "stmt_switch_label"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_54_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x54, "stmt_switch_label"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_55_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x55, "stmt_switch_section"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_56_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x56, "stmt_switch_block"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_57_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 5, 5);
            nodes.RemoveRange(nodes.Count - 5, 5);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x57, "stmt_switch"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_58_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 7, 7);
            nodes.RemoveRange(nodes.Count - 7, 7);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x58, "stmt_do"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_59_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 5, 5);
            nodes.RemoveRange(nodes.Count - 5, 5);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x59, "stmt_while"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_5A_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x5A, "stmt_for_initializer"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_5A_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x5A, "stmt_for_initializer"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_5B_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x5B, "stmt_for_condition"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_5C_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x5C, "stmt_for_iterator"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_5D_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 9, 9);
            nodes.RemoveRange(nodes.Count - 9, 9);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x5D, "stmt_for"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            SubRoot.AppendChild(Definition[7]);

            SubRoot.AppendChild(Definition[8]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_5D_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 8, 8);
            nodes.RemoveRange(nodes.Count - 8, 8);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x5D, "stmt_for"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            SubRoot.AppendChild(Definition[7]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_5D_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 8, 8);
            nodes.RemoveRange(nodes.Count - 8, 8);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x5D, "stmt_for"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            SubRoot.AppendChild(Definition[7]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_5D_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 7, 7);
            nodes.RemoveRange(nodes.Count - 7, 7);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x5D, "stmt_for"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_5D_4(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 8, 8);
            nodes.RemoveRange(nodes.Count - 8, 8);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x5D, "stmt_for"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            SubRoot.AppendChild(Definition[7]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_5D_5(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 7, 7);
            nodes.RemoveRange(nodes.Count - 7, 7);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x5D, "stmt_for"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_5D_6(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 7, 7);
            nodes.RemoveRange(nodes.Count - 7, 7);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x5D, "stmt_for"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_5D_7(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 6, 6);
            nodes.RemoveRange(nodes.Count - 6, 6);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x5D, "stmt_for"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_5E_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 8, 8);
            nodes.RemoveRange(nodes.Count - 8, 8);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x5E, "stmt_foreach"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            SubRoot.AppendChild(Definition[7]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_5F_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x5F, "stmt_jump_break"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_60_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x60, "stmt_jump_continue"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_61_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x61, "stmt_jump_goto"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_61_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 4, 4);
            nodes.RemoveRange(nodes.Count - 4, 4);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x61, "stmt_jump_goto"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_61_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x61, "stmt_jump_goto"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_62_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x62, "stmt_jump_return"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_62_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x62, "stmt_jump_return"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_63_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x63, "stmt_jump_throw"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_63_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x63, "stmt_jump_throw"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_64_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x64, "stmt_try_clause_catch_gen"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_65_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 6, 6);
            nodes.RemoveRange(nodes.Count - 6, 6);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x65, "stmt_try_clause_catch_spec"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_65_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 5, 5);
            nodes.RemoveRange(nodes.Count - 5, 5);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x65, "stmt_try_clause_catch_spec"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_66_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x66, "stmt_try_clause_finally"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_67_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 4, 4);
            nodes.RemoveRange(nodes.Count - 4, 4);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x67, "stmt_try_clauses"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_67_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x67, "stmt_try_clauses"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_67_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x67, "stmt_try_clauses"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_67_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x67, "stmt_try_clauses"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_67_4(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x67, "stmt_try_clauses"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_67_5(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x67, "stmt_try_clauses"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_67_6(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x67, "stmt_try_clauses"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_68_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x68, "stmt_try"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_69_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x69, "stmt_unchecked"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_6A_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x6A, "stmt_checked"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_6B_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 5, 5);
            nodes.RemoveRange(nodes.Count - 5, 5);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x6B, "stmt_lock"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_6C_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x6C, "stmt_using_resource"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_6C_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x6C, "stmt_using_resource"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_6D_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 5, 5);
            nodes.RemoveRange(nodes.Count - 5, 5);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x6D, "stmt_using"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_6E_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x6E, "stmt_embedded_base"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_6E_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x6E, "stmt_embedded_base"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_6E_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x6E, "stmt_embedded_base"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_6E_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x6E, "stmt_embedded_base"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_6E_4(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x6E, "stmt_embedded_base"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_6E_5(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x6E, "stmt_embedded_base"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_6E_6(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x6E, "stmt_embedded_base"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_6E_7(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x6E, "stmt_embedded_base"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_6E_8(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x6E, "stmt_embedded_base"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_6E_9(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x6E, "stmt_embedded_base"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_6E_A(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x6E, "stmt_embedded_base"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_6E_B(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x6E, "stmt_embedded_base"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_6E_C(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x6E, "stmt_embedded_base"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_6E_D(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x6E, "stmt_embedded_base"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_6E_E(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x6E, "stmt_embedded_base"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_6E_F(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x6E, "stmt_embedded_base"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_6E_10(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x6E, "stmt_embedded_base"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_6E_11(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x6E, "stmt_embedded_base"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_6F_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x6F, "stmt_embedded"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_6F_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x6F, "stmt_embedded"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_6F_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x6F, "stmt_embedded"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_70_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x70, "statement"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_70_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x70, "statement"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_70_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x70, "statement"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_70_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x70, "statement"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_71_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x71, "stmt_list"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_72_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x72, "stmt_block"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_72_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x72, "stmt_block"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_73_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x73, "obj_accessor_body"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_73_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x73, "obj_accessor_body"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_74_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x74, "obj_accessor_get_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_74_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x74, "obj_accessor_get_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_75_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x75, "obj_accessor_set_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_75_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x75, "obj_accessor_set_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_76_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x76, "obj_accessor_add_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_76_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x76, "obj_accessor_add_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_77_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x77, "obj_accessor_remove_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_77_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x77, "obj_accessor_remove_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_78_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x78, "obj_const_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_78_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x78, "obj_const_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_78_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x78, "obj_const_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_78_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x78, "obj_const_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_78_4(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x78, "obj_const_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_79_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x79, "obj_const_modifiers"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_7A_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x7A, "obj_const_declarator"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_7B_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x7B, "obj_const_declarators"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_7C_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 6, 6);
            nodes.RemoveRange(nodes.Count - 6, 6);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x7C, "obj_const_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_7D_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x7D, "obj_field_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_7D_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x7D, "obj_field_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_7D_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x7D, "obj_field_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_7D_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x7D, "obj_field_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_7D_4(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x7D, "obj_field_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_7D_5(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x7D, "obj_field_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_7D_6(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x7D, "obj_field_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_7D_7(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x7D, "obj_field_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_7E_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x7E, "obj_field_modifiers"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_7F_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 5, 5);
            nodes.RemoveRange(nodes.Count - 5, 5);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x7F, "obj_field_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_80_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x80, "obj_method_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_80_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x80, "obj_method_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_80_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x80, "obj_method_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_80_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x80, "obj_method_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_80_4(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x80, "obj_method_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_80_5(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x80, "obj_method_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_80_6(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x80, "obj_method_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_80_7(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x80, "obj_method_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_80_8(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x80, "obj_method_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_80_9(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x80, "obj_method_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_80_A(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x80, "obj_method_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_81_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x81, "obj_method_modifiers"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_82_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 7, 7);
            nodes.RemoveRange(nodes.Count - 7, 7);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x82, "obj_method_header"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_82_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 6, 6);
            nodes.RemoveRange(nodes.Count - 6, 6);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x82, "obj_method_header"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_83_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x83, "obj_method_body"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_83_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x83, "obj_method_body"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_84_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x84, "obj_method_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_85_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x85, "obj_property_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_85_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x85, "obj_property_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_85_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x85, "obj_property_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_85_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x85, "obj_property_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_85_4(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x85, "obj_property_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_85_5(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x85, "obj_property_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_85_6(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x85, "obj_property_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_85_7(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x85, "obj_property_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_85_8(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x85, "obj_property_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_85_9(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x85, "obj_property_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_85_A(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x85, "obj_property_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_86_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x86, "obj_property_modifiers"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_87_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x87, "obj_property_accessors"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_87_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x87, "obj_property_accessors"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_87_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x87, "obj_property_accessors"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_87_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x87, "obj_property_accessors"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_88_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 7, 7);
            nodes.RemoveRange(nodes.Count - 7, 7);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x88, "obj_property_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_89_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x89, "obj_event_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_89_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x89, "obj_event_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_89_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x89, "obj_event_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_89_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x89, "obj_event_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_89_4(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x89, "obj_event_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_89_5(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x89, "obj_event_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_89_6(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x89, "obj_event_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_89_7(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x89, "obj_event_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_89_8(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x89, "obj_event_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_89_9(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x89, "obj_event_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_89_A(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x89, "obj_event_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_8A_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x8A, "obj_event_modifiers"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_8B_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x8B, "obj_event_accessors"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_8B_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x8B, "obj_event_accessors"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_8C_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 6, 6);
            nodes.RemoveRange(nodes.Count - 6, 6);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x8C, "obj_event_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_8C_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 8, 8);
            nodes.RemoveRange(nodes.Count - 8, 8);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x8C, "obj_event_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            SubRoot.AppendChild(Definition[7]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_8D_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x8D, "obj_indexer_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_8D_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x8D, "obj_indexer_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_8D_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x8D, "obj_indexer_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_8D_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x8D, "obj_indexer_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_8D_4(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x8D, "obj_indexer_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_8D_5(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x8D, "obj_indexer_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_8D_6(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x8D, "obj_indexer_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_8D_7(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x8D, "obj_indexer_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_8D_8(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x8D, "obj_indexer_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_8D_9(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x8D, "obj_indexer_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_8E_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x8E, "obj_indexer_modifiers"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_8F_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 5, 5);
            nodes.RemoveRange(nodes.Count - 5, 5);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x8F, "obj_indexer_declarator"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_8F_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 4, 4);
            nodes.RemoveRange(nodes.Count - 4, 4);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x8F, "obj_indexer_declarator"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_8F_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 7, 7);
            nodes.RemoveRange(nodes.Count - 7, 7);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x8F, "obj_indexer_declarator"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_8F_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 6, 6);
            nodes.RemoveRange(nodes.Count - 6, 6);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x8F, "obj_indexer_declarator"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_90_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 6, 6);
            nodes.RemoveRange(nodes.Count - 6, 6);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x90, "obj_indexer_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_91_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x91, "obj_operator_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_91_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x91, "obj_operator_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_91_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x91, "obj_operator_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_92_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x92, "obj_operator_modifiers"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_93_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x93, "obj_operator_binary"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_93_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x93, "obj_operator_binary"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_93_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x93, "obj_operator_binary"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_93_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x93, "obj_operator_binary"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_93_4(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x93, "obj_operator_binary"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_93_5(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x93, "obj_operator_binary"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_93_6(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x93, "obj_operator_binary"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_93_7(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x93, "obj_operator_binary"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_93_8(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x93, "obj_operator_binary"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_93_9(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x93, "obj_operator_binary"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_93_A(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x93, "obj_operator_binary"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_93_B(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x93, "obj_operator_binary"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_93_C(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x93, "obj_operator_binary"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_93_D(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x93, "obj_operator_binary"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_93_E(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x93, "obj_operator_binary"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_93_F(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x93, "obj_operator_binary"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_94_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x94, "obj_operator_unary"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_94_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x94, "obj_operator_unary"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_94_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x94, "obj_operator_unary"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_94_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x94, "obj_operator_unary"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_94_4(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x94, "obj_operator_unary"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_94_5(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x94, "obj_operator_unary"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_94_6(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x94, "obj_operator_unary"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_94_7(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x94, "obj_operator_unary"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_95_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x95, "obj_operator_body"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_95_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x95, "obj_operator_body"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_96_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 10, 10);
            nodes.RemoveRange(nodes.Count - 10, 10);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x96, "obj_operator_binary_declarator"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            SubRoot.AppendChild(Definition[7]);

            SubRoot.AppendChild(Definition[8]);

            SubRoot.AppendChild(Definition[9]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_97_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 7, 7);
            nodes.RemoveRange(nodes.Count - 7, 7);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x97, "obj_operator_unary_declarator"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_98_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 7, 7);
            nodes.RemoveRange(nodes.Count - 7, 7);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x98, "obj_operator_conv_declarator"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_98_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 7, 7);
            nodes.RemoveRange(nodes.Count - 7, 7);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x98, "obj_operator_conv_declarator"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_99_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x99, "obj_operator_declarator"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_99_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x99, "obj_operator_declarator"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_99_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x99, "obj_operator_declarator"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_9A_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 4, 4);
            nodes.RemoveRange(nodes.Count - 4, 4);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x9A, "obj_operator_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_9B_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x9B, "obj_ctor_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_9B_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x9B, "obj_ctor_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_9B_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x9B, "obj_ctor_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_9B_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x9B, "obj_ctor_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_9B_4(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x9B, "obj_ctor_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_9C_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x9C, "obj_ctor_modifiers"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_9D_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x9D, "obj_ctor_body"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_9D_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x9D, "obj_ctor_body"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_9E_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 5, 5);
            nodes.RemoveRange(nodes.Count - 5, 5);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x9E, "obj_ctor_initializer"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_9E_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 4, 4);
            nodes.RemoveRange(nodes.Count - 4, 4);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x9E, "obj_ctor_initializer"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_9E_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 5, 5);
            nodes.RemoveRange(nodes.Count - 5, 5);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x9E, "obj_ctor_initializer"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_9E_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 4, 4);
            nodes.RemoveRange(nodes.Count - 4, 4);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x9E, "obj_ctor_initializer"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_9F_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 5, 5);
            nodes.RemoveRange(nodes.Count - 5, 5);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x9F, "obj_ctor_declarator"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_9F_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 4, 4);
            nodes.RemoveRange(nodes.Count - 4, 4);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x9F, "obj_ctor_declarator"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_A0_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 4, 4);
            nodes.RemoveRange(nodes.Count - 4, 4);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xA0, "obj_ctor_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_A1_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xA1, "obj_static_ctor_modifiers"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_A1_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xA1, "obj_static_ctor_modifiers"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_A1_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xA1, "obj_static_ctor_modifiers"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_A2_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xA2, "obj_static_ctor_body"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_A2_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xA2, "obj_static_ctor_body"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_A3_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 6, 6);
            nodes.RemoveRange(nodes.Count - 6, 6);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xA3, "obj_static_ctor_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_A4_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xA4, "obj_destructor_body"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_A4_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xA4, "obj_destructor_body"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_A5_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 7, 7);
            nodes.RemoveRange(nodes.Count - 7, 7);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xA5, "obj_destructor_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_A5_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 6, 6);
            nodes.RemoveRange(nodes.Count - 6, 6);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xA5, "obj_destructor_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_A6_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xA6, "obj_type_declaration"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_A6_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xA6, "obj_type_declaration"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_A6_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xA6, "obj_type_declaration"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_A7_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xA7, "obj_type_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_A7_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xA7, "obj_type_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_A7_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xA7, "obj_type_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_A7_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xA7, "obj_type_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_A7_4(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xA7, "obj_type_modifier"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_A8_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xA8, "obj_type_modifiers"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_A9_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xA9, "class_modifiers"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_A9_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xA9, "class_modifiers"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_A9_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xA9, "class_modifiers"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_AA_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xAA, "class_base_list"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_AB_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xAB, "class_base"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_AB_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xAB, "class_base"));

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_AC_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xAC, "class_member_declaration"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_AC_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xAC, "class_member_declaration"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_AC_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xAC, "class_member_declaration"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_AC_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xAC, "class_member_declaration"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_AC_4(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xAC, "class_member_declaration"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_AC_5(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xAC, "class_member_declaration"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_AC_6(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xAC, "class_member_declaration"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_AC_7(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xAC, "class_member_declaration"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_AC_8(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xAC, "class_member_declaration"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_AC_9(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xAC, "class_member_declaration"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_AC_A(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xAC, "class_member_declaration"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_AD_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xAD, "class_members"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_AE_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xAE, "class_body"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_AF_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 7, 7);
            nodes.RemoveRange(nodes.Count - 7, 7);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xAF, "class_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_AF_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 6, 6);
            nodes.RemoveRange(nodes.Count - 6, 6);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xAF, "class_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_B0_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xB0, "struct_base_list"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_B1_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xB1, "struct_base"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_B1_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xB1, "struct_base"));

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_B2_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xB2, "struct_member_declaration"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_B2_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xB2, "struct_member_declaration"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_B2_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xB2, "struct_member_declaration"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_B2_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xB2, "struct_member_declaration"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_B2_4(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xB2, "struct_member_declaration"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_B2_5(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xB2, "struct_member_declaration"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_B2_6(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xB2, "struct_member_declaration"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_B2_7(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xB2, "struct_member_declaration"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_B2_8(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xB2, "struct_member_declaration"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_B2_9(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xB2, "struct_member_declaration"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_B3_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xB3, "struct_members"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_B4_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xB4, "struct_body"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_B5_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 7, 7);
            nodes.RemoveRange(nodes.Count - 7, 7);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xB5, "struct_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_B5_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 6, 6);
            nodes.RemoveRange(nodes.Count - 6, 6);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xB5, "struct_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_B6_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 6, 6);
            nodes.RemoveRange(nodes.Count - 6, 6);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xB6, "interface_accessors"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_B6_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xB6, "interface_accessors"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_B6_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 6, 6);
            nodes.RemoveRange(nodes.Count - 6, 6);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xB6, "interface_accessors"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_B6_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xB6, "interface_accessors"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_B7_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 10, 10);
            nodes.RemoveRange(nodes.Count - 10, 10);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xB7, "interface_indexer_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            SubRoot.AppendChild(Definition[7]);

            SubRoot.AppendChild(Definition[8]);

            SubRoot.AppendChild(Definition[9]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_B7_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 9, 9);
            nodes.RemoveRange(nodes.Count - 9, 9);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xB7, "interface_indexer_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            SubRoot.AppendChild(Definition[7]);

            SubRoot.AppendChild(Definition[8]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_B7_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 9, 9);
            nodes.RemoveRange(nodes.Count - 9, 9);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xB7, "interface_indexer_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            SubRoot.AppendChild(Definition[7]);

            SubRoot.AppendChild(Definition[8]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_B7_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 8, 8);
            nodes.RemoveRange(nodes.Count - 8, 8);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xB7, "interface_indexer_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            SubRoot.AppendChild(Definition[7]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_B8_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 6, 6);
            nodes.RemoveRange(nodes.Count - 6, 6);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xB8, "interface_event_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_B8_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 5, 5);
            nodes.RemoveRange(nodes.Count - 5, 5);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xB8, "interface_event_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_B9_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 7, 7);
            nodes.RemoveRange(nodes.Count - 7, 7);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xB9, "interface_property_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_B9_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 6, 6);
            nodes.RemoveRange(nodes.Count - 6, 6);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xB9, "interface_property_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_BA_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 8, 8);
            nodes.RemoveRange(nodes.Count - 8, 8);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xBA, "interface_method_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            SubRoot.AppendChild(Definition[7]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_BA_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 7, 7);
            nodes.RemoveRange(nodes.Count - 7, 7);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xBA, "interface_method_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_BA_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 7, 7);
            nodes.RemoveRange(nodes.Count - 7, 7);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xBA, "interface_method_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_BA_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 6, 6);
            nodes.RemoveRange(nodes.Count - 6, 6);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xBA, "interface_method_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_BB_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xBB, "interface_member_declaration"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_BB_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xBB, "interface_member_declaration"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_BB_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xBB, "interface_member_declaration"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_BB_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xBB, "interface_member_declaration"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_BC_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xBC, "interface_body"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_BD_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xBD, "interface_base_list"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_BE_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xBE, "interface_base"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_BE_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xBE, "interface_base"));

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_BF_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 7, 7);
            nodes.RemoveRange(nodes.Count - 7, 7);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xBF, "interface_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_BF_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 6, 6);
            nodes.RemoveRange(nodes.Count - 6, 6);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xBF, "interface_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_C0_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 4, 4);
            nodes.RemoveRange(nodes.Count - 4, 4);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xC0, "enum_member_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_C1_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xC1, "enum_member_declaration_list"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_C1_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xC1, "enum_member_declaration_list"));

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_C2_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xC2, "enum_body"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_C3_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xC3, "enum_base"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_C3_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xC3, "enum_base"));

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_C4_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 7, 7);
            nodes.RemoveRange(nodes.Count - 7, 7);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xC4, "enum_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_C4_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 6, 6);
            nodes.RemoveRange(nodes.Count - 6, 6);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xC4, "enum_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_C5_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 9, 9);
            nodes.RemoveRange(nodes.Count - 9, 9);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xC5, "delegate_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            SubRoot.AppendChild(Definition[7]);

            SubRoot.AppendChild(Definition[8]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_C5_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 8, 8);
            nodes.RemoveRange(nodes.Count - 8, 8);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xC5, "delegate_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            SubRoot.AppendChild(Definition[5]);

            SubRoot.AppendChild(Definition[6]);

            SubRoot.AppendChild(Definition[7]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_C6_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xC6, "attribute_argument_positional"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_C7_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xC7, "attribute_argument_named"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_C8_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xC8, "attribute_argument_positional_list"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_C8_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xC8, "attribute_argument_positional_list"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_C9_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xC9, "attribute_argument_named_list"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_C9_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xC9, "attribute_argument_named_list"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_CA_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xCA, "attribute_argument_list"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_CA_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xCA, "attribute_argument_list"));

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_CA_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xCA, "attribute_argument_list"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_CA_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xCA, "attribute_argument_list"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_CB_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xCB, "attribute_arguments"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_CC_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xCC, "attribute"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_CC_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xCC, "attribute"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_CD_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xCD, "attribute_list"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_CE_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xCE, "attribute_target"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_CE_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xCE, "attribute_target"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_CE_2(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xCE, "attribute_target"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_CE_3(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xCE, "attribute_target"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_CE_4(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xCE, "attribute_target"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_CE_5(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xCE, "attribute_target"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_CE_6(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xCE, "attribute_target"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_CF_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 5, 5);
            nodes.RemoveRange(nodes.Count - 5, 5);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xCF, "attribute_section"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_CF_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xCF, "attribute_section"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_D0_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xD0, "attributes"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_D1_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xD1, "global_attribute_target"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_D1_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xD1, "global_attribute_target"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_D2_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 5, 5);
            nodes.RemoveRange(nodes.Count - 5, 5);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xD2, "global_attribute_section"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_D3_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xD3, "global_attributes"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_D4_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xD4, "directive_using_namespace"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_D5_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 5, 5);
            nodes.RemoveRange(nodes.Count - 5, 5);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xD5, "directive_using_alias"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            SubRoot.AppendChild(Definition[4]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_D6_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xD6, "directive"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_D6_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xD6, "directive"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_D7_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xD7, "directives"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_D8_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xD8, "namespace_member_declaration"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_D8_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xD8, "namespace_member_declaration"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_D9_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xD9, "namespace_members"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_DA_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 4, 4);
            nodes.RemoveRange(nodes.Count - 4, 4);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xDA, "namespace_body"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_DB_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 4, 4);
            nodes.RemoveRange(nodes.Count - 4, 4);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xDB, "namespace_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            SubRoot.AppendChild(Definition[3]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_DB_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xDB, "namespace_declaration"));

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_DC_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 1, 1);
            nodes.RemoveRange(nodes.Count - 1, 1);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xDC, "compilation_unit"));

            SubRoot.AppendChild(Definition[0]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_DE_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xDE, "_m222"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_DE_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xDE, "_m222"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_EE_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xEE, "_m238"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_EE_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xEE, "_m238"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_F2_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xF2, "_m242"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_F2_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0xF2, "_m242"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_154_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x154, "_m340"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_154_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x154, "_m340"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_157_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x157, "_m343"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_157_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x157, "_m343"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_15E_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x15E, "_m350"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_15E_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x15E, "_m350"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_16F_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x16F, "_m367"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_16F_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x16F, "_m367"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_171_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x171, "_m369"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_171_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x171, "_m369"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_19C_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x19C, "_m412"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_19C_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x19C, "_m412"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1A6_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1A6, "_m422"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1A6_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1A6, "_m422"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1B3_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1B3, "_m435"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1B3_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1B3, "_m435"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1B6_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1B6, "_m438"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1B6_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1B6, "_m438"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1C1_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1C1, "_m449"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1C1_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1C1, "_m449"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1CE_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1CE, "_m462"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1CE_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1CE, "_m462"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1DD_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1DD, "_m477"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1DD_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1DD, "_m477"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1EB_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1EB, "_m491"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1EB_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1EB, "_m491"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1FB_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1FB, "_m507"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_1FB_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x1FB, "_m507"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_208_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x208, "_m520"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_208_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x208, "_m520"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_233_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x233, "_m563"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_233_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x233, "_m563"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_24D_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x24D, "_m589"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_24D_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x24D, "_m589"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_251_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x251, "_m593"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_251_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x251, "_m593"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_253_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x253, "_m595"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_253_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x253, "_m595"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_259_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x259, "_m601"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_259_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x259, "_m601"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_25B_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x25B, "_m603"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_25B_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x25B, "_m603"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_279_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x279, "_m633"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_279_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x279, "_m633"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_27C_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x27C, "_m636"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_27C_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x27C, "_m636"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_282_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x282, "_m642"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_282_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x282, "_m642"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_293_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 3, 3);
            nodes.RemoveRange(nodes.Count - 3, 3);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x293, "_m659"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            SubRoot.AppendChild(Definition[2]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_293_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x293, "_m659"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_29E_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x29E, "_m670"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_29E_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x29E, "_m670"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_2A4_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x2A4, "_m676"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_2A4_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x2A4, "_m676"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_2AA_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x2AA, "_m682"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_2AA_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x2AA, "_m682"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_2AB_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x2AB, "_m683"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            SubRoot.AppendChild(Definition[0]);

            SubRoot.AppendChild(Definition[1]);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_2AB_1(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x2AB, "_m683"), Hime.Kernel.Parsers.SyntaxTreeNodeAction.Replace);

            nodes.Add(SubRoot);
        }

        private static void ReduceRule_2B0_0(Hime.Kernel.Parsers.SyntaxTreeNodeCollection nodes)
        {

            System.Collections.Generic.List<Hime.Kernel.Parsers.SyntaxTreeNode> Definition = nodes.GetRange(nodes.Count - 2, 2);
            nodes.RemoveRange(nodes.Count - 2, 2);

            Hime.Kernel.Parsers.SyntaxTreeNode SubRoot = new Hime.Kernel.Parsers.SyntaxTreeNode(new Hime.Kernel.Parsers.SymbolVariable(0x2B0, "_Axiom_"));

            SubRoot.AppendChild(Definition[0], Hime.Kernel.Parsers.SyntaxTreeNodeAction.Promote);

            SubRoot.AppendChild(Definition[1], Hime.Kernel.Parsers.SyntaxTreeNodeAction.Drop);

            nodes.Add(SubRoot);
        }

        private static Production[] p_Rules = { ReduceRule_14_0, ReduceRule_15_0, ReduceRule_15_1, ReduceRule_16_0, ReduceRule_16_1, ReduceRule_17_0, ReduceRule_17_1, ReduceRule_17_2, ReduceRule_18_0, ReduceRule_18_1, ReduceRule_18_2, ReduceRule_18_3, ReduceRule_19_0, ReduceRule_19_1, ReduceRule_19_2, ReduceRule_19_3, ReduceRule_19_4, ReduceRule_19_5, ReduceRule_19_6, ReduceRule_19_7, ReduceRule_19_8, ReduceRule_1A_0, ReduceRule_1A_1, ReduceRule_1B_0, ReduceRule_1C_0, ReduceRule_1D_0, ReduceRule_1E_0, ReduceRule_1E_1, ReduceRule_1E_2, ReduceRule_1E_3, ReduceRule_1E_4, ReduceRule_1E_5, ReduceRule_1E_6, ReduceRule_1E_7, ReduceRule_1E_8, ReduceRule_1E_9, ReduceRule_1E_A, ReduceRule_1E_B, ReduceRule_1E_C, ReduceRule_1E_D, ReduceRule_1E_E, ReduceRule_1F_0, ReduceRule_1F_1, ReduceRule_20_0, ReduceRule_20_1, ReduceRule_20_2, ReduceRule_20_3, ReduceRule_20_4, ReduceRule_20_5, ReduceRule_20_6, ReduceRule_20_7, ReduceRule_20_8, ReduceRule_20_9, ReduceRule_20_A, ReduceRule_20_B, ReduceRule_20_C, ReduceRule_21_0, ReduceRule_21_1, ReduceRule_22_0, ReduceRule_22_1, ReduceRule_23_0, ReduceRule_24_0, ReduceRule_25_0, ReduceRule_25_1, ReduceRule_26_0, ReduceRule_26_1, ReduceRule_27_0, ReduceRule_28_0, ReduceRule_29_0, ReduceRule_2A_0, ReduceRule_2A_1, ReduceRule_2A_2, ReduceRule_2A_3, ReduceRule_2A_4, ReduceRule_2B_0, ReduceRule_2B_1, ReduceRule_2B_2, ReduceRule_2B_3, ReduceRule_2B_4, ReduceRule_2B_5, ReduceRule_2B_6, ReduceRule_2B_7, ReduceRule_2B_8, ReduceRule_2C_0, ReduceRule_2C_1, ReduceRule_2D_0, ReduceRule_2E_0, ReduceRule_2F_0, ReduceRule_30_0, ReduceRule_30_1, ReduceRule_30_2, ReduceRule_30_3, ReduceRule_30_4, ReduceRule_30_5, ReduceRule_30_6, ReduceRule_30_7, ReduceRule_31_0, ReduceRule_31_1, ReduceRule_31_2, ReduceRule_31_3, ReduceRule_32_0, ReduceRule_32_1, ReduceRule_32_2, ReduceRule_33_0, ReduceRule_33_1, ReduceRule_33_2, ReduceRule_34_0, ReduceRule_34_1, ReduceRule_34_2, ReduceRule_34_3, ReduceRule_34_4, ReduceRule_34_5, ReduceRule_34_6, ReduceRule_35_0, ReduceRule_35_1, ReduceRule_35_2, ReduceRule_36_0, ReduceRule_36_1, ReduceRule_37_0, ReduceRule_37_1, ReduceRule_38_0, ReduceRule_38_1, ReduceRule_39_0, ReduceRule_39_1, ReduceRule_3A_0, ReduceRule_3A_1, ReduceRule_3B_0, ReduceRule_3B_1, ReduceRule_3C_0, ReduceRule_3C_1, ReduceRule_3C_2, ReduceRule_3C_3, ReduceRule_3C_4, ReduceRule_3C_5, ReduceRule_3C_6, ReduceRule_3C_7, ReduceRule_3C_8, ReduceRule_3C_9, ReduceRule_3C_A, ReduceRule_3D_0, ReduceRule_3D_1, ReduceRule_3E_0, ReduceRule_3E_1, ReduceRule_3F_0, ReduceRule_3F_1, ReduceRule_40_0, ReduceRule_40_1, ReduceRule_40_2, ReduceRule_41_0, ReduceRule_41_1, ReduceRule_42_0, ReduceRule_42_1, ReduceRule_43_0, ReduceRule_44_0, ReduceRule_44_1, ReduceRule_45_0, ReduceRule_45_1, ReduceRule_45_2, ReduceRule_46_0, ReduceRule_47_0, ReduceRule_47_1, ReduceRule_48_0, ReduceRule_48_1, ReduceRule_49_0, ReduceRule_49_1, ReduceRule_4A_0, ReduceRule_4B_0, ReduceRule_4C_0, ReduceRule_4D_0, ReduceRule_4E_0, ReduceRule_4F_0, ReduceRule_4F_1, ReduceRule_4F_2, ReduceRule_4F_3, ReduceRule_4F_4, ReduceRule_4F_5, ReduceRule_4F_6, ReduceRule_50_0, ReduceRule_51_0, ReduceRule_52_0, ReduceRule_52_1, ReduceRule_52_2, ReduceRule_52_3, ReduceRule_53_0, ReduceRule_53_1, ReduceRule_53_2, ReduceRule_54_0, ReduceRule_54_1, ReduceRule_55_0, ReduceRule_56_0, ReduceRule_57_0, ReduceRule_58_0, ReduceRule_59_0, ReduceRule_5A_0, ReduceRule_5A_1, ReduceRule_5B_0, ReduceRule_5C_0, ReduceRule_5D_0, ReduceRule_5D_1, ReduceRule_5D_2, ReduceRule_5D_3, ReduceRule_5D_4, ReduceRule_5D_5, ReduceRule_5D_6, ReduceRule_5D_7, ReduceRule_5E_0, ReduceRule_5F_0, ReduceRule_60_0, ReduceRule_61_0, ReduceRule_61_1, ReduceRule_61_2, ReduceRule_62_0, ReduceRule_62_1, ReduceRule_63_0, ReduceRule_63_1, ReduceRule_64_0, ReduceRule_65_0, ReduceRule_65_1, ReduceRule_66_0, ReduceRule_67_0, ReduceRule_67_1, ReduceRule_67_2, ReduceRule_67_3, ReduceRule_67_4, ReduceRule_67_5, ReduceRule_67_6, ReduceRule_68_0, ReduceRule_69_0, ReduceRule_6A_0, ReduceRule_6B_0, ReduceRule_6C_0, ReduceRule_6C_1, ReduceRule_6D_0, ReduceRule_6E_0, ReduceRule_6E_1, ReduceRule_6E_2, ReduceRule_6E_3, ReduceRule_6E_4, ReduceRule_6E_5, ReduceRule_6E_6, ReduceRule_6E_7, ReduceRule_6E_8, ReduceRule_6E_9, ReduceRule_6E_A, ReduceRule_6E_B, ReduceRule_6E_C, ReduceRule_6E_D, ReduceRule_6E_E, ReduceRule_6E_F, ReduceRule_6E_10, ReduceRule_6E_11, ReduceRule_6F_0, ReduceRule_6F_1, ReduceRule_6F_2, ReduceRule_70_0, ReduceRule_70_1, ReduceRule_70_2, ReduceRule_70_3, ReduceRule_71_0, ReduceRule_72_0, ReduceRule_72_1, ReduceRule_73_0, ReduceRule_73_1, ReduceRule_74_0, ReduceRule_74_1, ReduceRule_75_0, ReduceRule_75_1, ReduceRule_76_0, ReduceRule_76_1, ReduceRule_77_0, ReduceRule_77_1, ReduceRule_78_0, ReduceRule_78_1, ReduceRule_78_2, ReduceRule_78_3, ReduceRule_78_4, ReduceRule_79_0, ReduceRule_7A_0, ReduceRule_7B_0, ReduceRule_7C_0, ReduceRule_7D_0, ReduceRule_7D_1, ReduceRule_7D_2, ReduceRule_7D_3, ReduceRule_7D_4, ReduceRule_7D_5, ReduceRule_7D_6, ReduceRule_7D_7, ReduceRule_7E_0, ReduceRule_7F_0, ReduceRule_80_0, ReduceRule_80_1, ReduceRule_80_2, ReduceRule_80_3, ReduceRule_80_4, ReduceRule_80_5, ReduceRule_80_6, ReduceRule_80_7, ReduceRule_80_8, ReduceRule_80_9, ReduceRule_80_A, ReduceRule_81_0, ReduceRule_82_0, ReduceRule_82_1, ReduceRule_83_0, ReduceRule_83_1, ReduceRule_84_0, ReduceRule_85_0, ReduceRule_85_1, ReduceRule_85_2, ReduceRule_85_3, ReduceRule_85_4, ReduceRule_85_5, ReduceRule_85_6, ReduceRule_85_7, ReduceRule_85_8, ReduceRule_85_9, ReduceRule_85_A, ReduceRule_86_0, ReduceRule_87_0, ReduceRule_87_1, ReduceRule_87_2, ReduceRule_87_3, ReduceRule_88_0, ReduceRule_89_0, ReduceRule_89_1, ReduceRule_89_2, ReduceRule_89_3, ReduceRule_89_4, ReduceRule_89_5, ReduceRule_89_6, ReduceRule_89_7, ReduceRule_89_8, ReduceRule_89_9, ReduceRule_89_A, ReduceRule_8A_0, ReduceRule_8B_0, ReduceRule_8B_1, ReduceRule_8C_0, ReduceRule_8C_1, ReduceRule_8D_0, ReduceRule_8D_1, ReduceRule_8D_2, ReduceRule_8D_3, ReduceRule_8D_4, ReduceRule_8D_5, ReduceRule_8D_6, ReduceRule_8D_7, ReduceRule_8D_8, ReduceRule_8D_9, ReduceRule_8E_0, ReduceRule_8F_0, ReduceRule_8F_1, ReduceRule_8F_2, ReduceRule_8F_3, ReduceRule_90_0, ReduceRule_91_0, ReduceRule_91_1, ReduceRule_91_2, ReduceRule_92_0, ReduceRule_93_0, ReduceRule_93_1, ReduceRule_93_2, ReduceRule_93_3, ReduceRule_93_4, ReduceRule_93_5, ReduceRule_93_6, ReduceRule_93_7, ReduceRule_93_8, ReduceRule_93_9, ReduceRule_93_A, ReduceRule_93_B, ReduceRule_93_C, ReduceRule_93_D, ReduceRule_93_E, ReduceRule_93_F, ReduceRule_94_0, ReduceRule_94_1, ReduceRule_94_2, ReduceRule_94_3, ReduceRule_94_4, ReduceRule_94_5, ReduceRule_94_6, ReduceRule_94_7, ReduceRule_95_0, ReduceRule_95_1, ReduceRule_96_0, ReduceRule_97_0, ReduceRule_98_0, ReduceRule_98_1, ReduceRule_99_0, ReduceRule_99_1, ReduceRule_99_2, ReduceRule_9A_0, ReduceRule_9B_0, ReduceRule_9B_1, ReduceRule_9B_2, ReduceRule_9B_3, ReduceRule_9B_4, ReduceRule_9C_0, ReduceRule_9D_0, ReduceRule_9D_1, ReduceRule_9E_0, ReduceRule_9E_1, ReduceRule_9E_2, ReduceRule_9E_3, ReduceRule_9F_0, ReduceRule_9F_1, ReduceRule_A0_0, ReduceRule_A1_0, ReduceRule_A1_1, ReduceRule_A1_2, ReduceRule_A2_0, ReduceRule_A2_1, ReduceRule_A3_0, ReduceRule_A4_0, ReduceRule_A4_1, ReduceRule_A5_0, ReduceRule_A5_1, ReduceRule_A6_0, ReduceRule_A6_1, ReduceRule_A6_2, ReduceRule_A7_0, ReduceRule_A7_1, ReduceRule_A7_2, ReduceRule_A7_3, ReduceRule_A7_4, ReduceRule_A8_0, ReduceRule_A9_0, ReduceRule_A9_1, ReduceRule_A9_2, ReduceRule_AA_0, ReduceRule_AB_0, ReduceRule_AB_1, ReduceRule_AC_0, ReduceRule_AC_1, ReduceRule_AC_2, ReduceRule_AC_3, ReduceRule_AC_4, ReduceRule_AC_5, ReduceRule_AC_6, ReduceRule_AC_7, ReduceRule_AC_8, ReduceRule_AC_9, ReduceRule_AC_A, ReduceRule_AD_0, ReduceRule_AE_0, ReduceRule_AF_0, ReduceRule_AF_1, ReduceRule_B0_0, ReduceRule_B1_0, ReduceRule_B1_1, ReduceRule_B2_0, ReduceRule_B2_1, ReduceRule_B2_2, ReduceRule_B2_3, ReduceRule_B2_4, ReduceRule_B2_5, ReduceRule_B2_6, ReduceRule_B2_7, ReduceRule_B2_8, ReduceRule_B2_9, ReduceRule_B3_0, ReduceRule_B4_0, ReduceRule_B5_0, ReduceRule_B5_1, ReduceRule_B6_0, ReduceRule_B6_1, ReduceRule_B6_2, ReduceRule_B6_3, ReduceRule_B7_0, ReduceRule_B7_1, ReduceRule_B7_2, ReduceRule_B7_3, ReduceRule_B8_0, ReduceRule_B8_1, ReduceRule_B9_0, ReduceRule_B9_1, ReduceRule_BA_0, ReduceRule_BA_1, ReduceRule_BA_2, ReduceRule_BA_3, ReduceRule_BB_0, ReduceRule_BB_1, ReduceRule_BB_2, ReduceRule_BB_3, ReduceRule_BC_0, ReduceRule_BD_0, ReduceRule_BE_0, ReduceRule_BE_1, ReduceRule_BF_0, ReduceRule_BF_1, ReduceRule_C0_0, ReduceRule_C1_0, ReduceRule_C1_1, ReduceRule_C2_0, ReduceRule_C3_0, ReduceRule_C3_1, ReduceRule_C4_0, ReduceRule_C4_1, ReduceRule_C5_0, ReduceRule_C5_1, ReduceRule_C6_0, ReduceRule_C7_0, ReduceRule_C8_0, ReduceRule_C8_1, ReduceRule_C9_0, ReduceRule_C9_1, ReduceRule_CA_0, ReduceRule_CA_1, ReduceRule_CA_2, ReduceRule_CA_3, ReduceRule_CB_0, ReduceRule_CC_0, ReduceRule_CC_1, ReduceRule_CD_0, ReduceRule_CE_0, ReduceRule_CE_1, ReduceRule_CE_2, ReduceRule_CE_3, ReduceRule_CE_4, ReduceRule_CE_5, ReduceRule_CE_6, ReduceRule_CF_0, ReduceRule_CF_1, ReduceRule_D0_0, ReduceRule_D1_0, ReduceRule_D1_1, ReduceRule_D2_0, ReduceRule_D3_0, ReduceRule_D4_0, ReduceRule_D5_0, ReduceRule_D6_0, ReduceRule_D6_1, ReduceRule_D7_0, ReduceRule_D8_0, ReduceRule_D8_1, ReduceRule_D9_0, ReduceRule_DA_0, ReduceRule_DB_0, ReduceRule_DB_1, ReduceRule_DC_0, ReduceRule_DE_0, ReduceRule_DE_1, ReduceRule_EE_0, ReduceRule_EE_1, ReduceRule_F2_0, ReduceRule_F2_1, ReduceRule_154_0, ReduceRule_154_1, ReduceRule_157_0, ReduceRule_157_1, ReduceRule_15E_0, ReduceRule_15E_1, ReduceRule_16F_0, ReduceRule_16F_1, ReduceRule_171_0, ReduceRule_171_1, ReduceRule_19C_0, ReduceRule_19C_1, ReduceRule_1A6_0, ReduceRule_1A6_1, ReduceRule_1B3_0, ReduceRule_1B3_1, ReduceRule_1B6_0, ReduceRule_1B6_1, ReduceRule_1C1_0, ReduceRule_1C1_1, ReduceRule_1CE_0, ReduceRule_1CE_1, ReduceRule_1DD_0, ReduceRule_1DD_1, ReduceRule_1EB_0, ReduceRule_1EB_1, ReduceRule_1FB_0, ReduceRule_1FB_1, ReduceRule_208_0, ReduceRule_208_1, ReduceRule_233_0, ReduceRule_233_1, ReduceRule_24D_0, ReduceRule_24D_1, ReduceRule_251_0, ReduceRule_251_1, ReduceRule_253_0, ReduceRule_253_1, ReduceRule_259_0, ReduceRule_259_1, ReduceRule_25B_0, ReduceRule_25B_1, ReduceRule_279_0, ReduceRule_279_1, ReduceRule_27C_0, ReduceRule_27C_1, ReduceRule_282_0, ReduceRule_282_1, ReduceRule_293_0, ReduceRule_293_1, ReduceRule_29E_0, ReduceRule_29E_1, ReduceRule_2A4_0, ReduceRule_2A4_1, ReduceRule_2AA_0, ReduceRule_2AA_1, ReduceRule_2AB_0, ReduceRule_2AB_1, ReduceRule_2B0_0 };
        private static ushort[] p_RulesHeadID = { 0x14, 0x15, 0x15, 0x16, 0x16, 0x17, 0x17, 0x17, 0x18, 0x18, 0x18, 0x18, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x21, 0x22, 0x22, 0x23, 0x24, 0x25, 0x25, 0x26, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x36, 0x36, 0x37, 0x37, 0x38, 0x38, 0x39, 0x39, 0x3A, 0x3A, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3D, 0x3D, 0x3E, 0x3E, 0x3F, 0x3F, 0x40, 0x40, 0x40, 0x41, 0x41, 0x42, 0x42, 0x43, 0x44, 0x44, 0x45, 0x45, 0x45, 0x46, 0x47, 0x47, 0x48, 0x48, 0x49, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x50, 0x51, 0x52, 0x52, 0x52, 0x52, 0x53, 0x53, 0x53, 0x54, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5A, 0x5B, 0x5C, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x61, 0x61, 0x62, 0x62, 0x63, 0x63, 0x64, 0x65, 0x65, 0x66, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6C, 0x6D, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6F, 0x6F, 0x6F, 0x70, 0x70, 0x70, 0x70, 0x71, 0x72, 0x72, 0x73, 0x73, 0x74, 0x74, 0x75, 0x75, 0x76, 0x76, 0x77, 0x77, 0x78, 0x78, 0x78, 0x78, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7E, 0x7F, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 0x82, 0x82, 0x83, 0x83, 0x84, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x85, 0x86, 0x87, 0x87, 0x87, 0x87, 0x88, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x8A, 0x8B, 0x8B, 0x8C, 0x8C, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8D, 0x8E, 0x8F, 0x8F, 0x8F, 0x8F, 0x90, 0x91, 0x91, 0x91, 0x92, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x93, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x94, 0x95, 0x95, 0x96, 0x97, 0x98, 0x98, 0x99, 0x99, 0x99, 0x9A, 0x9B, 0x9B, 0x9B, 0x9B, 0x9B, 0x9C, 0x9D, 0x9D, 0x9E, 0x9E, 0x9E, 0x9E, 0x9F, 0x9F, 0xA0, 0xA1, 0xA1, 0xA1, 0xA2, 0xA2, 0xA3, 0xA4, 0xA4, 0xA5, 0xA5, 0xA6, 0xA6, 0xA6, 0xA7, 0xA7, 0xA7, 0xA7, 0xA7, 0xA8, 0xA9, 0xA9, 0xA9, 0xAA, 0xAB, 0xAB, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAD, 0xAE, 0xAF, 0xAF, 0xB0, 0xB1, 0xB1, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB2, 0xB3, 0xB4, 0xB5, 0xB5, 0xB6, 0xB6, 0xB6, 0xB6, 0xB7, 0xB7, 0xB7, 0xB7, 0xB8, 0xB8, 0xB9, 0xB9, 0xBA, 0xBA, 0xBA, 0xBA, 0xBB, 0xBB, 0xBB, 0xBB, 0xBC, 0xBD, 0xBE, 0xBE, 0xBF, 0xBF, 0xC0, 0xC1, 0xC1, 0xC2, 0xC3, 0xC3, 0xC4, 0xC4, 0xC5, 0xC5, 0xC6, 0xC7, 0xC8, 0xC8, 0xC9, 0xC9, 0xCA, 0xCA, 0xCA, 0xCA, 0xCB, 0xCC, 0xCC, 0xCD, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCE, 0xCF, 0xCF, 0xD0, 0xD1, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD6, 0xD7, 0xD8, 0xD8, 0xD9, 0xDA, 0xDB, 0xDB, 0xDC, 0xDE, 0xDE, 0xEE, 0xEE, 0xF2, 0xF2, 0x154, 0x154, 0x157, 0x157, 0x15E, 0x15E, 0x16F, 0x16F, 0x171, 0x171, 0x19C, 0x19C, 0x1A6, 0x1A6, 0x1B3, 0x1B3, 0x1B6, 0x1B6, 0x1C1, 0x1C1, 0x1CE, 0x1CE, 0x1DD, 0x1DD, 0x1EB, 0x1EB, 0x1FB, 0x1FB, 0x208, 0x208, 0x233, 0x233, 0x24D, 0x24D, 0x251, 0x251, 0x253, 0x253, 0x259, 0x259, 0x25B, 0x25B, 0x279, 0x279, 0x27C, 0x27C, 0x282, 0x282, 0x293, 0x293, 0x29E, 0x29E, 0x2A4, 0x2A4, 0x2AA, 0x2AA, 0x2AB, 0x2AB, 0x2B0 };
        private static string[] p_RulesHeadName = { "qualified_name", "type", "type", "type_non_array", "type_non_array", "type_object", "type_object", "type_object", "type_simple", "type_simple", "type_simple", "type_simple", "type_simple_integral", "type_simple_integral", "type_simple_integral", "type_simple_integral", "type_simple_integral", "type_simple_integral", "type_simple_integral", "type_simple_integral", "type_simple_integral", "type_simple_float", "type_simple_float", "type_array", "type_array_rank", "type_array_rank_dim", "type_predefined", "type_predefined", "type_predefined", "type_predefined", "type_predefined", "type_predefined", "type_predefined", "type_predefined", "type_predefined", "type_predefined", "type_predefined", "type_predefined", "type_predefined", "type_predefined", "type_predefined", "type_return", "type_return", "exp_atom", "exp_atom", "exp_atom", "exp_atom", "exp_atom", "exp_atom", "exp_atom", "exp_atom", "exp_atom", "exp_atom", "exp_atom", "exp_atom", "exp_atom", "exp_op0_invoke", "exp_op0_invoke", "exp_op0_obj_creation", "exp_op0_obj_creation", "exp_op0_post_increment", "exp_op0_post_decrement", "exp_op0_member_access", "exp_op0_member_access", "exp_op0_element_access", "exp_op0_element_access", "exp_op0_typeof", "exp_op0_checked", "exp_op0_unchecked", "exp_op0_array_creation", "exp_op0_array_creation", "exp_op0_array_creation", "exp_op0_array_creation", "exp_op0_array_creation", "exp_op0_no_array", "exp_op0_no_array", "exp_op0_no_array", "exp_op0_no_array", "exp_op0_no_array", "exp_op0_no_array", "exp_op0_no_array", "exp_op0_no_array", "exp_op0_no_array", "exp_op0", "exp_op0", "exp_op1_pre_increment", "exp_op1_pre_decrement", "exp_op1_cast", "exp_op1", "exp_op1", "exp_op1", "exp_op1", "exp_op1", "exp_op1", "exp_op1", "exp_op1", "exp_op2", "exp_op2", "exp_op2", "exp_op2", "exp_op3", "exp_op3", "exp_op3", "exp_op4", "exp_op4", "exp_op4", "exp_op5", "exp_op5", "exp_op5", "exp_op5", "exp_op5", "exp_op5", "exp_op5", "exp_op6", "exp_op6", "exp_op6", "exp_op7", "exp_op7", "exp_op8", "exp_op8", "exp_op9", "exp_op9", "exp_op10", "exp_op10", "exp_op11", "exp_op11", "exp_op12_conditional", "exp_op12_conditional", "exp_op13_assigment", "exp_op13_assigment", "exp_op13_assigment", "exp_op13_assigment", "exp_op13_assigment", "exp_op13_assigment", "exp_op13_assigment", "exp_op13_assigment", "exp_op13_assigment", "exp_op13_assigment", "exp_op13_assigment", "expression", "expression", "exp_expression_list", "exp_expression_list", "exp_argument_list", "exp_argument_list", "exp_argument", "exp_argument", "exp_argument", "method_parameter_modifier", "method_parameter_modifier", "method_parameter_fixed", "method_parameter_fixed", "method_parameter_array", "method_parameter_fixed_list", "method_parameter_fixed_list", "method_parameters", "method_parameters", "method_parameters", "array_initializer", "variable_initializer", "variable_initializer", "variable_initializer_list", "variable_initializer_list", "variable_declarator", "variable_declarator", "variable_declarators", "stmt_empty", "stmt_labeled", "stmt_variable_declaration", "stmt_constant_declaration", "stmt_exp", "stmt_exp", "stmt_exp", "stmt_exp", "stmt_exp", "stmt_exp", "stmt_exp", "stmt_exp_list", "stmt_expression", "stmt_if_matched", "stmt_if_matched", "stmt_if_matched", "stmt_if_matched", "stmt_if_open", "stmt_if_open", "stmt_if_open", "stmt_switch_label", "stmt_switch_label", "stmt_switch_section", "stmt_switch_block", "stmt_switch", "stmt_do", "stmt_while", "stmt_for_initializer", "stmt_for_initializer", "stmt_for_condition", "stmt_for_iterator", "stmt_for", "stmt_for", "stmt_for", "stmt_for", "stmt_for", "stmt_for", "stmt_for", "stmt_for", "stmt_foreach", "stmt_jump_break", "stmt_jump_continue", "stmt_jump_goto", "stmt_jump_goto", "stmt_jump_goto", "stmt_jump_return", "stmt_jump_return", "stmt_jump_throw", "stmt_jump_throw", "stmt_try_clause_catch_gen", "stmt_try_clause_catch_spec", "stmt_try_clause_catch_spec", "stmt_try_clause_finally", "stmt_try_clauses", "stmt_try_clauses", "stmt_try_clauses", "stmt_try_clauses", "stmt_try_clauses", "stmt_try_clauses", "stmt_try_clauses", "stmt_try", "stmt_unchecked", "stmt_checked", "stmt_lock", "stmt_using_resource", "stmt_using_resource", "stmt_using", "stmt_embedded_base", "stmt_embedded_base", "stmt_embedded_base", "stmt_embedded_base", "stmt_embedded_base", "stmt_embedded_base", "stmt_embedded_base", "stmt_embedded_base", "stmt_embedded_base", "stmt_embedded_base", "stmt_embedded_base", "stmt_embedded_base", "stmt_embedded_base", "stmt_embedded_base", "stmt_embedded_base", "stmt_embedded_base", "stmt_embedded_base", "stmt_embedded_base", "stmt_embedded", "stmt_embedded", "stmt_embedded", "statement", "statement", "statement", "statement", "stmt_list", "stmt_block", "stmt_block", "obj_accessor_body", "obj_accessor_body", "obj_accessor_get_declaration", "obj_accessor_get_declaration", "obj_accessor_set_declaration", "obj_accessor_set_declaration", "obj_accessor_add_declaration", "obj_accessor_add_declaration", "obj_accessor_remove_declaration", "obj_accessor_remove_declaration", "obj_const_modifier", "obj_const_modifier", "obj_const_modifier", "obj_const_modifier", "obj_const_modifier", "obj_const_modifiers", "obj_const_declarator", "obj_const_declarators", "obj_const_declaration", "obj_field_modifier", "obj_field_modifier", "obj_field_modifier", "obj_field_modifier", "obj_field_modifier", "obj_field_modifier", "obj_field_modifier", "obj_field_modifier", "obj_field_modifiers", "obj_field_declaration", "obj_method_modifier", "obj_method_modifier", "obj_method_modifier", "obj_method_modifier", "obj_method_modifier", "obj_method_modifier", "obj_method_modifier", "obj_method_modifier", "obj_method_modifier", "obj_method_modifier", "obj_method_modifier", "obj_method_modifiers", "obj_method_header", "obj_method_header", "obj_method_body", "obj_method_body", "obj_method_declaration", "obj_property_modifier", "obj_property_modifier", "obj_property_modifier", "obj_property_modifier", "obj_property_modifier", "obj_property_modifier", "obj_property_modifier", "obj_property_modifier", "obj_property_modifier", "obj_property_modifier", "obj_property_modifier", "obj_property_modifiers", "obj_property_accessors", "obj_property_accessors", "obj_property_accessors", "obj_property_accessors", "obj_property_declaration", "obj_event_modifier", "obj_event_modifier", "obj_event_modifier", "obj_event_modifier", "obj_event_modifier", "obj_event_modifier", "obj_event_modifier", "obj_event_modifier", "obj_event_modifier", "obj_event_modifier", "obj_event_modifier", "obj_event_modifiers", "obj_event_accessors", "obj_event_accessors", "obj_event_declaration", "obj_event_declaration", "obj_indexer_modifier", "obj_indexer_modifier", "obj_indexer_modifier", "obj_indexer_modifier", "obj_indexer_modifier", "obj_indexer_modifier", "obj_indexer_modifier", "obj_indexer_modifier", "obj_indexer_modifier", "obj_indexer_modifier", "obj_indexer_modifiers", "obj_indexer_declarator", "obj_indexer_declarator", "obj_indexer_declarator", "obj_indexer_declarator", "obj_indexer_declaration", "obj_operator_modifier", "obj_operator_modifier", "obj_operator_modifier", "obj_operator_modifiers", "obj_operator_binary", "obj_operator_binary", "obj_operator_binary", "obj_operator_binary", "obj_operator_binary", "obj_operator_binary", "obj_operator_binary", "obj_operator_binary", "obj_operator_binary", "obj_operator_binary", "obj_operator_binary", "obj_operator_binary", "obj_operator_binary", "obj_operator_binary", "obj_operator_binary", "obj_operator_binary", "obj_operator_unary", "obj_operator_unary", "obj_operator_unary", "obj_operator_unary", "obj_operator_unary", "obj_operator_unary", "obj_operator_unary", "obj_operator_unary", "obj_operator_body", "obj_operator_body", "obj_operator_binary_declarator", "obj_operator_unary_declarator", "obj_operator_conv_declarator", "obj_operator_conv_declarator", "obj_operator_declarator", "obj_operator_declarator", "obj_operator_declarator", "obj_operator_declaration", "obj_ctor_modifier", "obj_ctor_modifier", "obj_ctor_modifier", "obj_ctor_modifier", "obj_ctor_modifier", "obj_ctor_modifiers", "obj_ctor_body", "obj_ctor_body", "obj_ctor_initializer", "obj_ctor_initializer", "obj_ctor_initializer", "obj_ctor_initializer", "obj_ctor_declarator", "obj_ctor_declarator", "obj_ctor_declaration", "obj_static_ctor_modifiers", "obj_static_ctor_modifiers", "obj_static_ctor_modifiers", "obj_static_ctor_body", "obj_static_ctor_body", "obj_static_ctor_declaration", "obj_destructor_body", "obj_destructor_body", "obj_destructor_declaration", "obj_destructor_declaration", "obj_type_declaration", "obj_type_declaration", "obj_type_declaration", "obj_type_modifier", "obj_type_modifier", "obj_type_modifier", "obj_type_modifier", "obj_type_modifier", "obj_type_modifiers", "class_modifiers", "class_modifiers", "class_modifiers", "class_base_list", "class_base", "class_base", "class_member_declaration", "class_member_declaration", "class_member_declaration", "class_member_declaration", "class_member_declaration", "class_member_declaration", "class_member_declaration", "class_member_declaration", "class_member_declaration", "class_member_declaration", "class_member_declaration", "class_members", "class_body", "class_declaration", "class_declaration", "struct_base_list", "struct_base", "struct_base", "struct_member_declaration", "struct_member_declaration", "struct_member_declaration", "struct_member_declaration", "struct_member_declaration", "struct_member_declaration", "struct_member_declaration", "struct_member_declaration", "struct_member_declaration", "struct_member_declaration", "struct_members", "struct_body", "struct_declaration", "struct_declaration", "interface_accessors", "interface_accessors", "interface_accessors", "interface_accessors", "interface_indexer_declaration", "interface_indexer_declaration", "interface_indexer_declaration", "interface_indexer_declaration", "interface_event_declaration", "interface_event_declaration", "interface_property_declaration", "interface_property_declaration", "interface_method_declaration", "interface_method_declaration", "interface_method_declaration", "interface_method_declaration", "interface_member_declaration", "interface_member_declaration", "interface_member_declaration", "interface_member_declaration", "interface_body", "interface_base_list", "interface_base", "interface_base", "interface_declaration", "interface_declaration", "enum_member_declaration", "enum_member_declaration_list", "enum_member_declaration_list", "enum_body", "enum_base", "enum_base", "enum_declaration", "enum_declaration", "delegate_declaration", "delegate_declaration", "attribute_argument_positional", "attribute_argument_named", "attribute_argument_positional_list", "attribute_argument_positional_list", "attribute_argument_named_list", "attribute_argument_named_list", "attribute_argument_list", "attribute_argument_list", "attribute_argument_list", "attribute_argument_list", "attribute_arguments", "attribute", "attribute", "attribute_list", "attribute_target", "attribute_target", "attribute_target", "attribute_target", "attribute_target", "attribute_target", "attribute_target", "attribute_section", "attribute_section", "attributes", "global_attribute_target", "global_attribute_target", "global_attribute_section", "global_attributes", "directive_using_namespace", "directive_using_alias", "directive", "directive", "directives", "namespace_member_declaration", "namespace_member_declaration", "namespace_members", "namespace_body", "namespace_declaration", "namespace_declaration", "compilation_unit", "_m222", "_m222", "_m238", "_m238", "_m242", "_m242", "_m340", "_m340", "_m343", "_m343", "_m350", "_m350", "_m367", "_m367", "_m369", "_m369", "_m412", "_m412", "_m422", "_m422", "_m435", "_m435", "_m438", "_m438", "_m449", "_m449", "_m462", "_m462", "_m477", "_m477", "_m491", "_m491", "_m507", "_m507", "_m520", "_m520", "_m563", "_m563", "_m589", "_m589", "_m593", "_m593", "_m595", "_m595", "_m601", "_m601", "_m603", "_m603", "_m633", "_m633", "_m636", "_m636", "_m642", "_m642", "_m659", "_m659", "_m670", "_m670", "_m676", "_m676", "_m682", "_m682", "_m683", "_m683", "_Axiom_" };
        private static ushort[] p_RulesParserLength = { 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x4, 0x3, 0x5, 0x4, 0x2, 0x2, 0x3, 0x3, 0x4, 0x3, 0x4, 0x4, 0x4, 0x7, 0x6, 0x6, 0x5, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x4, 0x1, 0x2, 0x2, 0x2, 0x2, 0x1, 0x1, 0x1, 0x1, 0x3, 0x3, 0x3, 0x1, 0x3, 0x3, 0x1, 0x3, 0x3, 0x1, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x1, 0x3, 0x3, 0x1, 0x3, 0x1, 0x3, 0x1, 0x3, 0x1, 0x3, 0x1, 0x3, 0x1, 0x5, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x1, 0x1, 0x1, 0x3, 0x1, 0x3, 0x1, 0x2, 0x2, 0x1, 0x1, 0x4, 0x3, 0x4, 0x1, 0x3, 0x3, 0x1, 0x1, 0x3, 0x1, 0x1, 0x2, 0x0, 0x1, 0x3, 0x2, 0x1, 0x3, 0x3, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x7, 0x7, 0x7, 0x7, 0x5, 0x7, 0x7, 0x3, 0x2, 0x3, 0x3, 0x5, 0x7, 0x5, 0x2, 0x1, 0x1, 0x1, 0x9, 0x8, 0x8, 0x7, 0x8, 0x7, 0x7, 0x6, 0x8, 0x2, 0x2, 0x3, 0x4, 0x3, 0x3, 0x2, 0x3, 0x2, 0x2, 0x6, 0x5, 0x2, 0x4, 0x3, 0x3, 0x2, 0x2, 0x1, 0x1, 0x3, 0x2, 0x2, 0x5, 0x2, 0x1, 0x5, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x3, 0x2, 0x1, 0x1, 0x3, 0x2, 0x3, 0x2, 0x3, 0x2, 0x3, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x2, 0x6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x5, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x7, 0x6, 0x1, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x7, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x6, 0x8, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x5, 0x4, 0x7, 0x6, 0x6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x10, 0x7, 0x7, 0x7, 0x1, 0x1, 0x1, 0x4, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x5, 0x4, 0x5, 0x4, 0x5, 0x4, 0x4, 0x2, 0x1, 0x2, 0x1, 0x1, 0x6, 0x1, 0x1, 0x7, 0x6, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x1, 0x2, 0x2, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x7, 0x6, 0x2, 0x2, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x7, 0x6, 0x6, 0x3, 0x6, 0x3, 0x10, 0x9, 0x9, 0x8, 0x6, 0x5, 0x7, 0x6, 0x8, 0x7, 0x7, 0x6, 0x1, 0x1, 0x1, 0x1, 0x3, 0x2, 0x2, 0x0, 0x7, 0x6, 0x4, 0x2, 0x0, 0x3, 0x2, 0x0, 0x7, 0x6, 0x9, 0x8, 0x1, 0x3, 0x1, 0x3, 0x1, 0x3, 0x1, 0x0, 0x3, 0x1, 0x3, 0x2, 0x1, 0x2, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x5, 0x3, 0x1, 0x1, 0x1, 0x5, 0x1, 0x3, 0x5, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4, 0x4, 0x3, 0x1, 0x3, 0x0, 0x2, 0x0, 0x2, 0x0, 0x3, 0x0, 0x3, 0x0, 0x3, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x3, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x3, 0x0, 0x2, 0x0, 0x3, 0x0, 0x2, 0x0, 0x2, 0x0, 0x3, 0x0, 0x3, 0x0, 0x3, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2 };

        private static ushort[] p_StateExpectedIDs_0 = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_0 = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_0 = { "[_Axiom_ -> . compilation_unit $]", "[compilation_unit -> . expression]", "[expression -> . exp_op12_conditional]", "[expression -> . exp_op13_assigment]", "[exp_op12_conditional -> . exp_op11]", "[exp_op12_conditional -> . exp_op11 ? expression : expression]", "[exp_op13_assigment -> . exp_op1 = expression]", "[exp_op13_assigment -> . exp_op1 += expression]", "[exp_op13_assigment -> . exp_op1 -= expression]", "[exp_op13_assigment -> . exp_op1 *= expression]", "[exp_op13_assigment -> . exp_op1 /= expression]", "[exp_op13_assigment -> . exp_op1 %= expression]", "[exp_op13_assigment -> . exp_op1 &= expression]", "[exp_op13_assigment -> . exp_op1 |= expression]", "[exp_op13_assigment -> . exp_op1 ^= expression]", "[exp_op13_assigment -> . exp_op1 <<= expression]", "[exp_op13_assigment -> . exp_op1 >>= expression]", "[exp_op11 -> . exp_op10]", "[exp_op11 -> . exp_op11 || exp_op10]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op10 -> . exp_op9]", "[exp_op10 -> . exp_op10 && exp_op9]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op9 -> . exp_op8]", "[exp_op9 -> . exp_op9 | exp_op8]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_op8 -> . exp_op7]", "[exp_op8 -> . exp_op8 ^ exp_op7]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[exp_op7 -> . exp_op6]", "[exp_op7 -> . exp_op7 & exp_op6]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]", "[exp_op6 -> . exp_op5]", "[exp_op6 -> . exp_op6 == exp_op5]", "[exp_op6 -> . exp_op6 != exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]" };
        private static ushort[][] p_StateShiftsOnTerminal_0 = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_0 = { new ushort[2] { 0xDC, 0x1 }, new ushort[2] { 0x3D, 0x2 }, new ushort[2] { 0x3B, 0x3 }, new ushort[2] { 0x3C, 0x4 }, new ushort[2] { 0x3A, 0x5 }, new ushort[2] { 0x30, 0x6 }, new ushort[2] { 0x39, 0x7 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x38, 0x10 }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x37, 0x16 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x36, 0x21 }, new ushort[2] { 0x1E, 0x2E }, new ushort[2] { 0x35, 0x32 }, new ushort[2] { 0x34, 0x42 }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 } };
        private static ushort[][] p_StateReducsOnTerminal_0 = { };

        private static ushort[] p_StateExpectedIDs_1 = { 0x2 };
        private static string[] p_StateExpectedNames_1 = { "$" };
        private static string[] p_StateItems_1 = { "[_Axiom_ -> compilation_unit . $]" };
        private static ushort[][] p_StateShiftsOnTerminal_1 = { new ushort[2] { 0x2, 0x46 } };
        private static ushort[][] p_StateShiftsOnVariable_1 = { };
        private static ushort[][] p_StateReducsOnTerminal_1 = { };

        private static ushort[] p_StateExpectedIDs_2 = { 0x2 };
        private static string[] p_StateExpectedNames_2 = { "$" };
        private static string[] p_StateItems_2 = { "[compilation_unit -> expression . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_2 = { };
        private static ushort[][] p_StateShiftsOnVariable_2 = { };
        private static ushort[][] p_StateReducsOnTerminal_2 = { new ushort[2] { 0x2, 0x21D } };

        private static ushort[] p_StateExpectedIDs_3 = { 0x2, 0x106, 0x13C, 0xF0, 0xF1, 0x152 };
        private static string[] p_StateExpectedNames_3 = { "$", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]" };
        private static string[] p_StateItems_3 = { "[expression -> exp_op12_conditional . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_3 = { };
        private static ushort[][] p_StateShiftsOnVariable_3 = { };
        private static ushort[][] p_StateReducsOnTerminal_3 = { new ushort[2] { 0x2, 0x8B }, new ushort[2] { 0x106, 0x8B }, new ushort[2] { 0x13C, 0x8B }, new ushort[2] { 0xF0, 0x8B }, new ushort[2] { 0xF1, 0x8B }, new ushort[2] { 0x152, 0x8B } };

        private static ushort[] p_StateExpectedIDs_4 = { 0x2, 0x106, 0x13C, 0xF0, 0xF1, 0x152 };
        private static string[] p_StateExpectedNames_4 = { "$", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]" };
        private static string[] p_StateItems_4 = { "[expression -> exp_op13_assigment . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_4 = { };
        private static ushort[][] p_StateShiftsOnVariable_4 = { };
        private static ushort[][] p_StateReducsOnTerminal_4 = { new ushort[2] { 0x2, 0x8C }, new ushort[2] { 0x106, 0x8C }, new ushort[2] { 0x13C, 0x8C }, new ushort[2] { 0xF0, 0x8C }, new ushort[2] { 0xF1, 0x8C }, new ushort[2] { 0x152, 0x8C } };

        private static ushort[] p_StateExpectedIDs_5 = { 0x2, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13B, 0x13A };
        private static string[] p_StateExpectedNames_5 = { "$", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[?]", "_T[||]" };
        private static string[] p_StateItems_5 = { "[exp_op12_conditional -> exp_op11 . ]", "[exp_op12_conditional -> exp_op11 . ? expression : expression]", "[exp_op11 -> exp_op11 . || exp_op10]" };
        private static ushort[][] p_StateShiftsOnTerminal_5 = { new ushort[2] { 0x13B, 0x47 }, new ushort[2] { 0x13A, 0x48 } };
        private static ushort[][] p_StateShiftsOnVariable_5 = { };
        private static ushort[][] p_StateReducsOnTerminal_5 = { new ushort[2] { 0x2, 0x7E }, new ushort[2] { 0x106, 0x7E }, new ushort[2] { 0x13C, 0x7E }, new ushort[2] { 0xF0, 0x7E }, new ushort[2] { 0xF1, 0x7E }, new ushort[2] { 0x152, 0x7E } };

        private static ushort[] p_StateExpectedIDs_6 = { 0x2, 0x13B, 0x127, 0x128, 0x129, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147 };
        private static string[] p_StateExpectedNames_6 = { "$", "_T[?]", "_T[*]", "_T[/]", "_T[%]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]" };
        private static string[] p_StateItems_6 = { "[exp_op13_assigment -> exp_op1 . = expression]", "[exp_op13_assigment -> exp_op1 . += expression]", "[exp_op13_assigment -> exp_op1 . -= expression]", "[exp_op13_assigment -> exp_op1 . *= expression]", "[exp_op13_assigment -> exp_op1 . /= expression]", "[exp_op13_assigment -> exp_op1 . %= expression]", "[exp_op13_assigment -> exp_op1 . &= expression]", "[exp_op13_assigment -> exp_op1 . |= expression]", "[exp_op13_assigment -> exp_op1 . ^= expression]", "[exp_op13_assigment -> exp_op1 . <<= expression]", "[exp_op13_assigment -> exp_op1 . >>= expression]", "[exp_op2 -> exp_op1 . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_6 = { new ushort[2] { 0x13D, 0x49 }, new ushort[2] { 0x13E, 0x4A }, new ushort[2] { 0x13F, 0x4B }, new ushort[2] { 0x140, 0x4C }, new ushort[2] { 0x141, 0x4D }, new ushort[2] { 0x142, 0x4E }, new ushort[2] { 0x143, 0x4F }, new ushort[2] { 0x144, 0x50 }, new ushort[2] { 0x145, 0x51 }, new ushort[2] { 0x146, 0x52 }, new ushort[2] { 0x147, 0x53 } };
        private static ushort[][] p_StateShiftsOnVariable_6 = { };
        private static ushort[][] p_StateReducsOnTerminal_6 = { new ushort[2] { 0x2, 0x60 }, new ushort[2] { 0x13B, 0x60 }, new ushort[2] { 0x127, 0x60 }, new ushort[2] { 0x128, 0x60 }, new ushort[2] { 0x129, 0x60 }, new ushort[2] { 0x106, 0x60 }, new ushort[2] { 0x13C, 0x60 }, new ushort[2] { 0xF0, 0x60 }, new ushort[2] { 0xF1, 0x60 }, new ushort[2] { 0x152, 0x60 } };

        private static ushort[] p_StateExpectedIDs_7 = { 0x2, 0x13B, 0x13A, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x139 };
        private static string[] p_StateExpectedNames_7 = { "$", "_T[?]", "_T[||]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[&&]" };
        private static string[] p_StateItems_7 = { "[exp_op11 -> exp_op10 . ]", "[exp_op10 -> exp_op10 . && exp_op9]" };
        private static ushort[][] p_StateShiftsOnTerminal_7 = { new ushort[2] { 0x139, 0x54 } };
        private static ushort[][] p_StateShiftsOnVariable_7 = { };
        private static ushort[][] p_StateReducsOnTerminal_7 = { new ushort[2] { 0x2, 0x7C }, new ushort[2] { 0x13B, 0x7C }, new ushort[2] { 0x13A, 0x7C }, new ushort[2] { 0x106, 0x7C }, new ushort[2] { 0x13C, 0x7C }, new ushort[2] { 0xF0, 0x7C }, new ushort[2] { 0xF1, 0x7C }, new ushort[2] { 0x152, 0x7C } };

        private static ushort[] p_StateExpectedIDs_8 = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129, 0x105, 0x10C, 0x10D, 0xDD };
        private static string[] p_StateExpectedNames_8 = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]", "_T[(]", "_T[++]", "_T[--]", "_T[.]" };
        private static string[] p_StateItems_8 = { "[exp_op1 -> exp_op0 . ]", "[exp_op0_invoke -> exp_op0 . ( exp_argument_list )]", "[exp_op0_invoke -> exp_op0 . ( )]", "[exp_op0_post_increment -> exp_op0 . ++]", "[exp_op0_post_decrement -> exp_op0 . --]", "[exp_op0_member_access -> exp_op0 . . IDENTIFIER]" };
        private static ushort[][] p_StateShiftsOnTerminal_8 = { new ushort[2] { 0x105, 0x55 }, new ushort[2] { 0x10C, 0x56 }, new ushort[2] { 0x10D, 0x57 }, new ushort[2] { 0xDD, 0x58 } };
        private static ushort[][] p_StateShiftsOnVariable_8 = { };
        private static ushort[][] p_StateReducsOnTerminal_8 = { new ushort[2] { 0x13D, 0x58 }, new ushort[2] { 0x13E, 0x58 }, new ushort[2] { 0x13F, 0x58 }, new ushort[2] { 0x140, 0x58 }, new ushort[2] { 0x141, 0x58 }, new ushort[2] { 0x142, 0x58 }, new ushort[2] { 0x143, 0x58 }, new ushort[2] { 0x144, 0x58 }, new ushort[2] { 0x145, 0x58 }, new ushort[2] { 0x146, 0x58 }, new ushort[2] { 0x147, 0x58 }, new ushort[2] { 0x2, 0x58 }, new ushort[2] { 0x13B, 0x58 }, new ushort[2] { 0x106, 0x58 }, new ushort[2] { 0x13C, 0x58 }, new ushort[2] { 0xF0, 0x58 }, new ushort[2] { 0xF1, 0x58 }, new ushort[2] { 0x152, 0x58 }, new ushort[2] { 0x13A, 0x58 }, new ushort[2] { 0x139, 0x58 }, new ushort[2] { 0x138, 0x58 }, new ushort[2] { 0x137, 0x58 }, new ushort[2] { 0x136, 0x58 }, new ushort[2] { 0x134, 0x58 }, new ushort[2] { 0x135, 0x58 }, new ushort[2] { 0x12E, 0x58 }, new ushort[2] { 0x12F, 0x58 }, new ushort[2] { 0x130, 0x58 }, new ushort[2] { 0x131, 0x58 }, new ushort[2] { 0x132, 0x58 }, new ushort[2] { 0x133, 0x58 }, new ushort[2] { 0x12C, 0x58 }, new ushort[2] { 0x12D, 0x58 }, new ushort[2] { 0x123, 0x58 }, new ushort[2] { 0x124, 0x58 }, new ushort[2] { 0x127, 0x58 }, new ushort[2] { 0x128, 0x58 }, new ushort[2] { 0x129, 0x58 } };

        private static ushort[] p_StateExpectedIDs_9 = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_9 = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_9 = { "[exp_op1 -> + . exp_op1]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]" };
        private static ushort[][] p_StateShiftsOnTerminal_9 = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_9 = { new ushort[2] { 0x30, 0x59 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x1E, 0x2E } };
        private static ushort[][] p_StateReducsOnTerminal_9 = { };

        private static ushort[] p_StateExpectedIDs_A = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_A = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_A = { "[exp_op1 -> - . exp_op1]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]" };
        private static ushort[][] p_StateShiftsOnTerminal_A = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_A = { new ushort[2] { 0x30, 0x5A }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x1E, 0x2E } };
        private static ushort[][] p_StateReducsOnTerminal_A = { };

        private static ushort[] p_StateExpectedIDs_B = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_B = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_B = { "[exp_op1 -> ! . exp_op1]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]" };
        private static ushort[][] p_StateShiftsOnTerminal_B = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_B = { new ushort[2] { 0x30, 0x5B }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x1E, 0x2E } };
        private static ushort[][] p_StateReducsOnTerminal_B = { };

        private static ushort[] p_StateExpectedIDs_C = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_C = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_C = { "[exp_op1 -> ~ . exp_op1]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]" };
        private static ushort[][] p_StateShiftsOnTerminal_C = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_C = { new ushort[2] { 0x30, 0x5C }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x1E, 0x2E } };
        private static ushort[][] p_StateReducsOnTerminal_C = { };

        private static ushort[] p_StateExpectedIDs_D = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_D = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_D = { "[exp_op1 -> exp_op1_pre_increment . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_D = { };
        private static ushort[][] p_StateShiftsOnVariable_D = { };
        private static ushort[][] p_StateReducsOnTerminal_D = { new ushort[2] { 0x13D, 0x5D }, new ushort[2] { 0x13E, 0x5D }, new ushort[2] { 0x13F, 0x5D }, new ushort[2] { 0x140, 0x5D }, new ushort[2] { 0x141, 0x5D }, new ushort[2] { 0x142, 0x5D }, new ushort[2] { 0x143, 0x5D }, new ushort[2] { 0x144, 0x5D }, new ushort[2] { 0x145, 0x5D }, new ushort[2] { 0x146, 0x5D }, new ushort[2] { 0x147, 0x5D }, new ushort[2] { 0x2, 0x5D }, new ushort[2] { 0x13B, 0x5D }, new ushort[2] { 0x106, 0x5D }, new ushort[2] { 0x13C, 0x5D }, new ushort[2] { 0xF0, 0x5D }, new ushort[2] { 0xF1, 0x5D }, new ushort[2] { 0x152, 0x5D }, new ushort[2] { 0x13A, 0x5D }, new ushort[2] { 0x139, 0x5D }, new ushort[2] { 0x138, 0x5D }, new ushort[2] { 0x137, 0x5D }, new ushort[2] { 0x136, 0x5D }, new ushort[2] { 0x134, 0x5D }, new ushort[2] { 0x135, 0x5D }, new ushort[2] { 0x12E, 0x5D }, new ushort[2] { 0x12F, 0x5D }, new ushort[2] { 0x130, 0x5D }, new ushort[2] { 0x131, 0x5D }, new ushort[2] { 0x132, 0x5D }, new ushort[2] { 0x133, 0x5D }, new ushort[2] { 0x12C, 0x5D }, new ushort[2] { 0x12D, 0x5D }, new ushort[2] { 0x123, 0x5D }, new ushort[2] { 0x124, 0x5D }, new ushort[2] { 0x127, 0x5D }, new ushort[2] { 0x128, 0x5D }, new ushort[2] { 0x129, 0x5D } };

        private static ushort[] p_StateExpectedIDs_E = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_E = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_E = { "[exp_op1 -> exp_op1_pre_decrement . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_E = { };
        private static ushort[][] p_StateShiftsOnVariable_E = { };
        private static ushort[][] p_StateReducsOnTerminal_E = { new ushort[2] { 0x13D, 0x5E }, new ushort[2] { 0x13E, 0x5E }, new ushort[2] { 0x13F, 0x5E }, new ushort[2] { 0x140, 0x5E }, new ushort[2] { 0x141, 0x5E }, new ushort[2] { 0x142, 0x5E }, new ushort[2] { 0x143, 0x5E }, new ushort[2] { 0x144, 0x5E }, new ushort[2] { 0x145, 0x5E }, new ushort[2] { 0x146, 0x5E }, new ushort[2] { 0x147, 0x5E }, new ushort[2] { 0x2, 0x5E }, new ushort[2] { 0x13B, 0x5E }, new ushort[2] { 0x106, 0x5E }, new ushort[2] { 0x13C, 0x5E }, new ushort[2] { 0xF0, 0x5E }, new ushort[2] { 0xF1, 0x5E }, new ushort[2] { 0x152, 0x5E }, new ushort[2] { 0x13A, 0x5E }, new ushort[2] { 0x139, 0x5E }, new ushort[2] { 0x138, 0x5E }, new ushort[2] { 0x137, 0x5E }, new ushort[2] { 0x136, 0x5E }, new ushort[2] { 0x134, 0x5E }, new ushort[2] { 0x135, 0x5E }, new ushort[2] { 0x12E, 0x5E }, new ushort[2] { 0x12F, 0x5E }, new ushort[2] { 0x130, 0x5E }, new ushort[2] { 0x131, 0x5E }, new ushort[2] { 0x132, 0x5E }, new ushort[2] { 0x133, 0x5E }, new ushort[2] { 0x12C, 0x5E }, new ushort[2] { 0x12D, 0x5E }, new ushort[2] { 0x123, 0x5E }, new ushort[2] { 0x124, 0x5E }, new ushort[2] { 0x127, 0x5E }, new ushort[2] { 0x128, 0x5E }, new ushort[2] { 0x129, 0x5E } };

        private static ushort[] p_StateExpectedIDs_F = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_F = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_F = { "[exp_op1 -> exp_op1_cast . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_F = { };
        private static ushort[][] p_StateShiftsOnVariable_F = { };
        private static ushort[][] p_StateReducsOnTerminal_F = { new ushort[2] { 0x13D, 0x5F }, new ushort[2] { 0x13E, 0x5F }, new ushort[2] { 0x13F, 0x5F }, new ushort[2] { 0x140, 0x5F }, new ushort[2] { 0x141, 0x5F }, new ushort[2] { 0x142, 0x5F }, new ushort[2] { 0x143, 0x5F }, new ushort[2] { 0x144, 0x5F }, new ushort[2] { 0x145, 0x5F }, new ushort[2] { 0x146, 0x5F }, new ushort[2] { 0x147, 0x5F }, new ushort[2] { 0x2, 0x5F }, new ushort[2] { 0x13B, 0x5F }, new ushort[2] { 0x106, 0x5F }, new ushort[2] { 0x13C, 0x5F }, new ushort[2] { 0xF0, 0x5F }, new ushort[2] { 0xF1, 0x5F }, new ushort[2] { 0x152, 0x5F }, new ushort[2] { 0x13A, 0x5F }, new ushort[2] { 0x139, 0x5F }, new ushort[2] { 0x138, 0x5F }, new ushort[2] { 0x137, 0x5F }, new ushort[2] { 0x136, 0x5F }, new ushort[2] { 0x134, 0x5F }, new ushort[2] { 0x135, 0x5F }, new ushort[2] { 0x12E, 0x5F }, new ushort[2] { 0x12F, 0x5F }, new ushort[2] { 0x130, 0x5F }, new ushort[2] { 0x131, 0x5F }, new ushort[2] { 0x132, 0x5F }, new ushort[2] { 0x133, 0x5F }, new ushort[2] { 0x12C, 0x5F }, new ushort[2] { 0x12D, 0x5F }, new ushort[2] { 0x123, 0x5F }, new ushort[2] { 0x124, 0x5F }, new ushort[2] { 0x127, 0x5F }, new ushort[2] { 0x128, 0x5F }, new ushort[2] { 0x129, 0x5F } };

        private static ushort[] p_StateExpectedIDs_10 = { 0x2, 0x13B, 0x139, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x138 };
        private static string[] p_StateExpectedNames_10 = { "$", "_T[?]", "_T[&&]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[|]" };
        private static string[] p_StateItems_10 = { "[exp_op10 -> exp_op9 . ]", "[exp_op9 -> exp_op9 . | exp_op8]" };
        private static ushort[][] p_StateShiftsOnTerminal_10 = { new ushort[2] { 0x138, 0x5D } };
        private static ushort[][] p_StateShiftsOnVariable_10 = { };
        private static ushort[][] p_StateReducsOnTerminal_10 = { new ushort[2] { 0x2, 0x7A }, new ushort[2] { 0x13B, 0x7A }, new ushort[2] { 0x139, 0x7A }, new ushort[2] { 0x106, 0x7A }, new ushort[2] { 0x13C, 0x7A }, new ushort[2] { 0xF0, 0x7A }, new ushort[2] { 0xF1, 0x7A }, new ushort[2] { 0x152, 0x7A }, new ushort[2] { 0x13A, 0x7A } };

        private static ushort[] p_StateExpectedIDs_11 = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x105, 0x10C, 0x10D, 0xDD, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_11 = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "_T[(]", "_T[++]", "_T[--]", "_T[.]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_11 = { "[exp_op0 -> exp_op0_no_array . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_11 = { };
        private static ushort[][] p_StateShiftsOnVariable_11 = { };
        private static ushort[][] p_StateReducsOnTerminal_11 = { new ushort[2] { 0x13D, 0x53 }, new ushort[2] { 0x13E, 0x53 }, new ushort[2] { 0x13F, 0x53 }, new ushort[2] { 0x140, 0x53 }, new ushort[2] { 0x141, 0x53 }, new ushort[2] { 0x142, 0x53 }, new ushort[2] { 0x143, 0x53 }, new ushort[2] { 0x144, 0x53 }, new ushort[2] { 0x145, 0x53 }, new ushort[2] { 0x146, 0x53 }, new ushort[2] { 0x147, 0x53 }, new ushort[2] { 0x105, 0x53 }, new ushort[2] { 0x10C, 0x53 }, new ushort[2] { 0x10D, 0x53 }, new ushort[2] { 0xDD, 0x53 }, new ushort[2] { 0x2, 0x53 }, new ushort[2] { 0x13B, 0x53 }, new ushort[2] { 0x106, 0x53 }, new ushort[2] { 0x13C, 0x53 }, new ushort[2] { 0xF0, 0x53 }, new ushort[2] { 0xF1, 0x53 }, new ushort[2] { 0x152, 0x53 }, new ushort[2] { 0x13A, 0x53 }, new ushort[2] { 0x139, 0x53 }, new ushort[2] { 0x138, 0x53 }, new ushort[2] { 0x137, 0x53 }, new ushort[2] { 0x136, 0x53 }, new ushort[2] { 0x134, 0x53 }, new ushort[2] { 0x135, 0x53 }, new ushort[2] { 0x12E, 0x53 }, new ushort[2] { 0x12F, 0x53 }, new ushort[2] { 0x130, 0x53 }, new ushort[2] { 0x131, 0x53 }, new ushort[2] { 0x132, 0x53 }, new ushort[2] { 0x133, 0x53 }, new ushort[2] { 0x12C, 0x53 }, new ushort[2] { 0x12D, 0x53 }, new ushort[2] { 0x123, 0x53 }, new ushort[2] { 0x124, 0x53 }, new ushort[2] { 0x127, 0x53 }, new ushort[2] { 0x128, 0x53 }, new ushort[2] { 0x129, 0x53 } };

        private static ushort[] p_StateExpectedIDs_12 = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x105, 0x10C, 0x10D, 0xDD, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_12 = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "_T[(]", "_T[++]", "_T[--]", "_T[.]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_12 = { "[exp_op0 -> exp_op0_array_creation . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_12 = { };
        private static ushort[][] p_StateShiftsOnVariable_12 = { };
        private static ushort[][] p_StateReducsOnTerminal_12 = { new ushort[2] { 0x13D, 0x54 }, new ushort[2] { 0x13E, 0x54 }, new ushort[2] { 0x13F, 0x54 }, new ushort[2] { 0x140, 0x54 }, new ushort[2] { 0x141, 0x54 }, new ushort[2] { 0x142, 0x54 }, new ushort[2] { 0x143, 0x54 }, new ushort[2] { 0x144, 0x54 }, new ushort[2] { 0x145, 0x54 }, new ushort[2] { 0x146, 0x54 }, new ushort[2] { 0x147, 0x54 }, new ushort[2] { 0x105, 0x54 }, new ushort[2] { 0x10C, 0x54 }, new ushort[2] { 0x10D, 0x54 }, new ushort[2] { 0xDD, 0x54 }, new ushort[2] { 0x2, 0x54 }, new ushort[2] { 0x13B, 0x54 }, new ushort[2] { 0x106, 0x54 }, new ushort[2] { 0x13C, 0x54 }, new ushort[2] { 0xF0, 0x54 }, new ushort[2] { 0xF1, 0x54 }, new ushort[2] { 0x152, 0x54 }, new ushort[2] { 0x13A, 0x54 }, new ushort[2] { 0x139, 0x54 }, new ushort[2] { 0x138, 0x54 }, new ushort[2] { 0x137, 0x54 }, new ushort[2] { 0x136, 0x54 }, new ushort[2] { 0x134, 0x54 }, new ushort[2] { 0x135, 0x54 }, new ushort[2] { 0x12E, 0x54 }, new ushort[2] { 0x12F, 0x54 }, new ushort[2] { 0x130, 0x54 }, new ushort[2] { 0x131, 0x54 }, new ushort[2] { 0x132, 0x54 }, new ushort[2] { 0x133, 0x54 }, new ushort[2] { 0x12C, 0x54 }, new ushort[2] { 0x12D, 0x54 }, new ushort[2] { 0x123, 0x54 }, new ushort[2] { 0x124, 0x54 }, new ushort[2] { 0x127, 0x54 }, new ushort[2] { 0x128, 0x54 }, new ushort[2] { 0x129, 0x54 } };

        private static ushort[] p_StateExpectedIDs_13 = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_13 = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_13 = { "[exp_op1_pre_increment -> ++ . exp_op1]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]" };
        private static ushort[][] p_StateShiftsOnTerminal_13 = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_13 = { new ushort[2] { 0x30, 0x5E }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x1E, 0x2E } };
        private static ushort[][] p_StateReducsOnTerminal_13 = { };

        private static ushort[] p_StateExpectedIDs_14 = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_14 = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_14 = { "[exp_op1_pre_decrement -> -- . exp_op1]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]" };
        private static ushort[][] p_StateShiftsOnTerminal_14 = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_14 = { new ushort[2] { 0x30, 0x5F }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x1E, 0x2E } };
        private static ushort[][] p_StateReducsOnTerminal_14 = { };

        private static ushort[] p_StateExpectedIDs_15 = { 0xDF, 0xE0, 0xE1, 0xE2, 0x123, 0x124, 0x125, 0x126, 0x13, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x103, 0x104, 0x112, 0x115, 0x118 };
        private static string[] p_StateExpectedNames_15 = { "_T[object]", "_T[string]", "_T[bool]", "_T[decimal]", "_T[+]", "_T[-]", "_T[!]", "_T[~]", "IDENTIFIER", "_T[sbyte]", "_T[byte]", "_T[short]", "_T[ushort]", "_T[int]", "_T[uint]", "_T[long]", "_T[ulong]", "_T[char]", "_T[float]", "_T[double]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]" };
        private static string[] p_StateItems_15 = { "[exp_op1_cast -> ( . type ) exp_op1]", "[exp_atom -> ( . expression )]", "[type -> . type_non_array]", "[type -> . type_array]", "[expression -> . exp_op12_conditional]", "[expression -> . exp_op13_assigment]", "[type_non_array -> . type_object]", "[type_non_array -> . type_simple]", "[type_array -> . type_non_array type_array_rank _m238]", "[exp_op12_conditional -> . exp_op11]", "[exp_op12_conditional -> . exp_op11 ? expression : expression]", "[exp_op13_assigment -> . exp_op1 = expression]", "[exp_op13_assigment -> . exp_op1 += expression]", "[exp_op13_assigment -> . exp_op1 -= expression]", "[exp_op13_assigment -> . exp_op1 *= expression]", "[exp_op13_assigment -> . exp_op1 /= expression]", "[exp_op13_assigment -> . exp_op1 %= expression]", "[exp_op13_assigment -> . exp_op1 &= expression]", "[exp_op13_assigment -> . exp_op1 |= expression]", "[exp_op13_assigment -> . exp_op1 ^= expression]", "[exp_op13_assigment -> . exp_op1 <<= expression]", "[exp_op13_assigment -> . exp_op1 >>= expression]", "[type_object -> . object]", "[type_object -> . string]", "[type_object -> . qualified_name]", "[type_simple -> . bool]", "[type_simple -> . decimal]", "[type_simple -> . type_simple_integral]", "[type_simple -> . type_simple_float]", "[exp_op11 -> . exp_op10]", "[exp_op11 -> . exp_op11 || exp_op10]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[qualified_name -> . IDENTIFIER _m222]", "[type_simple_integral -> . sbyte]", "[type_simple_integral -> . byte]", "[type_simple_integral -> . short]", "[type_simple_integral -> . ushort]", "[type_simple_integral -> . int]", "[type_simple_integral -> . uint]", "[type_simple_integral -> . long]", "[type_simple_integral -> . ulong]", "[type_simple_integral -> . char]", "[type_simple_float -> . float]", "[type_simple_float -> . double]", "[exp_op10 -> . exp_op9]", "[exp_op10 -> . exp_op10 && exp_op9]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op9 -> . exp_op8]", "[exp_op9 -> . exp_op9 | exp_op8]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_op8 -> . exp_op7]", "[exp_op8 -> . exp_op8 ^ exp_op7]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[exp_op7 -> . exp_op6]", "[exp_op7 -> . exp_op7 & exp_op6]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]", "[exp_op6 -> . exp_op5]", "[exp_op6 -> . exp_op6 == exp_op5]", "[exp_op6 -> . exp_op6 != exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]" };
        private static ushort[][] p_StateShiftsOnTerminal_15 = { new ushort[2] { 0xDF, 0x66 }, new ushort[2] { 0xE0, 0x67 }, new ushort[2] { 0xE1, 0x69 }, new ushort[2] { 0xE2, 0x6A }, new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x13, 0x6D }, new ushort[2] { 0xE3, 0x6E }, new ushort[2] { 0xE4, 0x6F }, new ushort[2] { 0xE5, 0x70 }, new ushort[2] { 0xE6, 0x71 }, new ushort[2] { 0xE7, 0x72 }, new ushort[2] { 0xE8, 0x73 }, new ushort[2] { 0xE9, 0x74 }, new ushort[2] { 0xEA, 0x75 }, new ushort[2] { 0xEB, 0x76 }, new ushort[2] { 0xEC, 0x77 }, new ushort[2] { 0xED, 0x78 }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 } };
        private static ushort[][] p_StateShiftsOnVariable_15 = { new ushort[2] { 0x15, 0x60 }, new ushort[2] { 0x3D, 0x61 }, new ushort[2] { 0x16, 0x62 }, new ushort[2] { 0x1B, 0x63 }, new ushort[2] { 0x3B, 0x3 }, new ushort[2] { 0x3C, 0x4 }, new ushort[2] { 0x17, 0x64 }, new ushort[2] { 0x18, 0x65 }, new ushort[2] { 0x3A, 0x5 }, new ushort[2] { 0x30, 0x6 }, new ushort[2] { 0x14, 0x68 }, new ushort[2] { 0x19, 0x6B }, new ushort[2] { 0x1A, 0x6C }, new ushort[2] { 0x39, 0x7 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x38, 0x10 }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x37, 0x16 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x36, 0x21 }, new ushort[2] { 0x1E, 0x2E }, new ushort[2] { 0x35, 0x32 }, new ushort[2] { 0x34, 0x42 }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 } };
        private static ushort[][] p_StateReducsOnTerminal_15 = { };

        private static ushort[] p_StateExpectedIDs_16 = { 0x2, 0x13B, 0x138, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x137 };
        private static string[] p_StateExpectedNames_16 = { "$", "_T[?]", "_T[|]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[^]" };
        private static string[] p_StateItems_16 = { "[exp_op9 -> exp_op8 . ]", "[exp_op8 -> exp_op8 . ^ exp_op7]" };
        private static ushort[][] p_StateShiftsOnTerminal_16 = { new ushort[2] { 0x137, 0x79 } };
        private static ushort[][] p_StateShiftsOnVariable_16 = { };
        private static ushort[][] p_StateReducsOnTerminal_16 = { new ushort[2] { 0x2, 0x78 }, new ushort[2] { 0x13B, 0x78 }, new ushort[2] { 0x138, 0x78 }, new ushort[2] { 0x106, 0x78 }, new ushort[2] { 0x13C, 0x78 }, new ushort[2] { 0xF0, 0x78 }, new ushort[2] { 0xF1, 0x78 }, new ushort[2] { 0x152, 0x78 }, new ushort[2] { 0x13A, 0x78 }, new ushort[2] { 0x139, 0x78 } };

        private static ushort[] p_StateExpectedIDs_17 = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_17 = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_17 = { "[exp_op0_no_array -> exp_atom . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_17 = { };
        private static ushort[][] p_StateShiftsOnVariable_17 = { };
        private static ushort[][] p_StateReducsOnTerminal_17 = { new ushort[2] { 0x13D, 0x4A }, new ushort[2] { 0x13E, 0x4A }, new ushort[2] { 0x13F, 0x4A }, new ushort[2] { 0x140, 0x4A }, new ushort[2] { 0x141, 0x4A }, new ushort[2] { 0x142, 0x4A }, new ushort[2] { 0x143, 0x4A }, new ushort[2] { 0x144, 0x4A }, new ushort[2] { 0x145, 0x4A }, new ushort[2] { 0x146, 0x4A }, new ushort[2] { 0x147, 0x4A }, new ushort[2] { 0x2, 0x4A }, new ushort[2] { 0x13B, 0x4A }, new ushort[2] { 0x106, 0x4A }, new ushort[2] { 0x13C, 0x4A }, new ushort[2] { 0xF0, 0x4A }, new ushort[2] { 0xF1, 0x4A }, new ushort[2] { 0x152, 0x4A }, new ushort[2] { 0x13A, 0x4A }, new ushort[2] { 0x139, 0x4A }, new ushort[2] { 0x138, 0x4A }, new ushort[2] { 0x137, 0x4A }, new ushort[2] { 0x136, 0x4A }, new ushort[2] { 0x134, 0x4A }, new ushort[2] { 0x135, 0x4A }, new ushort[2] { 0x12E, 0x4A }, new ushort[2] { 0x12F, 0x4A }, new ushort[2] { 0x130, 0x4A }, new ushort[2] { 0x131, 0x4A }, new ushort[2] { 0x132, 0x4A }, new ushort[2] { 0x133, 0x4A }, new ushort[2] { 0x12C, 0x4A }, new ushort[2] { 0x12D, 0x4A }, new ushort[2] { 0x123, 0x4A }, new ushort[2] { 0x124, 0x4A }, new ushort[2] { 0x127, 0x4A }, new ushort[2] { 0x128, 0x4A }, new ushort[2] { 0x129, 0x4A } };

        private static ushort[] p_StateExpectedIDs_18 = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_18 = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_18 = { "[exp_op0_no_array -> exp_op0_invoke . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_18 = { };
        private static ushort[][] p_StateShiftsOnVariable_18 = { };
        private static ushort[][] p_StateReducsOnTerminal_18 = { new ushort[2] { 0x13D, 0x4B }, new ushort[2] { 0x13E, 0x4B }, new ushort[2] { 0x13F, 0x4B }, new ushort[2] { 0x140, 0x4B }, new ushort[2] { 0x141, 0x4B }, new ushort[2] { 0x142, 0x4B }, new ushort[2] { 0x143, 0x4B }, new ushort[2] { 0x144, 0x4B }, new ushort[2] { 0x145, 0x4B }, new ushort[2] { 0x146, 0x4B }, new ushort[2] { 0x147, 0x4B }, new ushort[2] { 0x2, 0x4B }, new ushort[2] { 0x13B, 0x4B }, new ushort[2] { 0x106, 0x4B }, new ushort[2] { 0x13C, 0x4B }, new ushort[2] { 0xF0, 0x4B }, new ushort[2] { 0xF1, 0x4B }, new ushort[2] { 0x152, 0x4B }, new ushort[2] { 0x13A, 0x4B }, new ushort[2] { 0x139, 0x4B }, new ushort[2] { 0x138, 0x4B }, new ushort[2] { 0x137, 0x4B }, new ushort[2] { 0x136, 0x4B }, new ushort[2] { 0x134, 0x4B }, new ushort[2] { 0x135, 0x4B }, new ushort[2] { 0x12E, 0x4B }, new ushort[2] { 0x12F, 0x4B }, new ushort[2] { 0x130, 0x4B }, new ushort[2] { 0x131, 0x4B }, new ushort[2] { 0x132, 0x4B }, new ushort[2] { 0x133, 0x4B }, new ushort[2] { 0x12C, 0x4B }, new ushort[2] { 0x12D, 0x4B }, new ushort[2] { 0x123, 0x4B }, new ushort[2] { 0x124, 0x4B }, new ushort[2] { 0x127, 0x4B }, new ushort[2] { 0x128, 0x4B }, new ushort[2] { 0x129, 0x4B } };

        private static ushort[] p_StateExpectedIDs_19 = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_19 = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_19 = { "[exp_op0_no_array -> exp_op0_obj_creation . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_19 = { };
        private static ushort[][] p_StateShiftsOnVariable_19 = { };
        private static ushort[][] p_StateReducsOnTerminal_19 = { new ushort[2] { 0x13D, 0x4C }, new ushort[2] { 0x13E, 0x4C }, new ushort[2] { 0x13F, 0x4C }, new ushort[2] { 0x140, 0x4C }, new ushort[2] { 0x141, 0x4C }, new ushort[2] { 0x142, 0x4C }, new ushort[2] { 0x143, 0x4C }, new ushort[2] { 0x144, 0x4C }, new ushort[2] { 0x145, 0x4C }, new ushort[2] { 0x146, 0x4C }, new ushort[2] { 0x147, 0x4C }, new ushort[2] { 0x2, 0x4C }, new ushort[2] { 0x13B, 0x4C }, new ushort[2] { 0x106, 0x4C }, new ushort[2] { 0x13C, 0x4C }, new ushort[2] { 0xF0, 0x4C }, new ushort[2] { 0xF1, 0x4C }, new ushort[2] { 0x152, 0x4C }, new ushort[2] { 0x13A, 0x4C }, new ushort[2] { 0x139, 0x4C }, new ushort[2] { 0x138, 0x4C }, new ushort[2] { 0x137, 0x4C }, new ushort[2] { 0x136, 0x4C }, new ushort[2] { 0x134, 0x4C }, new ushort[2] { 0x135, 0x4C }, new ushort[2] { 0x12E, 0x4C }, new ushort[2] { 0x12F, 0x4C }, new ushort[2] { 0x130, 0x4C }, new ushort[2] { 0x131, 0x4C }, new ushort[2] { 0x132, 0x4C }, new ushort[2] { 0x133, 0x4C }, new ushort[2] { 0x12C, 0x4C }, new ushort[2] { 0x12D, 0x4C }, new ushort[2] { 0x123, 0x4C }, new ushort[2] { 0x124, 0x4C }, new ushort[2] { 0x127, 0x4C }, new ushort[2] { 0x128, 0x4C }, new ushort[2] { 0x129, 0x4C } };

        private static ushort[] p_StateExpectedIDs_1A = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_1A = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_1A = { "[exp_op0_no_array -> exp_op0_post_increment . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_1A = { };
        private static ushort[][] p_StateShiftsOnVariable_1A = { };
        private static ushort[][] p_StateReducsOnTerminal_1A = { new ushort[2] { 0x13D, 0x4D }, new ushort[2] { 0x13E, 0x4D }, new ushort[2] { 0x13F, 0x4D }, new ushort[2] { 0x140, 0x4D }, new ushort[2] { 0x141, 0x4D }, new ushort[2] { 0x142, 0x4D }, new ushort[2] { 0x143, 0x4D }, new ushort[2] { 0x144, 0x4D }, new ushort[2] { 0x145, 0x4D }, new ushort[2] { 0x146, 0x4D }, new ushort[2] { 0x147, 0x4D }, new ushort[2] { 0x2, 0x4D }, new ushort[2] { 0x13B, 0x4D }, new ushort[2] { 0x106, 0x4D }, new ushort[2] { 0x13C, 0x4D }, new ushort[2] { 0xF0, 0x4D }, new ushort[2] { 0xF1, 0x4D }, new ushort[2] { 0x152, 0x4D }, new ushort[2] { 0x13A, 0x4D }, new ushort[2] { 0x139, 0x4D }, new ushort[2] { 0x138, 0x4D }, new ushort[2] { 0x137, 0x4D }, new ushort[2] { 0x136, 0x4D }, new ushort[2] { 0x134, 0x4D }, new ushort[2] { 0x135, 0x4D }, new ushort[2] { 0x12E, 0x4D }, new ushort[2] { 0x12F, 0x4D }, new ushort[2] { 0x130, 0x4D }, new ushort[2] { 0x131, 0x4D }, new ushort[2] { 0x132, 0x4D }, new ushort[2] { 0x133, 0x4D }, new ushort[2] { 0x12C, 0x4D }, new ushort[2] { 0x12D, 0x4D }, new ushort[2] { 0x123, 0x4D }, new ushort[2] { 0x124, 0x4D }, new ushort[2] { 0x127, 0x4D }, new ushort[2] { 0x128, 0x4D }, new ushort[2] { 0x129, 0x4D } };

        private static ushort[] p_StateExpectedIDs_1B = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_1B = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_1B = { "[exp_op0_no_array -> exp_op0_post_decrement . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_1B = { };
        private static ushort[][] p_StateShiftsOnVariable_1B = { };
        private static ushort[][] p_StateReducsOnTerminal_1B = { new ushort[2] { 0x13D, 0x4E }, new ushort[2] { 0x13E, 0x4E }, new ushort[2] { 0x13F, 0x4E }, new ushort[2] { 0x140, 0x4E }, new ushort[2] { 0x141, 0x4E }, new ushort[2] { 0x142, 0x4E }, new ushort[2] { 0x143, 0x4E }, new ushort[2] { 0x144, 0x4E }, new ushort[2] { 0x145, 0x4E }, new ushort[2] { 0x146, 0x4E }, new ushort[2] { 0x147, 0x4E }, new ushort[2] { 0x2, 0x4E }, new ushort[2] { 0x13B, 0x4E }, new ushort[2] { 0x106, 0x4E }, new ushort[2] { 0x13C, 0x4E }, new ushort[2] { 0xF0, 0x4E }, new ushort[2] { 0xF1, 0x4E }, new ushort[2] { 0x152, 0x4E }, new ushort[2] { 0x13A, 0x4E }, new ushort[2] { 0x139, 0x4E }, new ushort[2] { 0x138, 0x4E }, new ushort[2] { 0x137, 0x4E }, new ushort[2] { 0x136, 0x4E }, new ushort[2] { 0x134, 0x4E }, new ushort[2] { 0x135, 0x4E }, new ushort[2] { 0x12E, 0x4E }, new ushort[2] { 0x12F, 0x4E }, new ushort[2] { 0x130, 0x4E }, new ushort[2] { 0x131, 0x4E }, new ushort[2] { 0x132, 0x4E }, new ushort[2] { 0x133, 0x4E }, new ushort[2] { 0x12C, 0x4E }, new ushort[2] { 0x12D, 0x4E }, new ushort[2] { 0x123, 0x4E }, new ushort[2] { 0x124, 0x4E }, new ushort[2] { 0x127, 0x4E }, new ushort[2] { 0x128, 0x4E }, new ushort[2] { 0x129, 0x4E } };

        private static ushort[] p_StateExpectedIDs_1C = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_1C = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_1C = { "[exp_op0_no_array -> exp_op0_member_access . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_1C = { };
        private static ushort[][] p_StateShiftsOnVariable_1C = { };
        private static ushort[][] p_StateReducsOnTerminal_1C = { new ushort[2] { 0x13D, 0x4F }, new ushort[2] { 0x13E, 0x4F }, new ushort[2] { 0x13F, 0x4F }, new ushort[2] { 0x140, 0x4F }, new ushort[2] { 0x141, 0x4F }, new ushort[2] { 0x142, 0x4F }, new ushort[2] { 0x143, 0x4F }, new ushort[2] { 0x144, 0x4F }, new ushort[2] { 0x145, 0x4F }, new ushort[2] { 0x146, 0x4F }, new ushort[2] { 0x147, 0x4F }, new ushort[2] { 0x2, 0x4F }, new ushort[2] { 0x13B, 0x4F }, new ushort[2] { 0x106, 0x4F }, new ushort[2] { 0x13C, 0x4F }, new ushort[2] { 0xF0, 0x4F }, new ushort[2] { 0xF1, 0x4F }, new ushort[2] { 0x152, 0x4F }, new ushort[2] { 0x13A, 0x4F }, new ushort[2] { 0x139, 0x4F }, new ushort[2] { 0x138, 0x4F }, new ushort[2] { 0x137, 0x4F }, new ushort[2] { 0x136, 0x4F }, new ushort[2] { 0x134, 0x4F }, new ushort[2] { 0x135, 0x4F }, new ushort[2] { 0x12E, 0x4F }, new ushort[2] { 0x12F, 0x4F }, new ushort[2] { 0x130, 0x4F }, new ushort[2] { 0x131, 0x4F }, new ushort[2] { 0x132, 0x4F }, new ushort[2] { 0x133, 0x4F }, new ushort[2] { 0x12C, 0x4F }, new ushort[2] { 0x12D, 0x4F }, new ushort[2] { 0x123, 0x4F }, new ushort[2] { 0x124, 0x4F }, new ushort[2] { 0x127, 0x4F }, new ushort[2] { 0x128, 0x4F }, new ushort[2] { 0x129, 0x4F } };

        private static ushort[] p_StateExpectedIDs_1D = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_1D = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_1D = { "[exp_op0_no_array -> exp_op0_typeof . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_1D = { };
        private static ushort[][] p_StateShiftsOnVariable_1D = { };
        private static ushort[][] p_StateReducsOnTerminal_1D = { new ushort[2] { 0x13D, 0x50 }, new ushort[2] { 0x13E, 0x50 }, new ushort[2] { 0x13F, 0x50 }, new ushort[2] { 0x140, 0x50 }, new ushort[2] { 0x141, 0x50 }, new ushort[2] { 0x142, 0x50 }, new ushort[2] { 0x143, 0x50 }, new ushort[2] { 0x144, 0x50 }, new ushort[2] { 0x145, 0x50 }, new ushort[2] { 0x146, 0x50 }, new ushort[2] { 0x147, 0x50 }, new ushort[2] { 0x2, 0x50 }, new ushort[2] { 0x13B, 0x50 }, new ushort[2] { 0x106, 0x50 }, new ushort[2] { 0x13C, 0x50 }, new ushort[2] { 0xF0, 0x50 }, new ushort[2] { 0xF1, 0x50 }, new ushort[2] { 0x152, 0x50 }, new ushort[2] { 0x13A, 0x50 }, new ushort[2] { 0x139, 0x50 }, new ushort[2] { 0x138, 0x50 }, new ushort[2] { 0x137, 0x50 }, new ushort[2] { 0x136, 0x50 }, new ushort[2] { 0x134, 0x50 }, new ushort[2] { 0x135, 0x50 }, new ushort[2] { 0x12E, 0x50 }, new ushort[2] { 0x12F, 0x50 }, new ushort[2] { 0x130, 0x50 }, new ushort[2] { 0x131, 0x50 }, new ushort[2] { 0x132, 0x50 }, new ushort[2] { 0x133, 0x50 }, new ushort[2] { 0x12C, 0x50 }, new ushort[2] { 0x12D, 0x50 }, new ushort[2] { 0x123, 0x50 }, new ushort[2] { 0x124, 0x50 }, new ushort[2] { 0x127, 0x50 }, new ushort[2] { 0x128, 0x50 }, new ushort[2] { 0x129, 0x50 } };

        private static ushort[] p_StateExpectedIDs_1E = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_1E = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_1E = { "[exp_op0_no_array -> exp_op0_checked . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_1E = { };
        private static ushort[][] p_StateShiftsOnVariable_1E = { };
        private static ushort[][] p_StateReducsOnTerminal_1E = { new ushort[2] { 0x13D, 0x51 }, new ushort[2] { 0x13E, 0x51 }, new ushort[2] { 0x13F, 0x51 }, new ushort[2] { 0x140, 0x51 }, new ushort[2] { 0x141, 0x51 }, new ushort[2] { 0x142, 0x51 }, new ushort[2] { 0x143, 0x51 }, new ushort[2] { 0x144, 0x51 }, new ushort[2] { 0x145, 0x51 }, new ushort[2] { 0x146, 0x51 }, new ushort[2] { 0x147, 0x51 }, new ushort[2] { 0x2, 0x51 }, new ushort[2] { 0x13B, 0x51 }, new ushort[2] { 0x106, 0x51 }, new ushort[2] { 0x13C, 0x51 }, new ushort[2] { 0xF0, 0x51 }, new ushort[2] { 0xF1, 0x51 }, new ushort[2] { 0x152, 0x51 }, new ushort[2] { 0x13A, 0x51 }, new ushort[2] { 0x139, 0x51 }, new ushort[2] { 0x138, 0x51 }, new ushort[2] { 0x137, 0x51 }, new ushort[2] { 0x136, 0x51 }, new ushort[2] { 0x134, 0x51 }, new ushort[2] { 0x135, 0x51 }, new ushort[2] { 0x12E, 0x51 }, new ushort[2] { 0x12F, 0x51 }, new ushort[2] { 0x130, 0x51 }, new ushort[2] { 0x131, 0x51 }, new ushort[2] { 0x132, 0x51 }, new ushort[2] { 0x133, 0x51 }, new ushort[2] { 0x12C, 0x51 }, new ushort[2] { 0x12D, 0x51 }, new ushort[2] { 0x123, 0x51 }, new ushort[2] { 0x124, 0x51 }, new ushort[2] { 0x127, 0x51 }, new ushort[2] { 0x128, 0x51 }, new ushort[2] { 0x129, 0x51 } };

        private static ushort[] p_StateExpectedIDs_1F = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_1F = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_1F = { "[exp_op0_no_array -> exp_op0_unchecked . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_1F = { };
        private static ushort[][] p_StateShiftsOnVariable_1F = { };
        private static ushort[][] p_StateReducsOnTerminal_1F = { new ushort[2] { 0x13D, 0x52 }, new ushort[2] { 0x13E, 0x52 }, new ushort[2] { 0x13F, 0x52 }, new ushort[2] { 0x140, 0x52 }, new ushort[2] { 0x141, 0x52 }, new ushort[2] { 0x142, 0x52 }, new ushort[2] { 0x143, 0x52 }, new ushort[2] { 0x144, 0x52 }, new ushort[2] { 0x145, 0x52 }, new ushort[2] { 0x146, 0x52 }, new ushort[2] { 0x147, 0x52 }, new ushort[2] { 0x2, 0x52 }, new ushort[2] { 0x13B, 0x52 }, new ushort[2] { 0x106, 0x52 }, new ushort[2] { 0x13C, 0x52 }, new ushort[2] { 0xF0, 0x52 }, new ushort[2] { 0xF1, 0x52 }, new ushort[2] { 0x152, 0x52 }, new ushort[2] { 0x13A, 0x52 }, new ushort[2] { 0x139, 0x52 }, new ushort[2] { 0x138, 0x52 }, new ushort[2] { 0x137, 0x52 }, new ushort[2] { 0x136, 0x52 }, new ushort[2] { 0x134, 0x52 }, new ushort[2] { 0x135, 0x52 }, new ushort[2] { 0x12E, 0x52 }, new ushort[2] { 0x12F, 0x52 }, new ushort[2] { 0x130, 0x52 }, new ushort[2] { 0x131, 0x52 }, new ushort[2] { 0x132, 0x52 }, new ushort[2] { 0x133, 0x52 }, new ushort[2] { 0x12C, 0x52 }, new ushort[2] { 0x12D, 0x52 }, new ushort[2] { 0x123, 0x52 }, new ushort[2] { 0x124, 0x52 }, new ushort[2] { 0x127, 0x52 }, new ushort[2] { 0x128, 0x52 }, new ushort[2] { 0x129, 0x52 } };

        private static ushort[] p_StateExpectedIDs_20 = { 0xDF, 0xE0, 0xE1, 0xE2, 0x13, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED };
        private static string[] p_StateExpectedNames_20 = { "_T[object]", "_T[string]", "_T[bool]", "_T[decimal]", "IDENTIFIER", "_T[sbyte]", "_T[byte]", "_T[short]", "_T[ushort]", "_T[int]", "_T[uint]", "_T[long]", "_T[ulong]", "_T[char]", "_T[float]", "_T[double]" };
        private static string[] p_StateItems_20 = { "[exp_op0_array_creation -> new . type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> new . type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> new . type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> new . type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> new . type_array array_initializer]", "[exp_op0_obj_creation -> new . type ( exp_argument_list )]", "[exp_op0_obj_creation -> new . type ( )]", "[type_non_array -> . type_object]", "[type_non_array -> . type_simple]", "[type_array -> . type_non_array type_array_rank _m238]", "[type -> . type_non_array]", "[type -> . type_array]", "[type_object -> . object]", "[type_object -> . string]", "[type_object -> . qualified_name]", "[type_simple -> . bool]", "[type_simple -> . decimal]", "[type_simple -> . type_simple_integral]", "[type_simple -> . type_simple_float]", "[qualified_name -> . IDENTIFIER _m222]", "[type_simple_integral -> . sbyte]", "[type_simple_integral -> . byte]", "[type_simple_integral -> . short]", "[type_simple_integral -> . ushort]", "[type_simple_integral -> . int]", "[type_simple_integral -> . uint]", "[type_simple_integral -> . long]", "[type_simple_integral -> . ulong]", "[type_simple_integral -> . char]", "[type_simple_float -> . float]", "[type_simple_float -> . double]" };
        private static ushort[][] p_StateShiftsOnTerminal_20 = { new ushort[2] { 0xDF, 0x7D }, new ushort[2] { 0xE0, 0x7E }, new ushort[2] { 0xE1, 0x7F }, new ushort[2] { 0xE2, 0x80 }, new ushort[2] { 0x13, 0x81 }, new ushort[2] { 0xE3, 0x82 }, new ushort[2] { 0xE4, 0x83 }, new ushort[2] { 0xE5, 0x84 }, new ushort[2] { 0xE6, 0x85 }, new ushort[2] { 0xE7, 0x86 }, new ushort[2] { 0xE8, 0x87 }, new ushort[2] { 0xE9, 0x88 }, new ushort[2] { 0xEA, 0x89 }, new ushort[2] { 0xEB, 0x8A }, new ushort[2] { 0xEC, 0x8B }, new ushort[2] { 0xED, 0x8C } };
        private static ushort[][] p_StateShiftsOnVariable_20 = { new ushort[2] { 0x16, 0x7A }, new ushort[2] { 0x1B, 0x7B }, new ushort[2] { 0x15, 0x7C }, new ushort[2] { 0x17, 0x64 }, new ushort[2] { 0x18, 0x65 }, new ushort[2] { 0x14, 0x68 }, new ushort[2] { 0x19, 0x6B }, new ushort[2] { 0x1A, 0x6C } };
        private static ushort[][] p_StateReducsOnTerminal_20 = { };

        private static ushort[] p_StateExpectedIDs_21 = { 0x2, 0x13B, 0x137, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x136 };
        private static string[] p_StateExpectedNames_21 = { "$", "_T[?]", "_T[^]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[&]" };
        private static string[] p_StateItems_21 = { "[exp_op8 -> exp_op7 . ]", "[exp_op7 -> exp_op7 . & exp_op6]" };
        private static ushort[][] p_StateShiftsOnTerminal_21 = { new ushort[2] { 0x136, 0x8D } };
        private static ushort[][] p_StateShiftsOnVariable_21 = { };
        private static ushort[][] p_StateReducsOnTerminal_21 = { new ushort[2] { 0x2, 0x76 }, new ushort[2] { 0x13B, 0x76 }, new ushort[2] { 0x137, 0x76 }, new ushort[2] { 0x106, 0x76 }, new ushort[2] { 0x13C, 0x76 }, new ushort[2] { 0xF0, 0x76 }, new ushort[2] { 0xF1, 0x76 }, new ushort[2] { 0x152, 0x76 }, new ushort[2] { 0x13A, 0x76 }, new ushort[2] { 0x139, 0x76 }, new ushort[2] { 0x138, 0x76 } };

        private static ushort[] p_StateExpectedIDs_22 = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_22 = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_22 = { "[exp_atom -> NULL_LITTERAL . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_22 = { };
        private static ushort[][] p_StateShiftsOnVariable_22 = { };
        private static ushort[][] p_StateReducsOnTerminal_22 = { new ushort[2] { 0x13D, 0x2B }, new ushort[2] { 0x13E, 0x2B }, new ushort[2] { 0x13F, 0x2B }, new ushort[2] { 0x140, 0x2B }, new ushort[2] { 0x141, 0x2B }, new ushort[2] { 0x142, 0x2B }, new ushort[2] { 0x143, 0x2B }, new ushort[2] { 0x144, 0x2B }, new ushort[2] { 0x145, 0x2B }, new ushort[2] { 0x146, 0x2B }, new ushort[2] { 0x147, 0x2B }, new ushort[2] { 0x2, 0x2B }, new ushort[2] { 0x13B, 0x2B }, new ushort[2] { 0x106, 0x2B }, new ushort[2] { 0x13C, 0x2B }, new ushort[2] { 0xF0, 0x2B }, new ushort[2] { 0xF1, 0x2B }, new ushort[2] { 0x152, 0x2B }, new ushort[2] { 0x13A, 0x2B }, new ushort[2] { 0x139, 0x2B }, new ushort[2] { 0x138, 0x2B }, new ushort[2] { 0x137, 0x2B }, new ushort[2] { 0x136, 0x2B }, new ushort[2] { 0x134, 0x2B }, new ushort[2] { 0x135, 0x2B }, new ushort[2] { 0x12E, 0x2B }, new ushort[2] { 0x12F, 0x2B }, new ushort[2] { 0x130, 0x2B }, new ushort[2] { 0x131, 0x2B }, new ushort[2] { 0x132, 0x2B }, new ushort[2] { 0x133, 0x2B }, new ushort[2] { 0x12C, 0x2B }, new ushort[2] { 0x12D, 0x2B }, new ushort[2] { 0x123, 0x2B }, new ushort[2] { 0x124, 0x2B }, new ushort[2] { 0x127, 0x2B }, new ushort[2] { 0x128, 0x2B }, new ushort[2] { 0x129, 0x2B } };

        private static ushort[] p_StateExpectedIDs_23 = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_23 = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_23 = { "[exp_atom -> BOOLEAN_LITTERAL_TRUE . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_23 = { };
        private static ushort[][] p_StateShiftsOnVariable_23 = { };
        private static ushort[][] p_StateReducsOnTerminal_23 = { new ushort[2] { 0x13D, 0x2C }, new ushort[2] { 0x13E, 0x2C }, new ushort[2] { 0x13F, 0x2C }, new ushort[2] { 0x140, 0x2C }, new ushort[2] { 0x141, 0x2C }, new ushort[2] { 0x142, 0x2C }, new ushort[2] { 0x143, 0x2C }, new ushort[2] { 0x144, 0x2C }, new ushort[2] { 0x145, 0x2C }, new ushort[2] { 0x146, 0x2C }, new ushort[2] { 0x147, 0x2C }, new ushort[2] { 0x2, 0x2C }, new ushort[2] { 0x13B, 0x2C }, new ushort[2] { 0x106, 0x2C }, new ushort[2] { 0x13C, 0x2C }, new ushort[2] { 0xF0, 0x2C }, new ushort[2] { 0xF1, 0x2C }, new ushort[2] { 0x152, 0x2C }, new ushort[2] { 0x13A, 0x2C }, new ushort[2] { 0x139, 0x2C }, new ushort[2] { 0x138, 0x2C }, new ushort[2] { 0x137, 0x2C }, new ushort[2] { 0x136, 0x2C }, new ushort[2] { 0x134, 0x2C }, new ushort[2] { 0x135, 0x2C }, new ushort[2] { 0x12E, 0x2C }, new ushort[2] { 0x12F, 0x2C }, new ushort[2] { 0x130, 0x2C }, new ushort[2] { 0x131, 0x2C }, new ushort[2] { 0x132, 0x2C }, new ushort[2] { 0x133, 0x2C }, new ushort[2] { 0x12C, 0x2C }, new ushort[2] { 0x12D, 0x2C }, new ushort[2] { 0x123, 0x2C }, new ushort[2] { 0x124, 0x2C }, new ushort[2] { 0x127, 0x2C }, new ushort[2] { 0x128, 0x2C }, new ushort[2] { 0x129, 0x2C } };

        private static ushort[] p_StateExpectedIDs_24 = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_24 = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_24 = { "[exp_atom -> BOOLEAN_LITTERAL_FALSE . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_24 = { };
        private static ushort[][] p_StateShiftsOnVariable_24 = { };
        private static ushort[][] p_StateReducsOnTerminal_24 = { new ushort[2] { 0x13D, 0x2D }, new ushort[2] { 0x13E, 0x2D }, new ushort[2] { 0x13F, 0x2D }, new ushort[2] { 0x140, 0x2D }, new ushort[2] { 0x141, 0x2D }, new ushort[2] { 0x142, 0x2D }, new ushort[2] { 0x143, 0x2D }, new ushort[2] { 0x144, 0x2D }, new ushort[2] { 0x145, 0x2D }, new ushort[2] { 0x146, 0x2D }, new ushort[2] { 0x147, 0x2D }, new ushort[2] { 0x2, 0x2D }, new ushort[2] { 0x13B, 0x2D }, new ushort[2] { 0x106, 0x2D }, new ushort[2] { 0x13C, 0x2D }, new ushort[2] { 0xF0, 0x2D }, new ushort[2] { 0xF1, 0x2D }, new ushort[2] { 0x152, 0x2D }, new ushort[2] { 0x13A, 0x2D }, new ushort[2] { 0x139, 0x2D }, new ushort[2] { 0x138, 0x2D }, new ushort[2] { 0x137, 0x2D }, new ushort[2] { 0x136, 0x2D }, new ushort[2] { 0x134, 0x2D }, new ushort[2] { 0x135, 0x2D }, new ushort[2] { 0x12E, 0x2D }, new ushort[2] { 0x12F, 0x2D }, new ushort[2] { 0x130, 0x2D }, new ushort[2] { 0x131, 0x2D }, new ushort[2] { 0x132, 0x2D }, new ushort[2] { 0x133, 0x2D }, new ushort[2] { 0x12C, 0x2D }, new ushort[2] { 0x12D, 0x2D }, new ushort[2] { 0x123, 0x2D }, new ushort[2] { 0x124, 0x2D }, new ushort[2] { 0x127, 0x2D }, new ushort[2] { 0x128, 0x2D }, new ushort[2] { 0x129, 0x2D } };

        private static ushort[] p_StateExpectedIDs_25 = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_25 = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_25 = { "[exp_atom -> INTEGER_LITTERAL_DECIMAL . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_25 = { };
        private static ushort[][] p_StateShiftsOnVariable_25 = { };
        private static ushort[][] p_StateReducsOnTerminal_25 = { new ushort[2] { 0x13D, 0x2E }, new ushort[2] { 0x13E, 0x2E }, new ushort[2] { 0x13F, 0x2E }, new ushort[2] { 0x140, 0x2E }, new ushort[2] { 0x141, 0x2E }, new ushort[2] { 0x142, 0x2E }, new ushort[2] { 0x143, 0x2E }, new ushort[2] { 0x144, 0x2E }, new ushort[2] { 0x145, 0x2E }, new ushort[2] { 0x146, 0x2E }, new ushort[2] { 0x147, 0x2E }, new ushort[2] { 0x2, 0x2E }, new ushort[2] { 0x13B, 0x2E }, new ushort[2] { 0x106, 0x2E }, new ushort[2] { 0x13C, 0x2E }, new ushort[2] { 0xF0, 0x2E }, new ushort[2] { 0xF1, 0x2E }, new ushort[2] { 0x152, 0x2E }, new ushort[2] { 0x13A, 0x2E }, new ushort[2] { 0x139, 0x2E }, new ushort[2] { 0x138, 0x2E }, new ushort[2] { 0x137, 0x2E }, new ushort[2] { 0x136, 0x2E }, new ushort[2] { 0x134, 0x2E }, new ushort[2] { 0x135, 0x2E }, new ushort[2] { 0x12E, 0x2E }, new ushort[2] { 0x12F, 0x2E }, new ushort[2] { 0x130, 0x2E }, new ushort[2] { 0x131, 0x2E }, new ushort[2] { 0x132, 0x2E }, new ushort[2] { 0x133, 0x2E }, new ushort[2] { 0x12C, 0x2E }, new ushort[2] { 0x12D, 0x2E }, new ushort[2] { 0x123, 0x2E }, new ushort[2] { 0x124, 0x2E }, new ushort[2] { 0x127, 0x2E }, new ushort[2] { 0x128, 0x2E }, new ushort[2] { 0x129, 0x2E } };

        private static ushort[] p_StateExpectedIDs_26 = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_26 = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_26 = { "[exp_atom -> INTEGER_LITTERAL_HEXA . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_26 = { };
        private static ushort[][] p_StateShiftsOnVariable_26 = { };
        private static ushort[][] p_StateReducsOnTerminal_26 = { new ushort[2] { 0x13D, 0x2F }, new ushort[2] { 0x13E, 0x2F }, new ushort[2] { 0x13F, 0x2F }, new ushort[2] { 0x140, 0x2F }, new ushort[2] { 0x141, 0x2F }, new ushort[2] { 0x142, 0x2F }, new ushort[2] { 0x143, 0x2F }, new ushort[2] { 0x144, 0x2F }, new ushort[2] { 0x145, 0x2F }, new ushort[2] { 0x146, 0x2F }, new ushort[2] { 0x147, 0x2F }, new ushort[2] { 0x2, 0x2F }, new ushort[2] { 0x13B, 0x2F }, new ushort[2] { 0x106, 0x2F }, new ushort[2] { 0x13C, 0x2F }, new ushort[2] { 0xF0, 0x2F }, new ushort[2] { 0xF1, 0x2F }, new ushort[2] { 0x152, 0x2F }, new ushort[2] { 0x13A, 0x2F }, new ushort[2] { 0x139, 0x2F }, new ushort[2] { 0x138, 0x2F }, new ushort[2] { 0x137, 0x2F }, new ushort[2] { 0x136, 0x2F }, new ushort[2] { 0x134, 0x2F }, new ushort[2] { 0x135, 0x2F }, new ushort[2] { 0x12E, 0x2F }, new ushort[2] { 0x12F, 0x2F }, new ushort[2] { 0x130, 0x2F }, new ushort[2] { 0x131, 0x2F }, new ushort[2] { 0x132, 0x2F }, new ushort[2] { 0x133, 0x2F }, new ushort[2] { 0x12C, 0x2F }, new ushort[2] { 0x12D, 0x2F }, new ushort[2] { 0x123, 0x2F }, new ushort[2] { 0x124, 0x2F }, new ushort[2] { 0x127, 0x2F }, new ushort[2] { 0x128, 0x2F }, new ushort[2] { 0x129, 0x2F } };

        private static ushort[] p_StateExpectedIDs_27 = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_27 = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_27 = { "[exp_atom -> REAL_LITTERAL . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_27 = { };
        private static ushort[][] p_StateShiftsOnVariable_27 = { };
        private static ushort[][] p_StateReducsOnTerminal_27 = { new ushort[2] { 0x13D, 0x30 }, new ushort[2] { 0x13E, 0x30 }, new ushort[2] { 0x13F, 0x30 }, new ushort[2] { 0x140, 0x30 }, new ushort[2] { 0x141, 0x30 }, new ushort[2] { 0x142, 0x30 }, new ushort[2] { 0x143, 0x30 }, new ushort[2] { 0x144, 0x30 }, new ushort[2] { 0x145, 0x30 }, new ushort[2] { 0x146, 0x30 }, new ushort[2] { 0x147, 0x30 }, new ushort[2] { 0x2, 0x30 }, new ushort[2] { 0x13B, 0x30 }, new ushort[2] { 0x106, 0x30 }, new ushort[2] { 0x13C, 0x30 }, new ushort[2] { 0xF0, 0x30 }, new ushort[2] { 0xF1, 0x30 }, new ushort[2] { 0x152, 0x30 }, new ushort[2] { 0x13A, 0x30 }, new ushort[2] { 0x139, 0x30 }, new ushort[2] { 0x138, 0x30 }, new ushort[2] { 0x137, 0x30 }, new ushort[2] { 0x136, 0x30 }, new ushort[2] { 0x134, 0x30 }, new ushort[2] { 0x135, 0x30 }, new ushort[2] { 0x12E, 0x30 }, new ushort[2] { 0x12F, 0x30 }, new ushort[2] { 0x130, 0x30 }, new ushort[2] { 0x131, 0x30 }, new ushort[2] { 0x132, 0x30 }, new ushort[2] { 0x133, 0x30 }, new ushort[2] { 0x12C, 0x30 }, new ushort[2] { 0x12D, 0x30 }, new ushort[2] { 0x123, 0x30 }, new ushort[2] { 0x124, 0x30 }, new ushort[2] { 0x127, 0x30 }, new ushort[2] { 0x128, 0x30 }, new ushort[2] { 0x129, 0x30 } };

        private static ushort[] p_StateExpectedIDs_28 = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_28 = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_28 = { "[exp_atom -> CHARACTER_LITTERAL . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_28 = { };
        private static ushort[][] p_StateShiftsOnVariable_28 = { };
        private static ushort[][] p_StateReducsOnTerminal_28 = { new ushort[2] { 0x13D, 0x31 }, new ushort[2] { 0x13E, 0x31 }, new ushort[2] { 0x13F, 0x31 }, new ushort[2] { 0x140, 0x31 }, new ushort[2] { 0x141, 0x31 }, new ushort[2] { 0x142, 0x31 }, new ushort[2] { 0x143, 0x31 }, new ushort[2] { 0x144, 0x31 }, new ushort[2] { 0x145, 0x31 }, new ushort[2] { 0x146, 0x31 }, new ushort[2] { 0x147, 0x31 }, new ushort[2] { 0x2, 0x31 }, new ushort[2] { 0x13B, 0x31 }, new ushort[2] { 0x106, 0x31 }, new ushort[2] { 0x13C, 0x31 }, new ushort[2] { 0xF0, 0x31 }, new ushort[2] { 0xF1, 0x31 }, new ushort[2] { 0x152, 0x31 }, new ushort[2] { 0x13A, 0x31 }, new ushort[2] { 0x139, 0x31 }, new ushort[2] { 0x138, 0x31 }, new ushort[2] { 0x137, 0x31 }, new ushort[2] { 0x136, 0x31 }, new ushort[2] { 0x134, 0x31 }, new ushort[2] { 0x135, 0x31 }, new ushort[2] { 0x12E, 0x31 }, new ushort[2] { 0x12F, 0x31 }, new ushort[2] { 0x130, 0x31 }, new ushort[2] { 0x131, 0x31 }, new ushort[2] { 0x132, 0x31 }, new ushort[2] { 0x133, 0x31 }, new ushort[2] { 0x12C, 0x31 }, new ushort[2] { 0x12D, 0x31 }, new ushort[2] { 0x123, 0x31 }, new ushort[2] { 0x124, 0x31 }, new ushort[2] { 0x127, 0x31 }, new ushort[2] { 0x128, 0x31 }, new ushort[2] { 0x129, 0x31 } };

        private static ushort[] p_StateExpectedIDs_29 = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_29 = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_29 = { "[exp_atom -> STRING_LITTERAL_REGULAR . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_29 = { };
        private static ushort[][] p_StateShiftsOnVariable_29 = { };
        private static ushort[][] p_StateReducsOnTerminal_29 = { new ushort[2] { 0x13D, 0x32 }, new ushort[2] { 0x13E, 0x32 }, new ushort[2] { 0x13F, 0x32 }, new ushort[2] { 0x140, 0x32 }, new ushort[2] { 0x141, 0x32 }, new ushort[2] { 0x142, 0x32 }, new ushort[2] { 0x143, 0x32 }, new ushort[2] { 0x144, 0x32 }, new ushort[2] { 0x145, 0x32 }, new ushort[2] { 0x146, 0x32 }, new ushort[2] { 0x147, 0x32 }, new ushort[2] { 0x2, 0x32 }, new ushort[2] { 0x13B, 0x32 }, new ushort[2] { 0x106, 0x32 }, new ushort[2] { 0x13C, 0x32 }, new ushort[2] { 0xF0, 0x32 }, new ushort[2] { 0xF1, 0x32 }, new ushort[2] { 0x152, 0x32 }, new ushort[2] { 0x13A, 0x32 }, new ushort[2] { 0x139, 0x32 }, new ushort[2] { 0x138, 0x32 }, new ushort[2] { 0x137, 0x32 }, new ushort[2] { 0x136, 0x32 }, new ushort[2] { 0x134, 0x32 }, new ushort[2] { 0x135, 0x32 }, new ushort[2] { 0x12E, 0x32 }, new ushort[2] { 0x12F, 0x32 }, new ushort[2] { 0x130, 0x32 }, new ushort[2] { 0x131, 0x32 }, new ushort[2] { 0x132, 0x32 }, new ushort[2] { 0x133, 0x32 }, new ushort[2] { 0x12C, 0x32 }, new ushort[2] { 0x12D, 0x32 }, new ushort[2] { 0x123, 0x32 }, new ushort[2] { 0x124, 0x32 }, new ushort[2] { 0x127, 0x32 }, new ushort[2] { 0x128, 0x32 }, new ushort[2] { 0x129, 0x32 } };

        private static ushort[] p_StateExpectedIDs_2A = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_2A = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_2A = { "[exp_atom -> STRING_LITTERAL_VERBATIM . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_2A = { };
        private static ushort[][] p_StateShiftsOnVariable_2A = { };
        private static ushort[][] p_StateReducsOnTerminal_2A = { new ushort[2] { 0x13D, 0x33 }, new ushort[2] { 0x13E, 0x33 }, new ushort[2] { 0x13F, 0x33 }, new ushort[2] { 0x140, 0x33 }, new ushort[2] { 0x141, 0x33 }, new ushort[2] { 0x142, 0x33 }, new ushort[2] { 0x143, 0x33 }, new ushort[2] { 0x144, 0x33 }, new ushort[2] { 0x145, 0x33 }, new ushort[2] { 0x146, 0x33 }, new ushort[2] { 0x147, 0x33 }, new ushort[2] { 0x2, 0x33 }, new ushort[2] { 0x13B, 0x33 }, new ushort[2] { 0x106, 0x33 }, new ushort[2] { 0x13C, 0x33 }, new ushort[2] { 0xF0, 0x33 }, new ushort[2] { 0xF1, 0x33 }, new ushort[2] { 0x152, 0x33 }, new ushort[2] { 0x13A, 0x33 }, new ushort[2] { 0x139, 0x33 }, new ushort[2] { 0x138, 0x33 }, new ushort[2] { 0x137, 0x33 }, new ushort[2] { 0x136, 0x33 }, new ushort[2] { 0x134, 0x33 }, new ushort[2] { 0x135, 0x33 }, new ushort[2] { 0x12E, 0x33 }, new ushort[2] { 0x12F, 0x33 }, new ushort[2] { 0x130, 0x33 }, new ushort[2] { 0x131, 0x33 }, new ushort[2] { 0x132, 0x33 }, new ushort[2] { 0x133, 0x33 }, new ushort[2] { 0x12C, 0x33 }, new ushort[2] { 0x12D, 0x33 }, new ushort[2] { 0x123, 0x33 }, new ushort[2] { 0x124, 0x33 }, new ushort[2] { 0x127, 0x33 }, new ushort[2] { 0x128, 0x33 }, new ushort[2] { 0x129, 0x33 } };

        private static ushort[] p_StateExpectedIDs_2B = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_2B = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_2B = { "[exp_atom -> IDENTIFIER . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_2B = { };
        private static ushort[][] p_StateShiftsOnVariable_2B = { };
        private static ushort[][] p_StateReducsOnTerminal_2B = { new ushort[2] { 0x13D, 0x34 }, new ushort[2] { 0x13E, 0x34 }, new ushort[2] { 0x13F, 0x34 }, new ushort[2] { 0x140, 0x34 }, new ushort[2] { 0x141, 0x34 }, new ushort[2] { 0x142, 0x34 }, new ushort[2] { 0x143, 0x34 }, new ushort[2] { 0x144, 0x34 }, new ushort[2] { 0x145, 0x34 }, new ushort[2] { 0x146, 0x34 }, new ushort[2] { 0x147, 0x34 }, new ushort[2] { 0x2, 0x34 }, new ushort[2] { 0x13B, 0x34 }, new ushort[2] { 0x106, 0x34 }, new ushort[2] { 0x13C, 0x34 }, new ushort[2] { 0xF0, 0x34 }, new ushort[2] { 0xF1, 0x34 }, new ushort[2] { 0x152, 0x34 }, new ushort[2] { 0x13A, 0x34 }, new ushort[2] { 0x139, 0x34 }, new ushort[2] { 0x138, 0x34 }, new ushort[2] { 0x137, 0x34 }, new ushort[2] { 0x136, 0x34 }, new ushort[2] { 0x134, 0x34 }, new ushort[2] { 0x135, 0x34 }, new ushort[2] { 0x12E, 0x34 }, new ushort[2] { 0x12F, 0x34 }, new ushort[2] { 0x130, 0x34 }, new ushort[2] { 0x131, 0x34 }, new ushort[2] { 0x132, 0x34 }, new ushort[2] { 0x133, 0x34 }, new ushort[2] { 0x12C, 0x34 }, new ushort[2] { 0x12D, 0x34 }, new ushort[2] { 0x123, 0x34 }, new ushort[2] { 0x124, 0x34 }, new ushort[2] { 0x127, 0x34 }, new ushort[2] { 0x128, 0x34 }, new ushort[2] { 0x129, 0x34 } };

        private static ushort[] p_StateExpectedIDs_2C = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_2C = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_2C = { "[exp_atom -> this . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_2C = { };
        private static ushort[][] p_StateShiftsOnVariable_2C = { };
        private static ushort[][] p_StateReducsOnTerminal_2C = { new ushort[2] { 0x13D, 0x35 }, new ushort[2] { 0x13E, 0x35 }, new ushort[2] { 0x13F, 0x35 }, new ushort[2] { 0x140, 0x35 }, new ushort[2] { 0x141, 0x35 }, new ushort[2] { 0x142, 0x35 }, new ushort[2] { 0x143, 0x35 }, new ushort[2] { 0x144, 0x35 }, new ushort[2] { 0x145, 0x35 }, new ushort[2] { 0x146, 0x35 }, new ushort[2] { 0x147, 0x35 }, new ushort[2] { 0x2, 0x35 }, new ushort[2] { 0x13B, 0x35 }, new ushort[2] { 0x106, 0x35 }, new ushort[2] { 0x13C, 0x35 }, new ushort[2] { 0xF0, 0x35 }, new ushort[2] { 0xF1, 0x35 }, new ushort[2] { 0x152, 0x35 }, new ushort[2] { 0x13A, 0x35 }, new ushort[2] { 0x139, 0x35 }, new ushort[2] { 0x138, 0x35 }, new ushort[2] { 0x137, 0x35 }, new ushort[2] { 0x136, 0x35 }, new ushort[2] { 0x134, 0x35 }, new ushort[2] { 0x135, 0x35 }, new ushort[2] { 0x12E, 0x35 }, new ushort[2] { 0x12F, 0x35 }, new ushort[2] { 0x130, 0x35 }, new ushort[2] { 0x131, 0x35 }, new ushort[2] { 0x132, 0x35 }, new ushort[2] { 0x133, 0x35 }, new ushort[2] { 0x12C, 0x35 }, new ushort[2] { 0x12D, 0x35 }, new ushort[2] { 0x123, 0x35 }, new ushort[2] { 0x124, 0x35 }, new ushort[2] { 0x127, 0x35 }, new ushort[2] { 0x128, 0x35 }, new ushort[2] { 0x129, 0x35 } };

        private static ushort[] p_StateExpectedIDs_2D = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_2D = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_2D = { "[exp_atom -> base . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_2D = { };
        private static ushort[][] p_StateShiftsOnVariable_2D = { };
        private static ushort[][] p_StateReducsOnTerminal_2D = { new ushort[2] { 0x13D, 0x36 }, new ushort[2] { 0x13E, 0x36 }, new ushort[2] { 0x13F, 0x36 }, new ushort[2] { 0x140, 0x36 }, new ushort[2] { 0x141, 0x36 }, new ushort[2] { 0x142, 0x36 }, new ushort[2] { 0x143, 0x36 }, new ushort[2] { 0x144, 0x36 }, new ushort[2] { 0x145, 0x36 }, new ushort[2] { 0x146, 0x36 }, new ushort[2] { 0x147, 0x36 }, new ushort[2] { 0x2, 0x36 }, new ushort[2] { 0x13B, 0x36 }, new ushort[2] { 0x106, 0x36 }, new ushort[2] { 0x13C, 0x36 }, new ushort[2] { 0xF0, 0x36 }, new ushort[2] { 0xF1, 0x36 }, new ushort[2] { 0x152, 0x36 }, new ushort[2] { 0x13A, 0x36 }, new ushort[2] { 0x139, 0x36 }, new ushort[2] { 0x138, 0x36 }, new ushort[2] { 0x137, 0x36 }, new ushort[2] { 0x136, 0x36 }, new ushort[2] { 0x134, 0x36 }, new ushort[2] { 0x135, 0x36 }, new ushort[2] { 0x12E, 0x36 }, new ushort[2] { 0x12F, 0x36 }, new ushort[2] { 0x130, 0x36 }, new ushort[2] { 0x131, 0x36 }, new ushort[2] { 0x132, 0x36 }, new ushort[2] { 0x133, 0x36 }, new ushort[2] { 0x12C, 0x36 }, new ushort[2] { 0x12D, 0x36 }, new ushort[2] { 0x123, 0x36 }, new ushort[2] { 0x124, 0x36 }, new ushort[2] { 0x127, 0x36 }, new ushort[2] { 0x128, 0x36 }, new ushort[2] { 0x129, 0x36 } };

        private static ushort[] p_StateExpectedIDs_2E = { 0xDD };
        private static string[] p_StateExpectedNames_2E = { "_T[.]" };
        private static string[] p_StateItems_2E = { "[exp_op0_member_access -> type_predefined . . IDENTIFIER]" };
        private static ushort[][] p_StateShiftsOnTerminal_2E = { new ushort[2] { 0xDD, 0x8E } };
        private static ushort[][] p_StateShiftsOnVariable_2E = { };
        private static ushort[][] p_StateReducsOnTerminal_2E = { };

        private static ushort[] p_StateExpectedIDs_2F = { 0x105 };
        private static string[] p_StateExpectedNames_2F = { "_T[(]" };
        private static string[] p_StateItems_2F = { "[exp_op0_typeof -> typeof . ( type_return )]" };
        private static ushort[][] p_StateShiftsOnTerminal_2F = { new ushort[2] { 0x105, 0x8F } };
        private static ushort[][] p_StateShiftsOnVariable_2F = { };
        private static ushort[][] p_StateReducsOnTerminal_2F = { };

        private static ushort[] p_StateExpectedIDs_30 = { 0x105 };
        private static string[] p_StateExpectedNames_30 = { "_T[(]" };
        private static string[] p_StateItems_30 = { "[exp_op0_checked -> checked . ( expression )]" };
        private static ushort[][] p_StateShiftsOnTerminal_30 = { new ushort[2] { 0x105, 0x90 } };
        private static ushort[][] p_StateShiftsOnVariable_30 = { };
        private static ushort[][] p_StateReducsOnTerminal_30 = { };

        private static ushort[] p_StateExpectedIDs_31 = { 0x105 };
        private static string[] p_StateExpectedNames_31 = { "_T[(]" };
        private static string[] p_StateItems_31 = { "[exp_op0_unchecked -> unchecked . ( expression )]" };
        private static ushort[][] p_StateShiftsOnTerminal_31 = { new ushort[2] { 0x105, 0x91 } };
        private static ushort[][] p_StateShiftsOnVariable_31 = { };
        private static ushort[][] p_StateReducsOnTerminal_31 = { };

        private static ushort[] p_StateExpectedIDs_32 = { 0x2, 0x13B, 0x136, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x134, 0x135 };
        private static string[] p_StateExpectedNames_32 = { "$", "_T[?]", "_T[&]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[==]", "_T[!=]" };
        private static string[] p_StateItems_32 = { "[exp_op7 -> exp_op6 . ]", "[exp_op6 -> exp_op6 . == exp_op5]", "[exp_op6 -> exp_op6 . != exp_op5]" };
        private static ushort[][] p_StateShiftsOnTerminal_32 = { new ushort[2] { 0x134, 0x92 }, new ushort[2] { 0x135, 0x93 } };
        private static ushort[][] p_StateShiftsOnVariable_32 = { };
        private static ushort[][] p_StateReducsOnTerminal_32 = { new ushort[2] { 0x2, 0x74 }, new ushort[2] { 0x13B, 0x74 }, new ushort[2] { 0x136, 0x74 }, new ushort[2] { 0x106, 0x74 }, new ushort[2] { 0x13C, 0x74 }, new ushort[2] { 0xF0, 0x74 }, new ushort[2] { 0xF1, 0x74 }, new ushort[2] { 0x152, 0x74 }, new ushort[2] { 0x13A, 0x74 }, new ushort[2] { 0x139, 0x74 }, new ushort[2] { 0x138, 0x74 }, new ushort[2] { 0x137, 0x74 } };

        private static ushort[] p_StateExpectedIDs_33 = { 0xDD };
        private static string[] p_StateExpectedNames_33 = { "_T[.]" };
        private static string[] p_StateItems_33 = { "[type_predefined -> bool . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_33 = { };
        private static ushort[][] p_StateShiftsOnVariable_33 = { };
        private static ushort[][] p_StateReducsOnTerminal_33 = { new ushort[2] { 0xDD, 0x1A } };

        private static ushort[] p_StateExpectedIDs_34 = { 0xDD };
        private static string[] p_StateExpectedNames_34 = { "_T[.]" };
        private static string[] p_StateItems_34 = { "[type_predefined -> byte . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_34 = { };
        private static ushort[][] p_StateShiftsOnVariable_34 = { };
        private static ushort[][] p_StateReducsOnTerminal_34 = { new ushort[2] { 0xDD, 0x1B } };

        private static ushort[] p_StateExpectedIDs_35 = { 0xDD };
        private static string[] p_StateExpectedNames_35 = { "_T[.]" };
        private static string[] p_StateItems_35 = { "[type_predefined -> char . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_35 = { };
        private static ushort[][] p_StateShiftsOnVariable_35 = { };
        private static ushort[][] p_StateReducsOnTerminal_35 = { new ushort[2] { 0xDD, 0x1C } };

        private static ushort[] p_StateExpectedIDs_36 = { 0xDD };
        private static string[] p_StateExpectedNames_36 = { "_T[.]" };
        private static string[] p_StateItems_36 = { "[type_predefined -> decimal . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_36 = { };
        private static ushort[][] p_StateShiftsOnVariable_36 = { };
        private static ushort[][] p_StateReducsOnTerminal_36 = { new ushort[2] { 0xDD, 0x1D } };

        private static ushort[] p_StateExpectedIDs_37 = { 0xDD };
        private static string[] p_StateExpectedNames_37 = { "_T[.]" };
        private static string[] p_StateItems_37 = { "[type_predefined -> double . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_37 = { };
        private static ushort[][] p_StateShiftsOnVariable_37 = { };
        private static ushort[][] p_StateReducsOnTerminal_37 = { new ushort[2] { 0xDD, 0x1E } };

        private static ushort[] p_StateExpectedIDs_38 = { 0xDD };
        private static string[] p_StateExpectedNames_38 = { "_T[.]" };
        private static string[] p_StateItems_38 = { "[type_predefined -> float . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_38 = { };
        private static ushort[][] p_StateShiftsOnVariable_38 = { };
        private static ushort[][] p_StateReducsOnTerminal_38 = { new ushort[2] { 0xDD, 0x1F } };

        private static ushort[] p_StateExpectedIDs_39 = { 0xDD };
        private static string[] p_StateExpectedNames_39 = { "_T[.]" };
        private static string[] p_StateItems_39 = { "[type_predefined -> int . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_39 = { };
        private static ushort[][] p_StateShiftsOnVariable_39 = { };
        private static ushort[][] p_StateReducsOnTerminal_39 = { new ushort[2] { 0xDD, 0x20 } };

        private static ushort[] p_StateExpectedIDs_3A = { 0xDD };
        private static string[] p_StateExpectedNames_3A = { "_T[.]" };
        private static string[] p_StateItems_3A = { "[type_predefined -> long . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_3A = { };
        private static ushort[][] p_StateShiftsOnVariable_3A = { };
        private static ushort[][] p_StateReducsOnTerminal_3A = { new ushort[2] { 0xDD, 0x21 } };

        private static ushort[] p_StateExpectedIDs_3B = { 0xDD };
        private static string[] p_StateExpectedNames_3B = { "_T[.]" };
        private static string[] p_StateItems_3B = { "[type_predefined -> object . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_3B = { };
        private static ushort[][] p_StateShiftsOnVariable_3B = { };
        private static ushort[][] p_StateReducsOnTerminal_3B = { new ushort[2] { 0xDD, 0x22 } };

        private static ushort[] p_StateExpectedIDs_3C = { 0xDD };
        private static string[] p_StateExpectedNames_3C = { "_T[.]" };
        private static string[] p_StateItems_3C = { "[type_predefined -> sbyte . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_3C = { };
        private static ushort[][] p_StateShiftsOnVariable_3C = { };
        private static ushort[][] p_StateReducsOnTerminal_3C = { new ushort[2] { 0xDD, 0x23 } };

        private static ushort[] p_StateExpectedIDs_3D = { 0xDD };
        private static string[] p_StateExpectedNames_3D = { "_T[.]" };
        private static string[] p_StateItems_3D = { "[type_predefined -> short . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_3D = { };
        private static ushort[][] p_StateShiftsOnVariable_3D = { };
        private static ushort[][] p_StateReducsOnTerminal_3D = { new ushort[2] { 0xDD, 0x24 } };

        private static ushort[] p_StateExpectedIDs_3E = { 0xDD };
        private static string[] p_StateExpectedNames_3E = { "_T[.]" };
        private static string[] p_StateItems_3E = { "[type_predefined -> string . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_3E = { };
        private static ushort[][] p_StateShiftsOnVariable_3E = { };
        private static ushort[][] p_StateReducsOnTerminal_3E = { new ushort[2] { 0xDD, 0x25 } };

        private static ushort[] p_StateExpectedIDs_3F = { 0xDD };
        private static string[] p_StateExpectedNames_3F = { "_T[.]" };
        private static string[] p_StateItems_3F = { "[type_predefined -> uint . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_3F = { };
        private static ushort[][] p_StateShiftsOnVariable_3F = { };
        private static ushort[][] p_StateReducsOnTerminal_3F = { new ushort[2] { 0xDD, 0x26 } };

        private static ushort[] p_StateExpectedIDs_40 = { 0xDD };
        private static string[] p_StateExpectedNames_40 = { "_T[.]" };
        private static string[] p_StateItems_40 = { "[type_predefined -> ulong . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_40 = { };
        private static ushort[][] p_StateShiftsOnVariable_40 = { };
        private static ushort[][] p_StateReducsOnTerminal_40 = { new ushort[2] { 0xDD, 0x27 } };

        private static ushort[] p_StateExpectedIDs_41 = { 0xDD };
        private static string[] p_StateExpectedNames_41 = { "_T[.]" };
        private static string[] p_StateItems_41 = { "[type_predefined -> ushort . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_41 = { };
        private static ushort[][] p_StateShiftsOnVariable_41 = { };
        private static ushort[][] p_StateReducsOnTerminal_41 = { new ushort[2] { 0xDD, 0x28 } };

        private static ushort[] p_StateExpectedIDs_42 = { 0x2, 0x13B, 0x134, 0x135, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133 };
        private static string[] p_StateExpectedNames_42 = { "$", "_T[?]", "_T[==]", "_T[!=]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]" };
        private static string[] p_StateItems_42 = { "[exp_op6 -> exp_op5 . ]", "[exp_op5 -> exp_op5 . < exp_op4]", "[exp_op5 -> exp_op5 . <= exp_op4]", "[exp_op5 -> exp_op5 . > exp_op4]", "[exp_op5 -> exp_op5 . >= exp_op4]", "[exp_op5 -> exp_op5 . is exp_op4]", "[exp_op5 -> exp_op5 . as exp_op4]" };
        private static ushort[][] p_StateShiftsOnTerminal_42 = { new ushort[2] { 0x12E, 0x94 }, new ushort[2] { 0x12F, 0x95 }, new ushort[2] { 0x130, 0x96 }, new ushort[2] { 0x131, 0x97 }, new ushort[2] { 0x132, 0x98 }, new ushort[2] { 0x133, 0x99 } };
        private static ushort[][] p_StateShiftsOnVariable_42 = { };
        private static ushort[][] p_StateReducsOnTerminal_42 = { new ushort[2] { 0x2, 0x71 }, new ushort[2] { 0x13B, 0x71 }, new ushort[2] { 0x134, 0x71 }, new ushort[2] { 0x135, 0x71 }, new ushort[2] { 0x106, 0x71 }, new ushort[2] { 0x13C, 0x71 }, new ushort[2] { 0xF0, 0x71 }, new ushort[2] { 0xF1, 0x71 }, new ushort[2] { 0x152, 0x71 }, new ushort[2] { 0x13A, 0x71 }, new ushort[2] { 0x139, 0x71 }, new ushort[2] { 0x138, 0x71 }, new ushort[2] { 0x137, 0x71 }, new ushort[2] { 0x136, 0x71 } };

        private static ushort[] p_StateExpectedIDs_43 = { 0x2, 0x13B, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12C, 0x12D };
        private static string[] p_StateExpectedNames_43 = { "$", "_T[?]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<<]", "_T[>>]" };
        private static string[] p_StateItems_43 = { "[exp_op5 -> exp_op4 . ]", "[exp_op4 -> exp_op4 . << exp_op3]", "[exp_op4 -> exp_op4 . >> exp_op3]" };
        private static ushort[][] p_StateShiftsOnTerminal_43 = { new ushort[2] { 0x12C, 0x9A }, new ushort[2] { 0x12D, 0x9B } };
        private static ushort[][] p_StateShiftsOnVariable_43 = { };
        private static ushort[][] p_StateReducsOnTerminal_43 = { new ushort[2] { 0x2, 0x6A }, new ushort[2] { 0x13B, 0x6A }, new ushort[2] { 0x12E, 0x6A }, new ushort[2] { 0x12F, 0x6A }, new ushort[2] { 0x130, 0x6A }, new ushort[2] { 0x131, 0x6A }, new ushort[2] { 0x132, 0x6A }, new ushort[2] { 0x133, 0x6A }, new ushort[2] { 0x106, 0x6A }, new ushort[2] { 0x13C, 0x6A }, new ushort[2] { 0xF0, 0x6A }, new ushort[2] { 0xF1, 0x6A }, new ushort[2] { 0x152, 0x6A }, new ushort[2] { 0x13A, 0x6A }, new ushort[2] { 0x139, 0x6A }, new ushort[2] { 0x138, 0x6A }, new ushort[2] { 0x137, 0x6A }, new ushort[2] { 0x136, 0x6A }, new ushort[2] { 0x134, 0x6A }, new ushort[2] { 0x135, 0x6A } };

        private static ushort[] p_StateExpectedIDs_44 = { 0x2, 0x13B, 0x12C, 0x12D, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x123, 0x124 };
        private static string[] p_StateExpectedNames_44 = { "$", "_T[?]", "_T[<<]", "_T[>>]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[+]", "_T[-]" };
        private static string[] p_StateItems_44 = { "[exp_op4 -> exp_op3 . ]", "[exp_op3 -> exp_op3 . + exp_op2]", "[exp_op3 -> exp_op3 . - exp_op2]" };
        private static ushort[][] p_StateShiftsOnTerminal_44 = { new ushort[2] { 0x123, 0x9C }, new ushort[2] { 0x124, 0x9D } };
        private static ushort[][] p_StateShiftsOnVariable_44 = { };
        private static ushort[][] p_StateReducsOnTerminal_44 = { new ushort[2] { 0x2, 0x67 }, new ushort[2] { 0x13B, 0x67 }, new ushort[2] { 0x12C, 0x67 }, new ushort[2] { 0x12D, 0x67 }, new ushort[2] { 0x106, 0x67 }, new ushort[2] { 0x13C, 0x67 }, new ushort[2] { 0xF0, 0x67 }, new ushort[2] { 0xF1, 0x67 }, new ushort[2] { 0x152, 0x67 }, new ushort[2] { 0x13A, 0x67 }, new ushort[2] { 0x139, 0x67 }, new ushort[2] { 0x138, 0x67 }, new ushort[2] { 0x137, 0x67 }, new ushort[2] { 0x136, 0x67 }, new ushort[2] { 0x134, 0x67 }, new ushort[2] { 0x135, 0x67 }, new ushort[2] { 0x12E, 0x67 }, new ushort[2] { 0x12F, 0x67 }, new ushort[2] { 0x130, 0x67 }, new ushort[2] { 0x131, 0x67 }, new ushort[2] { 0x132, 0x67 }, new ushort[2] { 0x133, 0x67 } };

        private static ushort[] p_StateExpectedIDs_45 = { 0x2, 0x13B, 0x123, 0x124, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_45 = { "$", "_T[?]", "_T[+]", "_T[-]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_45 = { "[exp_op3 -> exp_op2 . ]", "[exp_op2 -> exp_op2 . * exp_op1]", "[exp_op2 -> exp_op2 . / exp_op1]", "[exp_op2 -> exp_op2 . % exp_op1]" };
        private static ushort[][] p_StateShiftsOnTerminal_45 = { new ushort[2] { 0x127, 0x9E }, new ushort[2] { 0x128, 0x9F }, new ushort[2] { 0x129, 0xA0 } };
        private static ushort[][] p_StateShiftsOnVariable_45 = { };
        private static ushort[][] p_StateReducsOnTerminal_45 = { new ushort[2] { 0x2, 0x64 }, new ushort[2] { 0x13B, 0x64 }, new ushort[2] { 0x123, 0x64 }, new ushort[2] { 0x124, 0x64 }, new ushort[2] { 0x106, 0x64 }, new ushort[2] { 0x13C, 0x64 }, new ushort[2] { 0xF0, 0x64 }, new ushort[2] { 0xF1, 0x64 }, new ushort[2] { 0x152, 0x64 }, new ushort[2] { 0x13A, 0x64 }, new ushort[2] { 0x139, 0x64 }, new ushort[2] { 0x138, 0x64 }, new ushort[2] { 0x137, 0x64 }, new ushort[2] { 0x136, 0x64 }, new ushort[2] { 0x134, 0x64 }, new ushort[2] { 0x135, 0x64 }, new ushort[2] { 0x12E, 0x64 }, new ushort[2] { 0x12F, 0x64 }, new ushort[2] { 0x130, 0x64 }, new ushort[2] { 0x131, 0x64 }, new ushort[2] { 0x132, 0x64 }, new ushort[2] { 0x133, 0x64 }, new ushort[2] { 0x12C, 0x64 }, new ushort[2] { 0x12D, 0x64 } };

        private static ushort[] p_StateExpectedIDs_46 = { 0x1 };
        private static string[] p_StateExpectedNames_46 = { "ε" };
        private static string[] p_StateItems_46 = { "[_Axiom_ -> compilation_unit $ . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_46 = { };
        private static ushort[][] p_StateShiftsOnVariable_46 = { };
        private static ushort[][] p_StateReducsOnTerminal_46 = { new ushort[2] { 0x1, 0x25E } };

        private static ushort[] p_StateExpectedIDs_47 = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_47 = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_47 = { "[exp_op12_conditional -> exp_op11 ? . expression : expression]", "[expression -> . exp_op12_conditional]", "[expression -> . exp_op13_assigment]", "[exp_op12_conditional -> . exp_op11]", "[exp_op12_conditional -> . exp_op11 ? expression : expression]", "[exp_op13_assigment -> . exp_op1 = expression]", "[exp_op13_assigment -> . exp_op1 += expression]", "[exp_op13_assigment -> . exp_op1 -= expression]", "[exp_op13_assigment -> . exp_op1 *= expression]", "[exp_op13_assigment -> . exp_op1 /= expression]", "[exp_op13_assigment -> . exp_op1 %= expression]", "[exp_op13_assigment -> . exp_op1 &= expression]", "[exp_op13_assigment -> . exp_op1 |= expression]", "[exp_op13_assigment -> . exp_op1 ^= expression]", "[exp_op13_assigment -> . exp_op1 <<= expression]", "[exp_op13_assigment -> . exp_op1 >>= expression]", "[exp_op11 -> . exp_op10]", "[exp_op11 -> . exp_op11 || exp_op10]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op10 -> . exp_op9]", "[exp_op10 -> . exp_op10 && exp_op9]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op9 -> . exp_op8]", "[exp_op9 -> . exp_op9 | exp_op8]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_op8 -> . exp_op7]", "[exp_op8 -> . exp_op8 ^ exp_op7]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[exp_op7 -> . exp_op6]", "[exp_op7 -> . exp_op7 & exp_op6]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]", "[exp_op6 -> . exp_op5]", "[exp_op6 -> . exp_op6 == exp_op5]", "[exp_op6 -> . exp_op6 != exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]" };
        private static ushort[][] p_StateShiftsOnTerminal_47 = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_47 = { new ushort[2] { 0x3D, 0xA1 }, new ushort[2] { 0x3B, 0x3 }, new ushort[2] { 0x3C, 0x4 }, new ushort[2] { 0x3A, 0x5 }, new ushort[2] { 0x30, 0x6 }, new ushort[2] { 0x39, 0x7 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x38, 0x10 }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x37, 0x16 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x36, 0x21 }, new ushort[2] { 0x1E, 0x2E }, new ushort[2] { 0x35, 0x32 }, new ushort[2] { 0x34, 0x42 }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 } };
        private static ushort[][] p_StateReducsOnTerminal_47 = { };

        private static ushort[] p_StateExpectedIDs_48 = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_48 = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_48 = { "[exp_op11 -> exp_op11 || . exp_op10]", "[exp_op10 -> . exp_op9]", "[exp_op10 -> . exp_op10 && exp_op9]", "[exp_op9 -> . exp_op8]", "[exp_op9 -> . exp_op9 | exp_op8]", "[exp_op8 -> . exp_op7]", "[exp_op8 -> . exp_op8 ^ exp_op7]", "[exp_op7 -> . exp_op6]", "[exp_op7 -> . exp_op7 & exp_op6]", "[exp_op6 -> . exp_op5]", "[exp_op6 -> . exp_op6 == exp_op5]", "[exp_op6 -> . exp_op6 != exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]" };
        private static ushort[][] p_StateShiftsOnTerminal_48 = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_48 = { new ushort[2] { 0x39, 0xA2 }, new ushort[2] { 0x38, 0x10 }, new ushort[2] { 0x37, 0x16 }, new ushort[2] { 0x36, 0x21 }, new ushort[2] { 0x35, 0x32 }, new ushort[2] { 0x34, 0x42 }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 }, new ushort[2] { 0x30, 0xA3 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x1E, 0x2E } };
        private static ushort[][] p_StateReducsOnTerminal_48 = { };

        private static ushort[] p_StateExpectedIDs_49 = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_49 = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_49 = { "[exp_op13_assigment -> exp_op1 = . expression]", "[expression -> . exp_op12_conditional]", "[expression -> . exp_op13_assigment]", "[exp_op12_conditional -> . exp_op11]", "[exp_op12_conditional -> . exp_op11 ? expression : expression]", "[exp_op13_assigment -> . exp_op1 = expression]", "[exp_op13_assigment -> . exp_op1 += expression]", "[exp_op13_assigment -> . exp_op1 -= expression]", "[exp_op13_assigment -> . exp_op1 *= expression]", "[exp_op13_assigment -> . exp_op1 /= expression]", "[exp_op13_assigment -> . exp_op1 %= expression]", "[exp_op13_assigment -> . exp_op1 &= expression]", "[exp_op13_assigment -> . exp_op1 |= expression]", "[exp_op13_assigment -> . exp_op1 ^= expression]", "[exp_op13_assigment -> . exp_op1 <<= expression]", "[exp_op13_assigment -> . exp_op1 >>= expression]", "[exp_op11 -> . exp_op10]", "[exp_op11 -> . exp_op11 || exp_op10]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op10 -> . exp_op9]", "[exp_op10 -> . exp_op10 && exp_op9]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op9 -> . exp_op8]", "[exp_op9 -> . exp_op9 | exp_op8]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_op8 -> . exp_op7]", "[exp_op8 -> . exp_op8 ^ exp_op7]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[exp_op7 -> . exp_op6]", "[exp_op7 -> . exp_op7 & exp_op6]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]", "[exp_op6 -> . exp_op5]", "[exp_op6 -> . exp_op6 == exp_op5]", "[exp_op6 -> . exp_op6 != exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]" };
        private static ushort[][] p_StateShiftsOnTerminal_49 = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_49 = { new ushort[2] { 0x3D, 0xA4 }, new ushort[2] { 0x3B, 0x3 }, new ushort[2] { 0x3C, 0x4 }, new ushort[2] { 0x3A, 0x5 }, new ushort[2] { 0x30, 0x6 }, new ushort[2] { 0x39, 0x7 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x38, 0x10 }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x37, 0x16 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x36, 0x21 }, new ushort[2] { 0x1E, 0x2E }, new ushort[2] { 0x35, 0x32 }, new ushort[2] { 0x34, 0x42 }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 } };
        private static ushort[][] p_StateReducsOnTerminal_49 = { };

        private static ushort[] p_StateExpectedIDs_4A = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_4A = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_4A = { "[exp_op13_assigment -> exp_op1 += . expression]", "[expression -> . exp_op12_conditional]", "[expression -> . exp_op13_assigment]", "[exp_op12_conditional -> . exp_op11]", "[exp_op12_conditional -> . exp_op11 ? expression : expression]", "[exp_op13_assigment -> . exp_op1 = expression]", "[exp_op13_assigment -> . exp_op1 += expression]", "[exp_op13_assigment -> . exp_op1 -= expression]", "[exp_op13_assigment -> . exp_op1 *= expression]", "[exp_op13_assigment -> . exp_op1 /= expression]", "[exp_op13_assigment -> . exp_op1 %= expression]", "[exp_op13_assigment -> . exp_op1 &= expression]", "[exp_op13_assigment -> . exp_op1 |= expression]", "[exp_op13_assigment -> . exp_op1 ^= expression]", "[exp_op13_assigment -> . exp_op1 <<= expression]", "[exp_op13_assigment -> . exp_op1 >>= expression]", "[exp_op11 -> . exp_op10]", "[exp_op11 -> . exp_op11 || exp_op10]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op10 -> . exp_op9]", "[exp_op10 -> . exp_op10 && exp_op9]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op9 -> . exp_op8]", "[exp_op9 -> . exp_op9 | exp_op8]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_op8 -> . exp_op7]", "[exp_op8 -> . exp_op8 ^ exp_op7]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[exp_op7 -> . exp_op6]", "[exp_op7 -> . exp_op7 & exp_op6]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]", "[exp_op6 -> . exp_op5]", "[exp_op6 -> . exp_op6 == exp_op5]", "[exp_op6 -> . exp_op6 != exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]" };
        private static ushort[][] p_StateShiftsOnTerminal_4A = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_4A = { new ushort[2] { 0x3D, 0xA5 }, new ushort[2] { 0x3B, 0x3 }, new ushort[2] { 0x3C, 0x4 }, new ushort[2] { 0x3A, 0x5 }, new ushort[2] { 0x30, 0x6 }, new ushort[2] { 0x39, 0x7 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x38, 0x10 }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x37, 0x16 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x36, 0x21 }, new ushort[2] { 0x1E, 0x2E }, new ushort[2] { 0x35, 0x32 }, new ushort[2] { 0x34, 0x42 }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 } };
        private static ushort[][] p_StateReducsOnTerminal_4A = { };

        private static ushort[] p_StateExpectedIDs_4B = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_4B = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_4B = { "[exp_op13_assigment -> exp_op1 -= . expression]", "[expression -> . exp_op12_conditional]", "[expression -> . exp_op13_assigment]", "[exp_op12_conditional -> . exp_op11]", "[exp_op12_conditional -> . exp_op11 ? expression : expression]", "[exp_op13_assigment -> . exp_op1 = expression]", "[exp_op13_assigment -> . exp_op1 += expression]", "[exp_op13_assigment -> . exp_op1 -= expression]", "[exp_op13_assigment -> . exp_op1 *= expression]", "[exp_op13_assigment -> . exp_op1 /= expression]", "[exp_op13_assigment -> . exp_op1 %= expression]", "[exp_op13_assigment -> . exp_op1 &= expression]", "[exp_op13_assigment -> . exp_op1 |= expression]", "[exp_op13_assigment -> . exp_op1 ^= expression]", "[exp_op13_assigment -> . exp_op1 <<= expression]", "[exp_op13_assigment -> . exp_op1 >>= expression]", "[exp_op11 -> . exp_op10]", "[exp_op11 -> . exp_op11 || exp_op10]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op10 -> . exp_op9]", "[exp_op10 -> . exp_op10 && exp_op9]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op9 -> . exp_op8]", "[exp_op9 -> . exp_op9 | exp_op8]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_op8 -> . exp_op7]", "[exp_op8 -> . exp_op8 ^ exp_op7]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[exp_op7 -> . exp_op6]", "[exp_op7 -> . exp_op7 & exp_op6]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]", "[exp_op6 -> . exp_op5]", "[exp_op6 -> . exp_op6 == exp_op5]", "[exp_op6 -> . exp_op6 != exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]" };
        private static ushort[][] p_StateShiftsOnTerminal_4B = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_4B = { new ushort[2] { 0x3D, 0xA6 }, new ushort[2] { 0x3B, 0x3 }, new ushort[2] { 0x3C, 0x4 }, new ushort[2] { 0x3A, 0x5 }, new ushort[2] { 0x30, 0x6 }, new ushort[2] { 0x39, 0x7 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x38, 0x10 }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x37, 0x16 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x36, 0x21 }, new ushort[2] { 0x1E, 0x2E }, new ushort[2] { 0x35, 0x32 }, new ushort[2] { 0x34, 0x42 }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 } };
        private static ushort[][] p_StateReducsOnTerminal_4B = { };

        private static ushort[] p_StateExpectedIDs_4C = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_4C = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_4C = { "[exp_op13_assigment -> exp_op1 *= . expression]", "[expression -> . exp_op12_conditional]", "[expression -> . exp_op13_assigment]", "[exp_op12_conditional -> . exp_op11]", "[exp_op12_conditional -> . exp_op11 ? expression : expression]", "[exp_op13_assigment -> . exp_op1 = expression]", "[exp_op13_assigment -> . exp_op1 += expression]", "[exp_op13_assigment -> . exp_op1 -= expression]", "[exp_op13_assigment -> . exp_op1 *= expression]", "[exp_op13_assigment -> . exp_op1 /= expression]", "[exp_op13_assigment -> . exp_op1 %= expression]", "[exp_op13_assigment -> . exp_op1 &= expression]", "[exp_op13_assigment -> . exp_op1 |= expression]", "[exp_op13_assigment -> . exp_op1 ^= expression]", "[exp_op13_assigment -> . exp_op1 <<= expression]", "[exp_op13_assigment -> . exp_op1 >>= expression]", "[exp_op11 -> . exp_op10]", "[exp_op11 -> . exp_op11 || exp_op10]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op10 -> . exp_op9]", "[exp_op10 -> . exp_op10 && exp_op9]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op9 -> . exp_op8]", "[exp_op9 -> . exp_op9 | exp_op8]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_op8 -> . exp_op7]", "[exp_op8 -> . exp_op8 ^ exp_op7]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[exp_op7 -> . exp_op6]", "[exp_op7 -> . exp_op7 & exp_op6]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]", "[exp_op6 -> . exp_op5]", "[exp_op6 -> . exp_op6 == exp_op5]", "[exp_op6 -> . exp_op6 != exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]" };
        private static ushort[][] p_StateShiftsOnTerminal_4C = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_4C = { new ushort[2] { 0x3D, 0xA7 }, new ushort[2] { 0x3B, 0x3 }, new ushort[2] { 0x3C, 0x4 }, new ushort[2] { 0x3A, 0x5 }, new ushort[2] { 0x30, 0x6 }, new ushort[2] { 0x39, 0x7 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x38, 0x10 }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x37, 0x16 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x36, 0x21 }, new ushort[2] { 0x1E, 0x2E }, new ushort[2] { 0x35, 0x32 }, new ushort[2] { 0x34, 0x42 }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 } };
        private static ushort[][] p_StateReducsOnTerminal_4C = { };

        private static ushort[] p_StateExpectedIDs_4D = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_4D = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_4D = { "[exp_op13_assigment -> exp_op1 /= . expression]", "[expression -> . exp_op12_conditional]", "[expression -> . exp_op13_assigment]", "[exp_op12_conditional -> . exp_op11]", "[exp_op12_conditional -> . exp_op11 ? expression : expression]", "[exp_op13_assigment -> . exp_op1 = expression]", "[exp_op13_assigment -> . exp_op1 += expression]", "[exp_op13_assigment -> . exp_op1 -= expression]", "[exp_op13_assigment -> . exp_op1 *= expression]", "[exp_op13_assigment -> . exp_op1 /= expression]", "[exp_op13_assigment -> . exp_op1 %= expression]", "[exp_op13_assigment -> . exp_op1 &= expression]", "[exp_op13_assigment -> . exp_op1 |= expression]", "[exp_op13_assigment -> . exp_op1 ^= expression]", "[exp_op13_assigment -> . exp_op1 <<= expression]", "[exp_op13_assigment -> . exp_op1 >>= expression]", "[exp_op11 -> . exp_op10]", "[exp_op11 -> . exp_op11 || exp_op10]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op10 -> . exp_op9]", "[exp_op10 -> . exp_op10 && exp_op9]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op9 -> . exp_op8]", "[exp_op9 -> . exp_op9 | exp_op8]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_op8 -> . exp_op7]", "[exp_op8 -> . exp_op8 ^ exp_op7]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[exp_op7 -> . exp_op6]", "[exp_op7 -> . exp_op7 & exp_op6]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]", "[exp_op6 -> . exp_op5]", "[exp_op6 -> . exp_op6 == exp_op5]", "[exp_op6 -> . exp_op6 != exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]" };
        private static ushort[][] p_StateShiftsOnTerminal_4D = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_4D = { new ushort[2] { 0x3D, 0xA8 }, new ushort[2] { 0x3B, 0x3 }, new ushort[2] { 0x3C, 0x4 }, new ushort[2] { 0x3A, 0x5 }, new ushort[2] { 0x30, 0x6 }, new ushort[2] { 0x39, 0x7 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x38, 0x10 }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x37, 0x16 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x36, 0x21 }, new ushort[2] { 0x1E, 0x2E }, new ushort[2] { 0x35, 0x32 }, new ushort[2] { 0x34, 0x42 }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 } };
        private static ushort[][] p_StateReducsOnTerminal_4D = { };

        private static ushort[] p_StateExpectedIDs_4E = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_4E = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_4E = { "[exp_op13_assigment -> exp_op1 %= . expression]", "[expression -> . exp_op12_conditional]", "[expression -> . exp_op13_assigment]", "[exp_op12_conditional -> . exp_op11]", "[exp_op12_conditional -> . exp_op11 ? expression : expression]", "[exp_op13_assigment -> . exp_op1 = expression]", "[exp_op13_assigment -> . exp_op1 += expression]", "[exp_op13_assigment -> . exp_op1 -= expression]", "[exp_op13_assigment -> . exp_op1 *= expression]", "[exp_op13_assigment -> . exp_op1 /= expression]", "[exp_op13_assigment -> . exp_op1 %= expression]", "[exp_op13_assigment -> . exp_op1 &= expression]", "[exp_op13_assigment -> . exp_op1 |= expression]", "[exp_op13_assigment -> . exp_op1 ^= expression]", "[exp_op13_assigment -> . exp_op1 <<= expression]", "[exp_op13_assigment -> . exp_op1 >>= expression]", "[exp_op11 -> . exp_op10]", "[exp_op11 -> . exp_op11 || exp_op10]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op10 -> . exp_op9]", "[exp_op10 -> . exp_op10 && exp_op9]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op9 -> . exp_op8]", "[exp_op9 -> . exp_op9 | exp_op8]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_op8 -> . exp_op7]", "[exp_op8 -> . exp_op8 ^ exp_op7]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[exp_op7 -> . exp_op6]", "[exp_op7 -> . exp_op7 & exp_op6]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]", "[exp_op6 -> . exp_op5]", "[exp_op6 -> . exp_op6 == exp_op5]", "[exp_op6 -> . exp_op6 != exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]" };
        private static ushort[][] p_StateShiftsOnTerminal_4E = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_4E = { new ushort[2] { 0x3D, 0xA9 }, new ushort[2] { 0x3B, 0x3 }, new ushort[2] { 0x3C, 0x4 }, new ushort[2] { 0x3A, 0x5 }, new ushort[2] { 0x30, 0x6 }, new ushort[2] { 0x39, 0x7 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x38, 0x10 }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x37, 0x16 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x36, 0x21 }, new ushort[2] { 0x1E, 0x2E }, new ushort[2] { 0x35, 0x32 }, new ushort[2] { 0x34, 0x42 }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 } };
        private static ushort[][] p_StateReducsOnTerminal_4E = { };

        private static ushort[] p_StateExpectedIDs_4F = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_4F = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_4F = { "[exp_op13_assigment -> exp_op1 &= . expression]", "[expression -> . exp_op12_conditional]", "[expression -> . exp_op13_assigment]", "[exp_op12_conditional -> . exp_op11]", "[exp_op12_conditional -> . exp_op11 ? expression : expression]", "[exp_op13_assigment -> . exp_op1 = expression]", "[exp_op13_assigment -> . exp_op1 += expression]", "[exp_op13_assigment -> . exp_op1 -= expression]", "[exp_op13_assigment -> . exp_op1 *= expression]", "[exp_op13_assigment -> . exp_op1 /= expression]", "[exp_op13_assigment -> . exp_op1 %= expression]", "[exp_op13_assigment -> . exp_op1 &= expression]", "[exp_op13_assigment -> . exp_op1 |= expression]", "[exp_op13_assigment -> . exp_op1 ^= expression]", "[exp_op13_assigment -> . exp_op1 <<= expression]", "[exp_op13_assigment -> . exp_op1 >>= expression]", "[exp_op11 -> . exp_op10]", "[exp_op11 -> . exp_op11 || exp_op10]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op10 -> . exp_op9]", "[exp_op10 -> . exp_op10 && exp_op9]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op9 -> . exp_op8]", "[exp_op9 -> . exp_op9 | exp_op8]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_op8 -> . exp_op7]", "[exp_op8 -> . exp_op8 ^ exp_op7]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[exp_op7 -> . exp_op6]", "[exp_op7 -> . exp_op7 & exp_op6]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]", "[exp_op6 -> . exp_op5]", "[exp_op6 -> . exp_op6 == exp_op5]", "[exp_op6 -> . exp_op6 != exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]" };
        private static ushort[][] p_StateShiftsOnTerminal_4F = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_4F = { new ushort[2] { 0x3D, 0xAA }, new ushort[2] { 0x3B, 0x3 }, new ushort[2] { 0x3C, 0x4 }, new ushort[2] { 0x3A, 0x5 }, new ushort[2] { 0x30, 0x6 }, new ushort[2] { 0x39, 0x7 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x38, 0x10 }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x37, 0x16 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x36, 0x21 }, new ushort[2] { 0x1E, 0x2E }, new ushort[2] { 0x35, 0x32 }, new ushort[2] { 0x34, 0x42 }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 } };
        private static ushort[][] p_StateReducsOnTerminal_4F = { };

        private static ushort[] p_StateExpectedIDs_50 = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_50 = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_50 = { "[exp_op13_assigment -> exp_op1 |= . expression]", "[expression -> . exp_op12_conditional]", "[expression -> . exp_op13_assigment]", "[exp_op12_conditional -> . exp_op11]", "[exp_op12_conditional -> . exp_op11 ? expression : expression]", "[exp_op13_assigment -> . exp_op1 = expression]", "[exp_op13_assigment -> . exp_op1 += expression]", "[exp_op13_assigment -> . exp_op1 -= expression]", "[exp_op13_assigment -> . exp_op1 *= expression]", "[exp_op13_assigment -> . exp_op1 /= expression]", "[exp_op13_assigment -> . exp_op1 %= expression]", "[exp_op13_assigment -> . exp_op1 &= expression]", "[exp_op13_assigment -> . exp_op1 |= expression]", "[exp_op13_assigment -> . exp_op1 ^= expression]", "[exp_op13_assigment -> . exp_op1 <<= expression]", "[exp_op13_assigment -> . exp_op1 >>= expression]", "[exp_op11 -> . exp_op10]", "[exp_op11 -> . exp_op11 || exp_op10]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op10 -> . exp_op9]", "[exp_op10 -> . exp_op10 && exp_op9]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op9 -> . exp_op8]", "[exp_op9 -> . exp_op9 | exp_op8]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_op8 -> . exp_op7]", "[exp_op8 -> . exp_op8 ^ exp_op7]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[exp_op7 -> . exp_op6]", "[exp_op7 -> . exp_op7 & exp_op6]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]", "[exp_op6 -> . exp_op5]", "[exp_op6 -> . exp_op6 == exp_op5]", "[exp_op6 -> . exp_op6 != exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]" };
        private static ushort[][] p_StateShiftsOnTerminal_50 = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_50 = { new ushort[2] { 0x3D, 0xAB }, new ushort[2] { 0x3B, 0x3 }, new ushort[2] { 0x3C, 0x4 }, new ushort[2] { 0x3A, 0x5 }, new ushort[2] { 0x30, 0x6 }, new ushort[2] { 0x39, 0x7 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x38, 0x10 }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x37, 0x16 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x36, 0x21 }, new ushort[2] { 0x1E, 0x2E }, new ushort[2] { 0x35, 0x32 }, new ushort[2] { 0x34, 0x42 }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 } };
        private static ushort[][] p_StateReducsOnTerminal_50 = { };

        private static ushort[] p_StateExpectedIDs_51 = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_51 = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_51 = { "[exp_op13_assigment -> exp_op1 ^= . expression]", "[expression -> . exp_op12_conditional]", "[expression -> . exp_op13_assigment]", "[exp_op12_conditional -> . exp_op11]", "[exp_op12_conditional -> . exp_op11 ? expression : expression]", "[exp_op13_assigment -> . exp_op1 = expression]", "[exp_op13_assigment -> . exp_op1 += expression]", "[exp_op13_assigment -> . exp_op1 -= expression]", "[exp_op13_assigment -> . exp_op1 *= expression]", "[exp_op13_assigment -> . exp_op1 /= expression]", "[exp_op13_assigment -> . exp_op1 %= expression]", "[exp_op13_assigment -> . exp_op1 &= expression]", "[exp_op13_assigment -> . exp_op1 |= expression]", "[exp_op13_assigment -> . exp_op1 ^= expression]", "[exp_op13_assigment -> . exp_op1 <<= expression]", "[exp_op13_assigment -> . exp_op1 >>= expression]", "[exp_op11 -> . exp_op10]", "[exp_op11 -> . exp_op11 || exp_op10]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op10 -> . exp_op9]", "[exp_op10 -> . exp_op10 && exp_op9]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op9 -> . exp_op8]", "[exp_op9 -> . exp_op9 | exp_op8]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_op8 -> . exp_op7]", "[exp_op8 -> . exp_op8 ^ exp_op7]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[exp_op7 -> . exp_op6]", "[exp_op7 -> . exp_op7 & exp_op6]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]", "[exp_op6 -> . exp_op5]", "[exp_op6 -> . exp_op6 == exp_op5]", "[exp_op6 -> . exp_op6 != exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]" };
        private static ushort[][] p_StateShiftsOnTerminal_51 = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_51 = { new ushort[2] { 0x3D, 0xAC }, new ushort[2] { 0x3B, 0x3 }, new ushort[2] { 0x3C, 0x4 }, new ushort[2] { 0x3A, 0x5 }, new ushort[2] { 0x30, 0x6 }, new ushort[2] { 0x39, 0x7 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x38, 0x10 }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x37, 0x16 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x36, 0x21 }, new ushort[2] { 0x1E, 0x2E }, new ushort[2] { 0x35, 0x32 }, new ushort[2] { 0x34, 0x42 }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 } };
        private static ushort[][] p_StateReducsOnTerminal_51 = { };

        private static ushort[] p_StateExpectedIDs_52 = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_52 = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_52 = { "[exp_op13_assigment -> exp_op1 <<= . expression]", "[expression -> . exp_op12_conditional]", "[expression -> . exp_op13_assigment]", "[exp_op12_conditional -> . exp_op11]", "[exp_op12_conditional -> . exp_op11 ? expression : expression]", "[exp_op13_assigment -> . exp_op1 = expression]", "[exp_op13_assigment -> . exp_op1 += expression]", "[exp_op13_assigment -> . exp_op1 -= expression]", "[exp_op13_assigment -> . exp_op1 *= expression]", "[exp_op13_assigment -> . exp_op1 /= expression]", "[exp_op13_assigment -> . exp_op1 %= expression]", "[exp_op13_assigment -> . exp_op1 &= expression]", "[exp_op13_assigment -> . exp_op1 |= expression]", "[exp_op13_assigment -> . exp_op1 ^= expression]", "[exp_op13_assigment -> . exp_op1 <<= expression]", "[exp_op13_assigment -> . exp_op1 >>= expression]", "[exp_op11 -> . exp_op10]", "[exp_op11 -> . exp_op11 || exp_op10]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op10 -> . exp_op9]", "[exp_op10 -> . exp_op10 && exp_op9]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op9 -> . exp_op8]", "[exp_op9 -> . exp_op9 | exp_op8]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_op8 -> . exp_op7]", "[exp_op8 -> . exp_op8 ^ exp_op7]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[exp_op7 -> . exp_op6]", "[exp_op7 -> . exp_op7 & exp_op6]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]", "[exp_op6 -> . exp_op5]", "[exp_op6 -> . exp_op6 == exp_op5]", "[exp_op6 -> . exp_op6 != exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]" };
        private static ushort[][] p_StateShiftsOnTerminal_52 = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_52 = { new ushort[2] { 0x3D, 0xAD }, new ushort[2] { 0x3B, 0x3 }, new ushort[2] { 0x3C, 0x4 }, new ushort[2] { 0x3A, 0x5 }, new ushort[2] { 0x30, 0x6 }, new ushort[2] { 0x39, 0x7 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x38, 0x10 }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x37, 0x16 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x36, 0x21 }, new ushort[2] { 0x1E, 0x2E }, new ushort[2] { 0x35, 0x32 }, new ushort[2] { 0x34, 0x42 }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 } };
        private static ushort[][] p_StateReducsOnTerminal_52 = { };

        private static ushort[] p_StateExpectedIDs_53 = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_53 = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_53 = { "[exp_op13_assigment -> exp_op1 >>= . expression]", "[expression -> . exp_op12_conditional]", "[expression -> . exp_op13_assigment]", "[exp_op12_conditional -> . exp_op11]", "[exp_op12_conditional -> . exp_op11 ? expression : expression]", "[exp_op13_assigment -> . exp_op1 = expression]", "[exp_op13_assigment -> . exp_op1 += expression]", "[exp_op13_assigment -> . exp_op1 -= expression]", "[exp_op13_assigment -> . exp_op1 *= expression]", "[exp_op13_assigment -> . exp_op1 /= expression]", "[exp_op13_assigment -> . exp_op1 %= expression]", "[exp_op13_assigment -> . exp_op1 &= expression]", "[exp_op13_assigment -> . exp_op1 |= expression]", "[exp_op13_assigment -> . exp_op1 ^= expression]", "[exp_op13_assigment -> . exp_op1 <<= expression]", "[exp_op13_assigment -> . exp_op1 >>= expression]", "[exp_op11 -> . exp_op10]", "[exp_op11 -> . exp_op11 || exp_op10]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op10 -> . exp_op9]", "[exp_op10 -> . exp_op10 && exp_op9]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op9 -> . exp_op8]", "[exp_op9 -> . exp_op9 | exp_op8]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_op8 -> . exp_op7]", "[exp_op8 -> . exp_op8 ^ exp_op7]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[exp_op7 -> . exp_op6]", "[exp_op7 -> . exp_op7 & exp_op6]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]", "[exp_op6 -> . exp_op5]", "[exp_op6 -> . exp_op6 == exp_op5]", "[exp_op6 -> . exp_op6 != exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]" };
        private static ushort[][] p_StateShiftsOnTerminal_53 = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_53 = { new ushort[2] { 0x3D, 0xAE }, new ushort[2] { 0x3B, 0x3 }, new ushort[2] { 0x3C, 0x4 }, new ushort[2] { 0x3A, 0x5 }, new ushort[2] { 0x30, 0x6 }, new ushort[2] { 0x39, 0x7 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x38, 0x10 }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x37, 0x16 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x36, 0x21 }, new ushort[2] { 0x1E, 0x2E }, new ushort[2] { 0x35, 0x32 }, new ushort[2] { 0x34, 0x42 }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 } };
        private static ushort[][] p_StateReducsOnTerminal_53 = { };

        private static ushort[] p_StateExpectedIDs_54 = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_54 = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_54 = { "[exp_op10 -> exp_op10 && . exp_op9]", "[exp_op9 -> . exp_op8]", "[exp_op9 -> . exp_op9 | exp_op8]", "[exp_op8 -> . exp_op7]", "[exp_op8 -> . exp_op8 ^ exp_op7]", "[exp_op7 -> . exp_op6]", "[exp_op7 -> . exp_op7 & exp_op6]", "[exp_op6 -> . exp_op5]", "[exp_op6 -> . exp_op6 == exp_op5]", "[exp_op6 -> . exp_op6 != exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]" };
        private static ushort[][] p_StateShiftsOnTerminal_54 = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_54 = { new ushort[2] { 0x38, 0xAF }, new ushort[2] { 0x37, 0x16 }, new ushort[2] { 0x36, 0x21 }, new ushort[2] { 0x35, 0x32 }, new ushort[2] { 0x34, 0x42 }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 }, new ushort[2] { 0x30, 0xA3 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x1E, 0x2E } };
        private static ushort[][] p_StateReducsOnTerminal_54 = { };

        private static ushort[] p_StateExpectedIDs_55 = { 0x106, 0x14A, 0x14B, 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_55 = { "_T[)]", "_T[ref]", "_T[out]", "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_55 = { "[exp_op0_invoke -> exp_op0 ( . exp_argument_list )]", "[exp_op0_invoke -> exp_op0 ( . )]", "[exp_argument_list -> . exp_argument]", "[exp_argument_list -> . exp_argument_list , exp_argument]", "[exp_argument -> . expression]", "[exp_argument -> . ref expression]", "[exp_argument -> . out expression]", "[expression -> . exp_op12_conditional]", "[expression -> . exp_op13_assigment]", "[exp_op12_conditional -> . exp_op11]", "[exp_op12_conditional -> . exp_op11 ? expression : expression]", "[exp_op13_assigment -> . exp_op1 = expression]", "[exp_op13_assigment -> . exp_op1 += expression]", "[exp_op13_assigment -> . exp_op1 -= expression]", "[exp_op13_assigment -> . exp_op1 *= expression]", "[exp_op13_assigment -> . exp_op1 /= expression]", "[exp_op13_assigment -> . exp_op1 %= expression]", "[exp_op13_assigment -> . exp_op1 &= expression]", "[exp_op13_assigment -> . exp_op1 |= expression]", "[exp_op13_assigment -> . exp_op1 ^= expression]", "[exp_op13_assigment -> . exp_op1 <<= expression]", "[exp_op13_assigment -> . exp_op1 >>= expression]", "[exp_op11 -> . exp_op10]", "[exp_op11 -> . exp_op11 || exp_op10]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op10 -> . exp_op9]", "[exp_op10 -> . exp_op10 && exp_op9]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op9 -> . exp_op8]", "[exp_op9 -> . exp_op9 | exp_op8]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_op8 -> . exp_op7]", "[exp_op8 -> . exp_op8 ^ exp_op7]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[exp_op7 -> . exp_op6]", "[exp_op7 -> . exp_op7 & exp_op6]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]", "[exp_op6 -> . exp_op5]", "[exp_op6 -> . exp_op6 == exp_op5]", "[exp_op6 -> . exp_op6 != exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]" };
        private static ushort[][] p_StateShiftsOnTerminal_55 = { new ushort[2] { 0x106, 0xB1 }, new ushort[2] { 0x14A, 0xB4 }, new ushort[2] { 0x14B, 0xB5 }, new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_55 = { new ushort[2] { 0x3F, 0xB0 }, new ushort[2] { 0x40, 0xB2 }, new ushort[2] { 0x3D, 0xB3 }, new ushort[2] { 0x3B, 0x3 }, new ushort[2] { 0x3C, 0x4 }, new ushort[2] { 0x3A, 0x5 }, new ushort[2] { 0x30, 0x6 }, new ushort[2] { 0x39, 0x7 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x38, 0x10 }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x37, 0x16 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x36, 0x21 }, new ushort[2] { 0x1E, 0x2E }, new ushort[2] { 0x35, 0x32 }, new ushort[2] { 0x34, 0x42 }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 } };
        private static ushort[][] p_StateReducsOnTerminal_55 = { };

        private static ushort[] p_StateExpectedIDs_56 = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_56 = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_56 = { "[exp_op0_post_increment -> exp_op0 ++ . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_56 = { };
        private static ushort[][] p_StateShiftsOnVariable_56 = { };
        private static ushort[][] p_StateReducsOnTerminal_56 = { new ushort[2] { 0x13D, 0x3C }, new ushort[2] { 0x13E, 0x3C }, new ushort[2] { 0x13F, 0x3C }, new ushort[2] { 0x140, 0x3C }, new ushort[2] { 0x141, 0x3C }, new ushort[2] { 0x142, 0x3C }, new ushort[2] { 0x143, 0x3C }, new ushort[2] { 0x144, 0x3C }, new ushort[2] { 0x145, 0x3C }, new ushort[2] { 0x146, 0x3C }, new ushort[2] { 0x147, 0x3C }, new ushort[2] { 0x2, 0x3C }, new ushort[2] { 0x13B, 0x3C }, new ushort[2] { 0x106, 0x3C }, new ushort[2] { 0x13C, 0x3C }, new ushort[2] { 0xF0, 0x3C }, new ushort[2] { 0xF1, 0x3C }, new ushort[2] { 0x152, 0x3C }, new ushort[2] { 0x13A, 0x3C }, new ushort[2] { 0x139, 0x3C }, new ushort[2] { 0x138, 0x3C }, new ushort[2] { 0x137, 0x3C }, new ushort[2] { 0x136, 0x3C }, new ushort[2] { 0x134, 0x3C }, new ushort[2] { 0x135, 0x3C }, new ushort[2] { 0x12E, 0x3C }, new ushort[2] { 0x12F, 0x3C }, new ushort[2] { 0x130, 0x3C }, new ushort[2] { 0x131, 0x3C }, new ushort[2] { 0x132, 0x3C }, new ushort[2] { 0x133, 0x3C }, new ushort[2] { 0x12C, 0x3C }, new ushort[2] { 0x12D, 0x3C }, new ushort[2] { 0x123, 0x3C }, new ushort[2] { 0x124, 0x3C }, new ushort[2] { 0x127, 0x3C }, new ushort[2] { 0x128, 0x3C }, new ushort[2] { 0x129, 0x3C } };

        private static ushort[] p_StateExpectedIDs_57 = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_57 = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_57 = { "[exp_op0_post_decrement -> exp_op0 -- . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_57 = { };
        private static ushort[][] p_StateShiftsOnVariable_57 = { };
        private static ushort[][] p_StateReducsOnTerminal_57 = { new ushort[2] { 0x13D, 0x3D }, new ushort[2] { 0x13E, 0x3D }, new ushort[2] { 0x13F, 0x3D }, new ushort[2] { 0x140, 0x3D }, new ushort[2] { 0x141, 0x3D }, new ushort[2] { 0x142, 0x3D }, new ushort[2] { 0x143, 0x3D }, new ushort[2] { 0x144, 0x3D }, new ushort[2] { 0x145, 0x3D }, new ushort[2] { 0x146, 0x3D }, new ushort[2] { 0x147, 0x3D }, new ushort[2] { 0x2, 0x3D }, new ushort[2] { 0x13B, 0x3D }, new ushort[2] { 0x106, 0x3D }, new ushort[2] { 0x13C, 0x3D }, new ushort[2] { 0xF0, 0x3D }, new ushort[2] { 0xF1, 0x3D }, new ushort[2] { 0x152, 0x3D }, new ushort[2] { 0x13A, 0x3D }, new ushort[2] { 0x139, 0x3D }, new ushort[2] { 0x138, 0x3D }, new ushort[2] { 0x137, 0x3D }, new ushort[2] { 0x136, 0x3D }, new ushort[2] { 0x134, 0x3D }, new ushort[2] { 0x135, 0x3D }, new ushort[2] { 0x12E, 0x3D }, new ushort[2] { 0x12F, 0x3D }, new ushort[2] { 0x130, 0x3D }, new ushort[2] { 0x131, 0x3D }, new ushort[2] { 0x132, 0x3D }, new ushort[2] { 0x133, 0x3D }, new ushort[2] { 0x12C, 0x3D }, new ushort[2] { 0x12D, 0x3D }, new ushort[2] { 0x123, 0x3D }, new ushort[2] { 0x124, 0x3D }, new ushort[2] { 0x127, 0x3D }, new ushort[2] { 0x128, 0x3D }, new ushort[2] { 0x129, 0x3D } };

        private static ushort[] p_StateExpectedIDs_58 = { 0x13 };
        private static string[] p_StateExpectedNames_58 = { "IDENTIFIER" };
        private static string[] p_StateItems_58 = { "[exp_op0_member_access -> exp_op0 . . IDENTIFIER]" };
        private static ushort[][] p_StateShiftsOnTerminal_58 = { new ushort[2] { 0x13, 0xB6 } };
        private static ushort[][] p_StateShiftsOnVariable_58 = { };
        private static ushort[][] p_StateReducsOnTerminal_58 = { };

        private static ushort[] p_StateExpectedIDs_59 = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_59 = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_59 = { "[exp_op1 -> + exp_op1 . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_59 = { };
        private static ushort[][] p_StateShiftsOnVariable_59 = { };
        private static ushort[][] p_StateReducsOnTerminal_59 = { new ushort[2] { 0x13D, 0x59 }, new ushort[2] { 0x13E, 0x59 }, new ushort[2] { 0x13F, 0x59 }, new ushort[2] { 0x140, 0x59 }, new ushort[2] { 0x141, 0x59 }, new ushort[2] { 0x142, 0x59 }, new ushort[2] { 0x143, 0x59 }, new ushort[2] { 0x144, 0x59 }, new ushort[2] { 0x145, 0x59 }, new ushort[2] { 0x146, 0x59 }, new ushort[2] { 0x147, 0x59 }, new ushort[2] { 0x2, 0x59 }, new ushort[2] { 0x13B, 0x59 }, new ushort[2] { 0x106, 0x59 }, new ushort[2] { 0x13C, 0x59 }, new ushort[2] { 0xF0, 0x59 }, new ushort[2] { 0xF1, 0x59 }, new ushort[2] { 0x152, 0x59 }, new ushort[2] { 0x13A, 0x59 }, new ushort[2] { 0x139, 0x59 }, new ushort[2] { 0x138, 0x59 }, new ushort[2] { 0x137, 0x59 }, new ushort[2] { 0x136, 0x59 }, new ushort[2] { 0x134, 0x59 }, new ushort[2] { 0x135, 0x59 }, new ushort[2] { 0x12E, 0x59 }, new ushort[2] { 0x12F, 0x59 }, new ushort[2] { 0x130, 0x59 }, new ushort[2] { 0x131, 0x59 }, new ushort[2] { 0x132, 0x59 }, new ushort[2] { 0x133, 0x59 }, new ushort[2] { 0x12C, 0x59 }, new ushort[2] { 0x12D, 0x59 }, new ushort[2] { 0x123, 0x59 }, new ushort[2] { 0x124, 0x59 }, new ushort[2] { 0x127, 0x59 }, new ushort[2] { 0x128, 0x59 }, new ushort[2] { 0x129, 0x59 } };

        private static ushort[] p_StateExpectedIDs_5A = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_5A = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_5A = { "[exp_op1 -> - exp_op1 . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_5A = { };
        private static ushort[][] p_StateShiftsOnVariable_5A = { };
        private static ushort[][] p_StateReducsOnTerminal_5A = { new ushort[2] { 0x13D, 0x5A }, new ushort[2] { 0x13E, 0x5A }, new ushort[2] { 0x13F, 0x5A }, new ushort[2] { 0x140, 0x5A }, new ushort[2] { 0x141, 0x5A }, new ushort[2] { 0x142, 0x5A }, new ushort[2] { 0x143, 0x5A }, new ushort[2] { 0x144, 0x5A }, new ushort[2] { 0x145, 0x5A }, new ushort[2] { 0x146, 0x5A }, new ushort[2] { 0x147, 0x5A }, new ushort[2] { 0x2, 0x5A }, new ushort[2] { 0x13B, 0x5A }, new ushort[2] { 0x106, 0x5A }, new ushort[2] { 0x13C, 0x5A }, new ushort[2] { 0xF0, 0x5A }, new ushort[2] { 0xF1, 0x5A }, new ushort[2] { 0x152, 0x5A }, new ushort[2] { 0x13A, 0x5A }, new ushort[2] { 0x139, 0x5A }, new ushort[2] { 0x138, 0x5A }, new ushort[2] { 0x137, 0x5A }, new ushort[2] { 0x136, 0x5A }, new ushort[2] { 0x134, 0x5A }, new ushort[2] { 0x135, 0x5A }, new ushort[2] { 0x12E, 0x5A }, new ushort[2] { 0x12F, 0x5A }, new ushort[2] { 0x130, 0x5A }, new ushort[2] { 0x131, 0x5A }, new ushort[2] { 0x132, 0x5A }, new ushort[2] { 0x133, 0x5A }, new ushort[2] { 0x12C, 0x5A }, new ushort[2] { 0x12D, 0x5A }, new ushort[2] { 0x123, 0x5A }, new ushort[2] { 0x124, 0x5A }, new ushort[2] { 0x127, 0x5A }, new ushort[2] { 0x128, 0x5A }, new ushort[2] { 0x129, 0x5A } };

        private static ushort[] p_StateExpectedIDs_5B = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_5B = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_5B = { "[exp_op1 -> ! exp_op1 . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_5B = { };
        private static ushort[][] p_StateShiftsOnVariable_5B = { };
        private static ushort[][] p_StateReducsOnTerminal_5B = { new ushort[2] { 0x13D, 0x5B }, new ushort[2] { 0x13E, 0x5B }, new ushort[2] { 0x13F, 0x5B }, new ushort[2] { 0x140, 0x5B }, new ushort[2] { 0x141, 0x5B }, new ushort[2] { 0x142, 0x5B }, new ushort[2] { 0x143, 0x5B }, new ushort[2] { 0x144, 0x5B }, new ushort[2] { 0x145, 0x5B }, new ushort[2] { 0x146, 0x5B }, new ushort[2] { 0x147, 0x5B }, new ushort[2] { 0x2, 0x5B }, new ushort[2] { 0x13B, 0x5B }, new ushort[2] { 0x106, 0x5B }, new ushort[2] { 0x13C, 0x5B }, new ushort[2] { 0xF0, 0x5B }, new ushort[2] { 0xF1, 0x5B }, new ushort[2] { 0x152, 0x5B }, new ushort[2] { 0x13A, 0x5B }, new ushort[2] { 0x139, 0x5B }, new ushort[2] { 0x138, 0x5B }, new ushort[2] { 0x137, 0x5B }, new ushort[2] { 0x136, 0x5B }, new ushort[2] { 0x134, 0x5B }, new ushort[2] { 0x135, 0x5B }, new ushort[2] { 0x12E, 0x5B }, new ushort[2] { 0x12F, 0x5B }, new ushort[2] { 0x130, 0x5B }, new ushort[2] { 0x131, 0x5B }, new ushort[2] { 0x132, 0x5B }, new ushort[2] { 0x133, 0x5B }, new ushort[2] { 0x12C, 0x5B }, new ushort[2] { 0x12D, 0x5B }, new ushort[2] { 0x123, 0x5B }, new ushort[2] { 0x124, 0x5B }, new ushort[2] { 0x127, 0x5B }, new ushort[2] { 0x128, 0x5B }, new ushort[2] { 0x129, 0x5B } };

        private static ushort[] p_StateExpectedIDs_5C = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_5C = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_5C = { "[exp_op1 -> ~ exp_op1 . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_5C = { };
        private static ushort[][] p_StateShiftsOnVariable_5C = { };
        private static ushort[][] p_StateReducsOnTerminal_5C = { new ushort[2] { 0x13D, 0x5C }, new ushort[2] { 0x13E, 0x5C }, new ushort[2] { 0x13F, 0x5C }, new ushort[2] { 0x140, 0x5C }, new ushort[2] { 0x141, 0x5C }, new ushort[2] { 0x142, 0x5C }, new ushort[2] { 0x143, 0x5C }, new ushort[2] { 0x144, 0x5C }, new ushort[2] { 0x145, 0x5C }, new ushort[2] { 0x146, 0x5C }, new ushort[2] { 0x147, 0x5C }, new ushort[2] { 0x2, 0x5C }, new ushort[2] { 0x13B, 0x5C }, new ushort[2] { 0x106, 0x5C }, new ushort[2] { 0x13C, 0x5C }, new ushort[2] { 0xF0, 0x5C }, new ushort[2] { 0xF1, 0x5C }, new ushort[2] { 0x152, 0x5C }, new ushort[2] { 0x13A, 0x5C }, new ushort[2] { 0x139, 0x5C }, new ushort[2] { 0x138, 0x5C }, new ushort[2] { 0x137, 0x5C }, new ushort[2] { 0x136, 0x5C }, new ushort[2] { 0x134, 0x5C }, new ushort[2] { 0x135, 0x5C }, new ushort[2] { 0x12E, 0x5C }, new ushort[2] { 0x12F, 0x5C }, new ushort[2] { 0x130, 0x5C }, new ushort[2] { 0x131, 0x5C }, new ushort[2] { 0x132, 0x5C }, new ushort[2] { 0x133, 0x5C }, new ushort[2] { 0x12C, 0x5C }, new ushort[2] { 0x12D, 0x5C }, new ushort[2] { 0x123, 0x5C }, new ushort[2] { 0x124, 0x5C }, new ushort[2] { 0x127, 0x5C }, new ushort[2] { 0x128, 0x5C }, new ushort[2] { 0x129, 0x5C } };

        private static ushort[] p_StateExpectedIDs_5D = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_5D = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_5D = { "[exp_op9 -> exp_op9 | . exp_op8]", "[exp_op8 -> . exp_op7]", "[exp_op8 -> . exp_op8 ^ exp_op7]", "[exp_op7 -> . exp_op6]", "[exp_op7 -> . exp_op7 & exp_op6]", "[exp_op6 -> . exp_op5]", "[exp_op6 -> . exp_op6 == exp_op5]", "[exp_op6 -> . exp_op6 != exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]" };
        private static ushort[][] p_StateShiftsOnTerminal_5D = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_5D = { new ushort[2] { 0x37, 0xB7 }, new ushort[2] { 0x36, 0x21 }, new ushort[2] { 0x35, 0x32 }, new ushort[2] { 0x34, 0x42 }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 }, new ushort[2] { 0x30, 0xA3 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x1E, 0x2E } };
        private static ushort[][] p_StateReducsOnTerminal_5D = { };

        private static ushort[] p_StateExpectedIDs_5E = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_5E = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_5E = { "[exp_op1_pre_increment -> ++ exp_op1 . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_5E = { };
        private static ushort[][] p_StateShiftsOnVariable_5E = { };
        private static ushort[][] p_StateReducsOnTerminal_5E = { new ushort[2] { 0x13D, 0x55 }, new ushort[2] { 0x13E, 0x55 }, new ushort[2] { 0x13F, 0x55 }, new ushort[2] { 0x140, 0x55 }, new ushort[2] { 0x141, 0x55 }, new ushort[2] { 0x142, 0x55 }, new ushort[2] { 0x143, 0x55 }, new ushort[2] { 0x144, 0x55 }, new ushort[2] { 0x145, 0x55 }, new ushort[2] { 0x146, 0x55 }, new ushort[2] { 0x147, 0x55 }, new ushort[2] { 0x2, 0x55 }, new ushort[2] { 0x13B, 0x55 }, new ushort[2] { 0x106, 0x55 }, new ushort[2] { 0x13C, 0x55 }, new ushort[2] { 0xF0, 0x55 }, new ushort[2] { 0xF1, 0x55 }, new ushort[2] { 0x152, 0x55 }, new ushort[2] { 0x13A, 0x55 }, new ushort[2] { 0x139, 0x55 }, new ushort[2] { 0x138, 0x55 }, new ushort[2] { 0x137, 0x55 }, new ushort[2] { 0x136, 0x55 }, new ushort[2] { 0x134, 0x55 }, new ushort[2] { 0x135, 0x55 }, new ushort[2] { 0x12E, 0x55 }, new ushort[2] { 0x12F, 0x55 }, new ushort[2] { 0x130, 0x55 }, new ushort[2] { 0x131, 0x55 }, new ushort[2] { 0x132, 0x55 }, new ushort[2] { 0x133, 0x55 }, new ushort[2] { 0x12C, 0x55 }, new ushort[2] { 0x12D, 0x55 }, new ushort[2] { 0x123, 0x55 }, new ushort[2] { 0x124, 0x55 }, new ushort[2] { 0x127, 0x55 }, new ushort[2] { 0x128, 0x55 }, new ushort[2] { 0x129, 0x55 } };

        private static ushort[] p_StateExpectedIDs_5F = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_5F = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_5F = { "[exp_op1_pre_decrement -> -- exp_op1 . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_5F = { };
        private static ushort[][] p_StateShiftsOnVariable_5F = { };
        private static ushort[][] p_StateReducsOnTerminal_5F = { new ushort[2] { 0x13D, 0x56 }, new ushort[2] { 0x13E, 0x56 }, new ushort[2] { 0x13F, 0x56 }, new ushort[2] { 0x140, 0x56 }, new ushort[2] { 0x141, 0x56 }, new ushort[2] { 0x142, 0x56 }, new ushort[2] { 0x143, 0x56 }, new ushort[2] { 0x144, 0x56 }, new ushort[2] { 0x145, 0x56 }, new ushort[2] { 0x146, 0x56 }, new ushort[2] { 0x147, 0x56 }, new ushort[2] { 0x2, 0x56 }, new ushort[2] { 0x13B, 0x56 }, new ushort[2] { 0x106, 0x56 }, new ushort[2] { 0x13C, 0x56 }, new ushort[2] { 0xF0, 0x56 }, new ushort[2] { 0xF1, 0x56 }, new ushort[2] { 0x152, 0x56 }, new ushort[2] { 0x13A, 0x56 }, new ushort[2] { 0x139, 0x56 }, new ushort[2] { 0x138, 0x56 }, new ushort[2] { 0x137, 0x56 }, new ushort[2] { 0x136, 0x56 }, new ushort[2] { 0x134, 0x56 }, new ushort[2] { 0x135, 0x56 }, new ushort[2] { 0x12E, 0x56 }, new ushort[2] { 0x12F, 0x56 }, new ushort[2] { 0x130, 0x56 }, new ushort[2] { 0x131, 0x56 }, new ushort[2] { 0x132, 0x56 }, new ushort[2] { 0x133, 0x56 }, new ushort[2] { 0x12C, 0x56 }, new ushort[2] { 0x12D, 0x56 }, new ushort[2] { 0x123, 0x56 }, new ushort[2] { 0x124, 0x56 }, new ushort[2] { 0x127, 0x56 }, new ushort[2] { 0x128, 0x56 }, new ushort[2] { 0x129, 0x56 } };

        private static ushort[] p_StateExpectedIDs_60 = { 0x106 };
        private static string[] p_StateExpectedNames_60 = { "_T[)]" };
        private static string[] p_StateItems_60 = { "[exp_op1_cast -> ( type . ) exp_op1]" };
        private static ushort[][] p_StateShiftsOnTerminal_60 = { new ushort[2] { 0x106, 0xB8 } };
        private static ushort[][] p_StateShiftsOnVariable_60 = { };
        private static ushort[][] p_StateReducsOnTerminal_60 = { };

        private static ushort[] p_StateExpectedIDs_61 = { 0x106 };
        private static string[] p_StateExpectedNames_61 = { "_T[)]" };
        private static string[] p_StateItems_61 = { "[exp_atom -> ( expression . )]" };
        private static ushort[][] p_StateShiftsOnTerminal_61 = { new ushort[2] { 0x106, 0xB9 } };
        private static ushort[][] p_StateShiftsOnVariable_61 = { };
        private static ushort[][] p_StateReducsOnTerminal_61 = { };

        private static ushort[] p_StateExpectedIDs_62 = { 0x106, 0xEF };
        private static string[] p_StateExpectedNames_62 = { "_T[)]", "_T[[]" };
        private static string[] p_StateItems_62 = { "[type -> type_non_array . ]", "[type_array -> type_non_array . type_array_rank _m238]", "[type_array_rank -> . [ type_array_rank_dim ]]" };
        private static ushort[][] p_StateShiftsOnTerminal_62 = { new ushort[2] { 0xEF, 0xBB } };
        private static ushort[][] p_StateShiftsOnVariable_62 = { new ushort[2] { 0x1C, 0xBA } };
        private static ushort[][] p_StateReducsOnTerminal_62 = { new ushort[2] { 0x106, 0x1 } };

        private static ushort[] p_StateExpectedIDs_63 = { 0x106 };
        private static string[] p_StateExpectedNames_63 = { "_T[)]" };
        private static string[] p_StateItems_63 = { "[type -> type_array . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_63 = { };
        private static ushort[][] p_StateShiftsOnVariable_63 = { };
        private static ushort[][] p_StateReducsOnTerminal_63 = { new ushort[2] { 0x106, 0x2 } };

        private static ushort[] p_StateExpectedIDs_64 = { 0x106, 0xEF, 0x105 };
        private static string[] p_StateExpectedNames_64 = { "_T[)]", "_T[[]", "_T[(]" };
        private static string[] p_StateItems_64 = { "[type_non_array -> type_object . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_64 = { };
        private static ushort[][] p_StateShiftsOnVariable_64 = { };
        private static ushort[][] p_StateReducsOnTerminal_64 = { new ushort[2] { 0x106, 0x3 }, new ushort[2] { 0xEF, 0x3 }, new ushort[2] { 0x105, 0x3 } };

        private static ushort[] p_StateExpectedIDs_65 = { 0x106, 0xEF, 0x105 };
        private static string[] p_StateExpectedNames_65 = { "_T[)]", "_T[[]", "_T[(]" };
        private static string[] p_StateItems_65 = { "[type_non_array -> type_simple . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_65 = { };
        private static ushort[][] p_StateShiftsOnVariable_65 = { };
        private static ushort[][] p_StateReducsOnTerminal_65 = { new ushort[2] { 0x106, 0x4 }, new ushort[2] { 0xEF, 0x4 }, new ushort[2] { 0x105, 0x4 } };

        private static ushort[] p_StateExpectedIDs_66 = { 0x106, 0xDD };
        private static string[] p_StateExpectedNames_66 = { "_T[)]", "_T[.]" };
        private static string[] p_StateItems_66 = { "[type_object -> object . ]", "[type_predefined -> object . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_66 = { };
        private static ushort[][] p_StateShiftsOnVariable_66 = { };
        private static ushort[][] p_StateReducsOnTerminal_66 = { new ushort[2] { 0x106, 0x5 }, new ushort[2] { 0xDD, 0x22 } };

        private static ushort[] p_StateExpectedIDs_67 = { 0x106, 0xDD };
        private static string[] p_StateExpectedNames_67 = { "_T[)]", "_T[.]" };
        private static string[] p_StateItems_67 = { "[type_object -> string . ]", "[type_predefined -> string . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_67 = { };
        private static ushort[][] p_StateShiftsOnVariable_67 = { };
        private static ushort[][] p_StateReducsOnTerminal_67 = { new ushort[2] { 0x106, 0x6 }, new ushort[2] { 0xDD, 0x25 } };

        private static ushort[] p_StateExpectedIDs_68 = { 0x106, 0xEF, 0x105 };
        private static string[] p_StateExpectedNames_68 = { "_T[)]", "_T[[]", "_T[(]" };
        private static string[] p_StateItems_68 = { "[type_object -> qualified_name . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_68 = { };
        private static ushort[][] p_StateShiftsOnVariable_68 = { };
        private static ushort[][] p_StateReducsOnTerminal_68 = { new ushort[2] { 0x106, 0x7 }, new ushort[2] { 0xEF, 0x7 }, new ushort[2] { 0x105, 0x7 } };

        private static ushort[] p_StateExpectedIDs_69 = { 0x106, 0xDD };
        private static string[] p_StateExpectedNames_69 = { "_T[)]", "_T[.]" };
        private static string[] p_StateItems_69 = { "[type_simple -> bool . ]", "[type_predefined -> bool . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_69 = { };
        private static ushort[][] p_StateShiftsOnVariable_69 = { };
        private static ushort[][] p_StateReducsOnTerminal_69 = { new ushort[2] { 0x106, 0x8 }, new ushort[2] { 0xDD, 0x1A } };

        private static ushort[] p_StateExpectedIDs_6A = { 0x106, 0xDD };
        private static string[] p_StateExpectedNames_6A = { "_T[)]", "_T[.]" };
        private static string[] p_StateItems_6A = { "[type_simple -> decimal . ]", "[type_predefined -> decimal . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_6A = { };
        private static ushort[][] p_StateShiftsOnVariable_6A = { };
        private static ushort[][] p_StateReducsOnTerminal_6A = { new ushort[2] { 0x106, 0x9 }, new ushort[2] { 0xDD, 0x1D } };

        private static ushort[] p_StateExpectedIDs_6B = { 0x106, 0xEF, 0x105 };
        private static string[] p_StateExpectedNames_6B = { "_T[)]", "_T[[]", "_T[(]" };
        private static string[] p_StateItems_6B = { "[type_simple -> type_simple_integral . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_6B = { };
        private static ushort[][] p_StateShiftsOnVariable_6B = { };
        private static ushort[][] p_StateReducsOnTerminal_6B = { new ushort[2] { 0x106, 0xA }, new ushort[2] { 0xEF, 0xA }, new ushort[2] { 0x105, 0xA } };

        private static ushort[] p_StateExpectedIDs_6C = { 0x106, 0xEF, 0x105 };
        private static string[] p_StateExpectedNames_6C = { "_T[)]", "_T[[]", "_T[(]" };
        private static string[] p_StateItems_6C = { "[type_simple -> type_simple_float . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_6C = { };
        private static ushort[][] p_StateShiftsOnVariable_6C = { };
        private static ushort[][] p_StateReducsOnTerminal_6C = { new ushort[2] { 0x106, 0xB }, new ushort[2] { 0xEF, 0xB }, new ushort[2] { 0x105, 0xB } };

        private static ushort[] p_StateExpectedIDs_6D = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x106, 0xDD };
        private static string[] p_StateExpectedNames_6D = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "_T[)]", "_T[.]" };
        private static string[] p_StateItems_6D = { "[qualified_name -> IDENTIFIER . _m222]", "[exp_atom -> IDENTIFIER . ]", "[_m222 -> . . IDENTIFIER _m222]", "[_m222 -> . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_6D = { new ushort[2] { 0xDD, 0xBD } };
        private static ushort[][] p_StateShiftsOnVariable_6D = { new ushort[2] { 0xDE, 0xBC } };
        private static ushort[][] p_StateReducsOnTerminal_6D = { new ushort[2] { 0x13D, 0x34 }, new ushort[2] { 0x13E, 0x34 }, new ushort[2] { 0x13F, 0x34 }, new ushort[2] { 0x140, 0x34 }, new ushort[2] { 0x141, 0x34 }, new ushort[2] { 0x142, 0x34 }, new ushort[2] { 0x143, 0x34 }, new ushort[2] { 0x144, 0x34 }, new ushort[2] { 0x145, 0x34 }, new ushort[2] { 0x146, 0x34 }, new ushort[2] { 0x147, 0x34 }, new ushort[2] { 0x106, 0x21F } };

        private static ushort[] p_StateExpectedIDs_6E = { 0x106, 0xDD };
        private static string[] p_StateExpectedNames_6E = { "_T[)]", "_T[.]" };
        private static string[] p_StateItems_6E = { "[type_simple_integral -> sbyte . ]", "[type_predefined -> sbyte . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_6E = { };
        private static ushort[][] p_StateShiftsOnVariable_6E = { };
        private static ushort[][] p_StateReducsOnTerminal_6E = { new ushort[2] { 0x106, 0xC }, new ushort[2] { 0xDD, 0x23 } };

        private static ushort[] p_StateExpectedIDs_6F = { 0x106, 0xDD };
        private static string[] p_StateExpectedNames_6F = { "_T[)]", "_T[.]" };
        private static string[] p_StateItems_6F = { "[type_simple_integral -> byte . ]", "[type_predefined -> byte . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_6F = { };
        private static ushort[][] p_StateShiftsOnVariable_6F = { };
        private static ushort[][] p_StateReducsOnTerminal_6F = { new ushort[2] { 0x106, 0xD }, new ushort[2] { 0xDD, 0x1B } };

        private static ushort[] p_StateExpectedIDs_70 = { 0x106, 0xDD };
        private static string[] p_StateExpectedNames_70 = { "_T[)]", "_T[.]" };
        private static string[] p_StateItems_70 = { "[type_simple_integral -> short . ]", "[type_predefined -> short . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_70 = { };
        private static ushort[][] p_StateShiftsOnVariable_70 = { };
        private static ushort[][] p_StateReducsOnTerminal_70 = { new ushort[2] { 0x106, 0xE }, new ushort[2] { 0xDD, 0x24 } };

        private static ushort[] p_StateExpectedIDs_71 = { 0x106, 0xDD };
        private static string[] p_StateExpectedNames_71 = { "_T[)]", "_T[.]" };
        private static string[] p_StateItems_71 = { "[type_simple_integral -> ushort . ]", "[type_predefined -> ushort . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_71 = { };
        private static ushort[][] p_StateShiftsOnVariable_71 = { };
        private static ushort[][] p_StateReducsOnTerminal_71 = { new ushort[2] { 0x106, 0xF }, new ushort[2] { 0xDD, 0x28 } };

        private static ushort[] p_StateExpectedIDs_72 = { 0x106, 0xDD };
        private static string[] p_StateExpectedNames_72 = { "_T[)]", "_T[.]" };
        private static string[] p_StateItems_72 = { "[type_simple_integral -> int . ]", "[type_predefined -> int . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_72 = { };
        private static ushort[][] p_StateShiftsOnVariable_72 = { };
        private static ushort[][] p_StateReducsOnTerminal_72 = { new ushort[2] { 0x106, 0x10 }, new ushort[2] { 0xDD, 0x20 } };

        private static ushort[] p_StateExpectedIDs_73 = { 0x106, 0xDD };
        private static string[] p_StateExpectedNames_73 = { "_T[)]", "_T[.]" };
        private static string[] p_StateItems_73 = { "[type_simple_integral -> uint . ]", "[type_predefined -> uint . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_73 = { };
        private static ushort[][] p_StateShiftsOnVariable_73 = { };
        private static ushort[][] p_StateReducsOnTerminal_73 = { new ushort[2] { 0x106, 0x11 }, new ushort[2] { 0xDD, 0x26 } };

        private static ushort[] p_StateExpectedIDs_74 = { 0x106, 0xDD };
        private static string[] p_StateExpectedNames_74 = { "_T[)]", "_T[.]" };
        private static string[] p_StateItems_74 = { "[type_simple_integral -> long . ]", "[type_predefined -> long . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_74 = { };
        private static ushort[][] p_StateShiftsOnVariable_74 = { };
        private static ushort[][] p_StateReducsOnTerminal_74 = { new ushort[2] { 0x106, 0x12 }, new ushort[2] { 0xDD, 0x21 } };

        private static ushort[] p_StateExpectedIDs_75 = { 0x106, 0xDD };
        private static string[] p_StateExpectedNames_75 = { "_T[)]", "_T[.]" };
        private static string[] p_StateItems_75 = { "[type_simple_integral -> ulong . ]", "[type_predefined -> ulong . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_75 = { };
        private static ushort[][] p_StateShiftsOnVariable_75 = { };
        private static ushort[][] p_StateReducsOnTerminal_75 = { new ushort[2] { 0x106, 0x13 }, new ushort[2] { 0xDD, 0x27 } };

        private static ushort[] p_StateExpectedIDs_76 = { 0x106, 0xDD };
        private static string[] p_StateExpectedNames_76 = { "_T[)]", "_T[.]" };
        private static string[] p_StateItems_76 = { "[type_simple_integral -> char . ]", "[type_predefined -> char . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_76 = { };
        private static ushort[][] p_StateShiftsOnVariable_76 = { };
        private static ushort[][] p_StateReducsOnTerminal_76 = { new ushort[2] { 0x106, 0x14 }, new ushort[2] { 0xDD, 0x1C } };

        private static ushort[] p_StateExpectedIDs_77 = { 0x106, 0xDD };
        private static string[] p_StateExpectedNames_77 = { "_T[)]", "_T[.]" };
        private static string[] p_StateItems_77 = { "[type_simple_float -> float . ]", "[type_predefined -> float . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_77 = { };
        private static ushort[][] p_StateShiftsOnVariable_77 = { };
        private static ushort[][] p_StateReducsOnTerminal_77 = { new ushort[2] { 0x106, 0x15 }, new ushort[2] { 0xDD, 0x1F } };

        private static ushort[] p_StateExpectedIDs_78 = { 0x106, 0xDD };
        private static string[] p_StateExpectedNames_78 = { "_T[)]", "_T[.]" };
        private static string[] p_StateItems_78 = { "[type_simple_float -> double . ]", "[type_predefined -> double . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_78 = { };
        private static ushort[][] p_StateShiftsOnVariable_78 = { };
        private static ushort[][] p_StateReducsOnTerminal_78 = { new ushort[2] { 0x106, 0x16 }, new ushort[2] { 0xDD, 0x1E } };

        private static ushort[] p_StateExpectedIDs_79 = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_79 = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_79 = { "[exp_op8 -> exp_op8 ^ . exp_op7]", "[exp_op7 -> . exp_op6]", "[exp_op7 -> . exp_op7 & exp_op6]", "[exp_op6 -> . exp_op5]", "[exp_op6 -> . exp_op6 == exp_op5]", "[exp_op6 -> . exp_op6 != exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]" };
        private static ushort[][] p_StateShiftsOnTerminal_79 = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_79 = { new ushort[2] { 0x36, 0xBE }, new ushort[2] { 0x35, 0x32 }, new ushort[2] { 0x34, 0x42 }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 }, new ushort[2] { 0x30, 0xA3 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x1E, 0x2E } };
        private static ushort[][] p_StateReducsOnTerminal_79 = { };

        private static ushort[] p_StateExpectedIDs_7A = { 0x105, 0xEF };
        private static string[] p_StateExpectedNames_7A = { "_T[(]", "_T[[]" };
        private static string[] p_StateItems_7A = { "[exp_op0_array_creation -> new type_non_array . [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> new type_non_array . [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> new type_non_array . [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> new type_non_array . [ exp_expression_list ]]", "[type_array -> type_non_array . type_array_rank _m238]", "[type -> type_non_array . ]", "[type_array_rank -> . [ type_array_rank_dim ]]" };
        private static ushort[][] p_StateShiftsOnTerminal_7A = { new ushort[2] { 0xEF, 0xBF } };
        private static ushort[][] p_StateShiftsOnVariable_7A = { new ushort[2] { 0x1C, 0xBA } };
        private static ushort[][] p_StateReducsOnTerminal_7A = { new ushort[2] { 0x105, 0x1 } };

        private static ushort[] p_StateExpectedIDs_7B = { 0x105, 0x151 };
        private static string[] p_StateExpectedNames_7B = { "_T[(]", "_T[{]" };
        private static string[] p_StateItems_7B = { "[exp_op0_array_creation -> new type_array . array_initializer]", "[type -> type_array . ]", "[array_initializer -> . { variable_initializer_list }]" };
        private static ushort[][] p_StateShiftsOnTerminal_7B = { new ushort[2] { 0x151, 0xC1 } };
        private static ushort[][] p_StateShiftsOnVariable_7B = { new ushort[2] { 0x46, 0xC0 } };
        private static ushort[][] p_StateReducsOnTerminal_7B = { new ushort[2] { 0x105, 0x2 } };

        private static ushort[] p_StateExpectedIDs_7C = { 0x105 };
        private static string[] p_StateExpectedNames_7C = { "_T[(]" };
        private static string[] p_StateItems_7C = { "[exp_op0_obj_creation -> new type . ( exp_argument_list )]", "[exp_op0_obj_creation -> new type . ( )]" };
        private static ushort[][] p_StateShiftsOnTerminal_7C = { new ushort[2] { 0x105, 0xC2 } };
        private static ushort[][] p_StateShiftsOnVariable_7C = { };
        private static ushort[][] p_StateReducsOnTerminal_7C = { };

        private static ushort[] p_StateExpectedIDs_7D = { 0xEF, 0x105, 0x106 };
        private static string[] p_StateExpectedNames_7D = { "_T[[]", "_T[(]", "_T[)]" };
        private static string[] p_StateItems_7D = { "[type_object -> object . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_7D = { };
        private static ushort[][] p_StateShiftsOnVariable_7D = { };
        private static ushort[][] p_StateReducsOnTerminal_7D = { new ushort[2] { 0xEF, 0x5 }, new ushort[2] { 0x105, 0x5 }, new ushort[2] { 0x106, 0x5 } };

        private static ushort[] p_StateExpectedIDs_7E = { 0xEF, 0x105, 0x106 };
        private static string[] p_StateExpectedNames_7E = { "_T[[]", "_T[(]", "_T[)]" };
        private static string[] p_StateItems_7E = { "[type_object -> string . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_7E = { };
        private static ushort[][] p_StateShiftsOnVariable_7E = { };
        private static ushort[][] p_StateReducsOnTerminal_7E = { new ushort[2] { 0xEF, 0x6 }, new ushort[2] { 0x105, 0x6 }, new ushort[2] { 0x106, 0x6 } };

        private static ushort[] p_StateExpectedIDs_7F = { 0xEF, 0x105, 0x106 };
        private static string[] p_StateExpectedNames_7F = { "_T[[]", "_T[(]", "_T[)]" };
        private static string[] p_StateItems_7F = { "[type_simple -> bool . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_7F = { };
        private static ushort[][] p_StateShiftsOnVariable_7F = { };
        private static ushort[][] p_StateReducsOnTerminal_7F = { new ushort[2] { 0xEF, 0x8 }, new ushort[2] { 0x105, 0x8 }, new ushort[2] { 0x106, 0x8 } };

        private static ushort[] p_StateExpectedIDs_80 = { 0xEF, 0x105, 0x106 };
        private static string[] p_StateExpectedNames_80 = { "_T[[]", "_T[(]", "_T[)]" };
        private static string[] p_StateItems_80 = { "[type_simple -> decimal . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_80 = { };
        private static ushort[][] p_StateShiftsOnVariable_80 = { };
        private static ushort[][] p_StateReducsOnTerminal_80 = { new ushort[2] { 0xEF, 0x9 }, new ushort[2] { 0x105, 0x9 }, new ushort[2] { 0x106, 0x9 } };

        private static ushort[] p_StateExpectedIDs_81 = { 0xEF, 0x105, 0x106, 0xDD };
        private static string[] p_StateExpectedNames_81 = { "_T[[]", "_T[(]", "_T[)]", "_T[.]" };
        private static string[] p_StateItems_81 = { "[qualified_name -> IDENTIFIER . _m222]", "[_m222 -> . . IDENTIFIER _m222]", "[_m222 -> . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_81 = { new ushort[2] { 0xDD, 0xBD } };
        private static ushort[][] p_StateShiftsOnVariable_81 = { new ushort[2] { 0xDE, 0xBC } };
        private static ushort[][] p_StateReducsOnTerminal_81 = { new ushort[2] { 0xEF, 0x21F }, new ushort[2] { 0x105, 0x21F }, new ushort[2] { 0x106, 0x21F } };

        private static ushort[] p_StateExpectedIDs_82 = { 0xEF, 0x105, 0x106 };
        private static string[] p_StateExpectedNames_82 = { "_T[[]", "_T[(]", "_T[)]" };
        private static string[] p_StateItems_82 = { "[type_simple_integral -> sbyte . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_82 = { };
        private static ushort[][] p_StateShiftsOnVariable_82 = { };
        private static ushort[][] p_StateReducsOnTerminal_82 = { new ushort[2] { 0xEF, 0xC }, new ushort[2] { 0x105, 0xC }, new ushort[2] { 0x106, 0xC } };

        private static ushort[] p_StateExpectedIDs_83 = { 0xEF, 0x105, 0x106 };
        private static string[] p_StateExpectedNames_83 = { "_T[[]", "_T[(]", "_T[)]" };
        private static string[] p_StateItems_83 = { "[type_simple_integral -> byte . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_83 = { };
        private static ushort[][] p_StateShiftsOnVariable_83 = { };
        private static ushort[][] p_StateReducsOnTerminal_83 = { new ushort[2] { 0xEF, 0xD }, new ushort[2] { 0x105, 0xD }, new ushort[2] { 0x106, 0xD } };

        private static ushort[] p_StateExpectedIDs_84 = { 0xEF, 0x105, 0x106 };
        private static string[] p_StateExpectedNames_84 = { "_T[[]", "_T[(]", "_T[)]" };
        private static string[] p_StateItems_84 = { "[type_simple_integral -> short . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_84 = { };
        private static ushort[][] p_StateShiftsOnVariable_84 = { };
        private static ushort[][] p_StateReducsOnTerminal_84 = { new ushort[2] { 0xEF, 0xE }, new ushort[2] { 0x105, 0xE }, new ushort[2] { 0x106, 0xE } };

        private static ushort[] p_StateExpectedIDs_85 = { 0xEF, 0x105, 0x106 };
        private static string[] p_StateExpectedNames_85 = { "_T[[]", "_T[(]", "_T[)]" };
        private static string[] p_StateItems_85 = { "[type_simple_integral -> ushort . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_85 = { };
        private static ushort[][] p_StateShiftsOnVariable_85 = { };
        private static ushort[][] p_StateReducsOnTerminal_85 = { new ushort[2] { 0xEF, 0xF }, new ushort[2] { 0x105, 0xF }, new ushort[2] { 0x106, 0xF } };

        private static ushort[] p_StateExpectedIDs_86 = { 0xEF, 0x105, 0x106 };
        private static string[] p_StateExpectedNames_86 = { "_T[[]", "_T[(]", "_T[)]" };
        private static string[] p_StateItems_86 = { "[type_simple_integral -> int . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_86 = { };
        private static ushort[][] p_StateShiftsOnVariable_86 = { };
        private static ushort[][] p_StateReducsOnTerminal_86 = { new ushort[2] { 0xEF, 0x10 }, new ushort[2] { 0x105, 0x10 }, new ushort[2] { 0x106, 0x10 } };

        private static ushort[] p_StateExpectedIDs_87 = { 0xEF, 0x105, 0x106 };
        private static string[] p_StateExpectedNames_87 = { "_T[[]", "_T[(]", "_T[)]" };
        private static string[] p_StateItems_87 = { "[type_simple_integral -> uint . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_87 = { };
        private static ushort[][] p_StateShiftsOnVariable_87 = { };
        private static ushort[][] p_StateReducsOnTerminal_87 = { new ushort[2] { 0xEF, 0x11 }, new ushort[2] { 0x105, 0x11 }, new ushort[2] { 0x106, 0x11 } };

        private static ushort[] p_StateExpectedIDs_88 = { 0xEF, 0x105, 0x106 };
        private static string[] p_StateExpectedNames_88 = { "_T[[]", "_T[(]", "_T[)]" };
        private static string[] p_StateItems_88 = { "[type_simple_integral -> long . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_88 = { };
        private static ushort[][] p_StateShiftsOnVariable_88 = { };
        private static ushort[][] p_StateReducsOnTerminal_88 = { new ushort[2] { 0xEF, 0x12 }, new ushort[2] { 0x105, 0x12 }, new ushort[2] { 0x106, 0x12 } };

        private static ushort[] p_StateExpectedIDs_89 = { 0xEF, 0x105, 0x106 };
        private static string[] p_StateExpectedNames_89 = { "_T[[]", "_T[(]", "_T[)]" };
        private static string[] p_StateItems_89 = { "[type_simple_integral -> ulong . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_89 = { };
        private static ushort[][] p_StateShiftsOnVariable_89 = { };
        private static ushort[][] p_StateReducsOnTerminal_89 = { new ushort[2] { 0xEF, 0x13 }, new ushort[2] { 0x105, 0x13 }, new ushort[2] { 0x106, 0x13 } };

        private static ushort[] p_StateExpectedIDs_8A = { 0xEF, 0x105, 0x106 };
        private static string[] p_StateExpectedNames_8A = { "_T[[]", "_T[(]", "_T[)]" };
        private static string[] p_StateItems_8A = { "[type_simple_integral -> char . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_8A = { };
        private static ushort[][] p_StateShiftsOnVariable_8A = { };
        private static ushort[][] p_StateReducsOnTerminal_8A = { new ushort[2] { 0xEF, 0x14 }, new ushort[2] { 0x105, 0x14 }, new ushort[2] { 0x106, 0x14 } };

        private static ushort[] p_StateExpectedIDs_8B = { 0xEF, 0x105, 0x106 };
        private static string[] p_StateExpectedNames_8B = { "_T[[]", "_T[(]", "_T[)]" };
        private static string[] p_StateItems_8B = { "[type_simple_float -> float . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_8B = { };
        private static ushort[][] p_StateShiftsOnVariable_8B = { };
        private static ushort[][] p_StateReducsOnTerminal_8B = { new ushort[2] { 0xEF, 0x15 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x106, 0x15 } };

        private static ushort[] p_StateExpectedIDs_8C = { 0xEF, 0x105, 0x106 };
        private static string[] p_StateExpectedNames_8C = { "_T[[]", "_T[(]", "_T[)]" };
        private static string[] p_StateItems_8C = { "[type_simple_float -> double . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_8C = { };
        private static ushort[][] p_StateShiftsOnVariable_8C = { };
        private static ushort[][] p_StateReducsOnTerminal_8C = { new ushort[2] { 0xEF, 0x16 }, new ushort[2] { 0x105, 0x16 }, new ushort[2] { 0x106, 0x16 } };

        private static ushort[] p_StateExpectedIDs_8D = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_8D = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_8D = { "[exp_op7 -> exp_op7 & . exp_op6]", "[exp_op6 -> . exp_op5]", "[exp_op6 -> . exp_op6 == exp_op5]", "[exp_op6 -> . exp_op6 != exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]" };
        private static ushort[][] p_StateShiftsOnTerminal_8D = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_8D = { new ushort[2] { 0x35, 0xC3 }, new ushort[2] { 0x34, 0x42 }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 }, new ushort[2] { 0x30, 0xA3 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x1E, 0x2E } };
        private static ushort[][] p_StateReducsOnTerminal_8D = { };

        private static ushort[] p_StateExpectedIDs_8E = { 0x13 };
        private static string[] p_StateExpectedNames_8E = { "IDENTIFIER" };
        private static string[] p_StateItems_8E = { "[exp_op0_member_access -> type_predefined . . IDENTIFIER]" };
        private static ushort[][] p_StateShiftsOnTerminal_8E = { new ushort[2] { 0x13, 0xC4 } };
        private static ushort[][] p_StateShiftsOnVariable_8E = { };
        private static ushort[][] p_StateReducsOnTerminal_8E = { };

        private static ushort[] p_StateExpectedIDs_8F = { 0x102, 0xDF, 0xE0, 0xE1, 0xE2, 0x13, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED };
        private static string[] p_StateExpectedNames_8F = { "_T[void]", "_T[object]", "_T[string]", "_T[bool]", "_T[decimal]", "IDENTIFIER", "_T[sbyte]", "_T[byte]", "_T[short]", "_T[ushort]", "_T[int]", "_T[uint]", "_T[long]", "_T[ulong]", "_T[char]", "_T[float]", "_T[double]" };
        private static string[] p_StateItems_8F = { "[exp_op0_typeof -> typeof ( . type_return )]", "[type_return -> . void]", "[type_return -> . type]", "[type -> . type_non_array]", "[type -> . type_array]", "[type_non_array -> . type_object]", "[type_non_array -> . type_simple]", "[type_array -> . type_non_array type_array_rank _m238]", "[type_object -> . object]", "[type_object -> . string]", "[type_object -> . qualified_name]", "[type_simple -> . bool]", "[type_simple -> . decimal]", "[type_simple -> . type_simple_integral]", "[type_simple -> . type_simple_float]", "[qualified_name -> . IDENTIFIER _m222]", "[type_simple_integral -> . sbyte]", "[type_simple_integral -> . byte]", "[type_simple_integral -> . short]", "[type_simple_integral -> . ushort]", "[type_simple_integral -> . int]", "[type_simple_integral -> . uint]", "[type_simple_integral -> . long]", "[type_simple_integral -> . ulong]", "[type_simple_integral -> . char]", "[type_simple_float -> . float]", "[type_simple_float -> . double]" };
        private static ushort[][] p_StateShiftsOnTerminal_8F = { new ushort[2] { 0x102, 0xC6 }, new ushort[2] { 0xDF, 0x7D }, new ushort[2] { 0xE0, 0x7E }, new ushort[2] { 0xE1, 0x7F }, new ushort[2] { 0xE2, 0x80 }, new ushort[2] { 0x13, 0x81 }, new ushort[2] { 0xE3, 0x82 }, new ushort[2] { 0xE4, 0x83 }, new ushort[2] { 0xE5, 0x84 }, new ushort[2] { 0xE6, 0x85 }, new ushort[2] { 0xE7, 0x86 }, new ushort[2] { 0xE8, 0x87 }, new ushort[2] { 0xE9, 0x88 }, new ushort[2] { 0xEA, 0x89 }, new ushort[2] { 0xEB, 0x8A }, new ushort[2] { 0xEC, 0x8B }, new ushort[2] { 0xED, 0x8C } };
        private static ushort[][] p_StateShiftsOnVariable_8F = { new ushort[2] { 0x1F, 0xC5 }, new ushort[2] { 0x15, 0xC7 }, new ushort[2] { 0x16, 0x62 }, new ushort[2] { 0x1B, 0x63 }, new ushort[2] { 0x17, 0x64 }, new ushort[2] { 0x18, 0x65 }, new ushort[2] { 0x14, 0x68 }, new ushort[2] { 0x19, 0x6B }, new ushort[2] { 0x1A, 0x6C } };
        private static ushort[][] p_StateReducsOnTerminal_8F = { };

        private static ushort[] p_StateExpectedIDs_90 = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_90 = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_90 = { "[exp_op0_checked -> checked ( . expression )]", "[expression -> . exp_op12_conditional]", "[expression -> . exp_op13_assigment]", "[exp_op12_conditional -> . exp_op11]", "[exp_op12_conditional -> . exp_op11 ? expression : expression]", "[exp_op13_assigment -> . exp_op1 = expression]", "[exp_op13_assigment -> . exp_op1 += expression]", "[exp_op13_assigment -> . exp_op1 -= expression]", "[exp_op13_assigment -> . exp_op1 *= expression]", "[exp_op13_assigment -> . exp_op1 /= expression]", "[exp_op13_assigment -> . exp_op1 %= expression]", "[exp_op13_assigment -> . exp_op1 &= expression]", "[exp_op13_assigment -> . exp_op1 |= expression]", "[exp_op13_assigment -> . exp_op1 ^= expression]", "[exp_op13_assigment -> . exp_op1 <<= expression]", "[exp_op13_assigment -> . exp_op1 >>= expression]", "[exp_op11 -> . exp_op10]", "[exp_op11 -> . exp_op11 || exp_op10]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op10 -> . exp_op9]", "[exp_op10 -> . exp_op10 && exp_op9]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op9 -> . exp_op8]", "[exp_op9 -> . exp_op9 | exp_op8]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_op8 -> . exp_op7]", "[exp_op8 -> . exp_op8 ^ exp_op7]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[exp_op7 -> . exp_op6]", "[exp_op7 -> . exp_op7 & exp_op6]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]", "[exp_op6 -> . exp_op5]", "[exp_op6 -> . exp_op6 == exp_op5]", "[exp_op6 -> . exp_op6 != exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]" };
        private static ushort[][] p_StateShiftsOnTerminal_90 = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_90 = { new ushort[2] { 0x3D, 0xC8 }, new ushort[2] { 0x3B, 0x3 }, new ushort[2] { 0x3C, 0x4 }, new ushort[2] { 0x3A, 0x5 }, new ushort[2] { 0x30, 0x6 }, new ushort[2] { 0x39, 0x7 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x38, 0x10 }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x37, 0x16 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x36, 0x21 }, new ushort[2] { 0x1E, 0x2E }, new ushort[2] { 0x35, 0x32 }, new ushort[2] { 0x34, 0x42 }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 } };
        private static ushort[][] p_StateReducsOnTerminal_90 = { };

        private static ushort[] p_StateExpectedIDs_91 = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_91 = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_91 = { "[exp_op0_unchecked -> unchecked ( . expression )]", "[expression -> . exp_op12_conditional]", "[expression -> . exp_op13_assigment]", "[exp_op12_conditional -> . exp_op11]", "[exp_op12_conditional -> . exp_op11 ? expression : expression]", "[exp_op13_assigment -> . exp_op1 = expression]", "[exp_op13_assigment -> . exp_op1 += expression]", "[exp_op13_assigment -> . exp_op1 -= expression]", "[exp_op13_assigment -> . exp_op1 *= expression]", "[exp_op13_assigment -> . exp_op1 /= expression]", "[exp_op13_assigment -> . exp_op1 %= expression]", "[exp_op13_assigment -> . exp_op1 &= expression]", "[exp_op13_assigment -> . exp_op1 |= expression]", "[exp_op13_assigment -> . exp_op1 ^= expression]", "[exp_op13_assigment -> . exp_op1 <<= expression]", "[exp_op13_assigment -> . exp_op1 >>= expression]", "[exp_op11 -> . exp_op10]", "[exp_op11 -> . exp_op11 || exp_op10]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op10 -> . exp_op9]", "[exp_op10 -> . exp_op10 && exp_op9]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op9 -> . exp_op8]", "[exp_op9 -> . exp_op9 | exp_op8]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_op8 -> . exp_op7]", "[exp_op8 -> . exp_op8 ^ exp_op7]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[exp_op7 -> . exp_op6]", "[exp_op7 -> . exp_op7 & exp_op6]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]", "[exp_op6 -> . exp_op5]", "[exp_op6 -> . exp_op6 == exp_op5]", "[exp_op6 -> . exp_op6 != exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]" };
        private static ushort[][] p_StateShiftsOnTerminal_91 = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_91 = { new ushort[2] { 0x3D, 0xC9 }, new ushort[2] { 0x3B, 0x3 }, new ushort[2] { 0x3C, 0x4 }, new ushort[2] { 0x3A, 0x5 }, new ushort[2] { 0x30, 0x6 }, new ushort[2] { 0x39, 0x7 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x38, 0x10 }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x37, 0x16 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x36, 0x21 }, new ushort[2] { 0x1E, 0x2E }, new ushort[2] { 0x35, 0x32 }, new ushort[2] { 0x34, 0x42 }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 } };
        private static ushort[][] p_StateReducsOnTerminal_91 = { };

        private static ushort[] p_StateExpectedIDs_92 = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_92 = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_92 = { "[exp_op6 -> exp_op6 == . exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]" };
        private static ushort[][] p_StateShiftsOnTerminal_92 = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_92 = { new ushort[2] { 0x34, 0xCA }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 }, new ushort[2] { 0x30, 0xA3 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x1E, 0x2E } };
        private static ushort[][] p_StateReducsOnTerminal_92 = { };

        private static ushort[] p_StateExpectedIDs_93 = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_93 = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_93 = { "[exp_op6 -> exp_op6 != . exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]" };
        private static ushort[][] p_StateShiftsOnTerminal_93 = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_93 = { new ushort[2] { 0x34, 0xCB }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 }, new ushort[2] { 0x30, 0xA3 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x1E, 0x2E } };
        private static ushort[][] p_StateReducsOnTerminal_93 = { };

        private static ushort[] p_StateExpectedIDs_94 = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_94 = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_94 = { "[exp_op5 -> exp_op5 < . exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]" };
        private static ushort[][] p_StateShiftsOnTerminal_94 = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_94 = { new ushort[2] { 0x33, 0xCC }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 }, new ushort[2] { 0x30, 0xA3 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x1E, 0x2E } };
        private static ushort[][] p_StateReducsOnTerminal_94 = { };

        private static ushort[] p_StateExpectedIDs_95 = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_95 = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_95 = { "[exp_op5 -> exp_op5 <= . exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]" };
        private static ushort[][] p_StateShiftsOnTerminal_95 = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_95 = { new ushort[2] { 0x33, 0xCD }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 }, new ushort[2] { 0x30, 0xA3 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x1E, 0x2E } };
        private static ushort[][] p_StateReducsOnTerminal_95 = { };

        private static ushort[] p_StateExpectedIDs_96 = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_96 = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_96 = { "[exp_op5 -> exp_op5 > . exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]" };
        private static ushort[][] p_StateShiftsOnTerminal_96 = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_96 = { new ushort[2] { 0x33, 0xCE }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 }, new ushort[2] { 0x30, 0xA3 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x1E, 0x2E } };
        private static ushort[][] p_StateReducsOnTerminal_96 = { };

        private static ushort[] p_StateExpectedIDs_97 = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_97 = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_97 = { "[exp_op5 -> exp_op5 >= . exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]" };
        private static ushort[][] p_StateShiftsOnTerminal_97 = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_97 = { new ushort[2] { 0x33, 0xCF }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 }, new ushort[2] { 0x30, 0xA3 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x1E, 0x2E } };
        private static ushort[][] p_StateReducsOnTerminal_97 = { };

        private static ushort[] p_StateExpectedIDs_98 = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_98 = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_98 = { "[exp_op5 -> exp_op5 is . exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]" };
        private static ushort[][] p_StateShiftsOnTerminal_98 = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_98 = { new ushort[2] { 0x33, 0xD0 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 }, new ushort[2] { 0x30, 0xA3 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x1E, 0x2E } };
        private static ushort[][] p_StateReducsOnTerminal_98 = { };

        private static ushort[] p_StateExpectedIDs_99 = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_99 = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_99 = { "[exp_op5 -> exp_op5 as . exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]" };
        private static ushort[][] p_StateShiftsOnTerminal_99 = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_99 = { new ushort[2] { 0x33, 0xD1 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 }, new ushort[2] { 0x30, 0xA3 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x1E, 0x2E } };
        private static ushort[][] p_StateReducsOnTerminal_99 = { };

        private static ushort[] p_StateExpectedIDs_9A = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_9A = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_9A = { "[exp_op4 -> exp_op4 << . exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]" };
        private static ushort[][] p_StateShiftsOnTerminal_9A = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_9A = { new ushort[2] { 0x32, 0xD2 }, new ushort[2] { 0x31, 0x45 }, new ushort[2] { 0x30, 0xA3 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x1E, 0x2E } };
        private static ushort[][] p_StateReducsOnTerminal_9A = { };

        private static ushort[] p_StateExpectedIDs_9B = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_9B = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_9B = { "[exp_op4 -> exp_op4 >> . exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]" };
        private static ushort[][] p_StateShiftsOnTerminal_9B = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_9B = { new ushort[2] { 0x32, 0xD3 }, new ushort[2] { 0x31, 0x45 }, new ushort[2] { 0x30, 0xA3 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x1E, 0x2E } };
        private static ushort[][] p_StateReducsOnTerminal_9B = { };

        private static ushort[] p_StateExpectedIDs_9C = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_9C = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_9C = { "[exp_op3 -> exp_op3 + . exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]" };
        private static ushort[][] p_StateShiftsOnTerminal_9C = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_9C = { new ushort[2] { 0x31, 0xD4 }, new ushort[2] { 0x30, 0xA3 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x1E, 0x2E } };
        private static ushort[][] p_StateReducsOnTerminal_9C = { };

        private static ushort[] p_StateExpectedIDs_9D = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_9D = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_9D = { "[exp_op3 -> exp_op3 - . exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]" };
        private static ushort[][] p_StateShiftsOnTerminal_9D = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_9D = { new ushort[2] { 0x31, 0xD5 }, new ushort[2] { 0x30, 0xA3 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x1E, 0x2E } };
        private static ushort[][] p_StateReducsOnTerminal_9D = { };

        private static ushort[] p_StateExpectedIDs_9E = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_9E = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_9E = { "[exp_op2 -> exp_op2 * . exp_op1]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]" };
        private static ushort[][] p_StateShiftsOnTerminal_9E = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_9E = { new ushort[2] { 0x30, 0xD6 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x1E, 0x2E } };
        private static ushort[][] p_StateReducsOnTerminal_9E = { };

        private static ushort[] p_StateExpectedIDs_9F = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_9F = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_9F = { "[exp_op2 -> exp_op2 / . exp_op1]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]" };
        private static ushort[][] p_StateShiftsOnTerminal_9F = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_9F = { new ushort[2] { 0x30, 0xD7 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x1E, 0x2E } };
        private static ushort[][] p_StateReducsOnTerminal_9F = { };

        private static ushort[] p_StateExpectedIDs_A0 = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_A0 = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_A0 = { "[exp_op2 -> exp_op2 % . exp_op1]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]" };
        private static ushort[][] p_StateShiftsOnTerminal_A0 = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_A0 = { new ushort[2] { 0x30, 0xD8 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x1E, 0x2E } };
        private static ushort[][] p_StateReducsOnTerminal_A0 = { };

        private static ushort[] p_StateExpectedIDs_A1 = { 0x13C };
        private static string[] p_StateExpectedNames_A1 = { "_T[:]" };
        private static string[] p_StateItems_A1 = { "[exp_op12_conditional -> exp_op11 ? expression . : expression]" };
        private static ushort[][] p_StateShiftsOnTerminal_A1 = { new ushort[2] { 0x13C, 0xD9 } };
        private static ushort[][] p_StateShiftsOnVariable_A1 = { };
        private static ushort[][] p_StateReducsOnTerminal_A1 = { };

        private static ushort[] p_StateExpectedIDs_A2 = { 0x2, 0x13B, 0x13A, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x139 };
        private static string[] p_StateExpectedNames_A2 = { "$", "_T[?]", "_T[||]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[&&]" };
        private static string[] p_StateItems_A2 = { "[exp_op11 -> exp_op11 || exp_op10 . ]", "[exp_op10 -> exp_op10 . && exp_op9]" };
        private static ushort[][] p_StateShiftsOnTerminal_A2 = { new ushort[2] { 0x139, 0x54 } };
        private static ushort[][] p_StateShiftsOnVariable_A2 = { };
        private static ushort[][] p_StateReducsOnTerminal_A2 = { new ushort[2] { 0x2, 0x7D }, new ushort[2] { 0x13B, 0x7D }, new ushort[2] { 0x13A, 0x7D }, new ushort[2] { 0x106, 0x7D }, new ushort[2] { 0x13C, 0x7D }, new ushort[2] { 0xF0, 0x7D }, new ushort[2] { 0xF1, 0x7D }, new ushort[2] { 0x152, 0x7D } };

        private static ushort[] p_StateExpectedIDs_A3 = { 0x127, 0x128, 0x129, 0x2, 0x13B, 0x13A, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124 };
        private static string[] p_StateExpectedNames_A3 = { "_T[*]", "_T[/]", "_T[%]", "$", "_T[?]", "_T[||]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]" };
        private static string[] p_StateItems_A3 = { "[exp_op2 -> exp_op1 . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_A3 = { };
        private static ushort[][] p_StateShiftsOnVariable_A3 = { };
        private static ushort[][] p_StateReducsOnTerminal_A3 = { new ushort[2] { 0x127, 0x60 }, new ushort[2] { 0x128, 0x60 }, new ushort[2] { 0x129, 0x60 }, new ushort[2] { 0x2, 0x60 }, new ushort[2] { 0x13B, 0x60 }, new ushort[2] { 0x13A, 0x60 }, new ushort[2] { 0x106, 0x60 }, new ushort[2] { 0x13C, 0x60 }, new ushort[2] { 0xF0, 0x60 }, new ushort[2] { 0xF1, 0x60 }, new ushort[2] { 0x152, 0x60 }, new ushort[2] { 0x139, 0x60 }, new ushort[2] { 0x138, 0x60 }, new ushort[2] { 0x137, 0x60 }, new ushort[2] { 0x136, 0x60 }, new ushort[2] { 0x134, 0x60 }, new ushort[2] { 0x135, 0x60 }, new ushort[2] { 0x12E, 0x60 }, new ushort[2] { 0x12F, 0x60 }, new ushort[2] { 0x130, 0x60 }, new ushort[2] { 0x131, 0x60 }, new ushort[2] { 0x132, 0x60 }, new ushort[2] { 0x133, 0x60 }, new ushort[2] { 0x12C, 0x60 }, new ushort[2] { 0x12D, 0x60 }, new ushort[2] { 0x123, 0x60 }, new ushort[2] { 0x124, 0x60 } };

        private static ushort[] p_StateExpectedIDs_A4 = { 0x2, 0x106, 0x13C, 0xF0, 0xF1, 0x152 };
        private static string[] p_StateExpectedNames_A4 = { "$", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]" };
        private static string[] p_StateItems_A4 = { "[exp_op13_assigment -> exp_op1 = expression . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_A4 = { };
        private static ushort[][] p_StateShiftsOnVariable_A4 = { };
        private static ushort[][] p_StateReducsOnTerminal_A4 = { new ushort[2] { 0x2, 0x80 }, new ushort[2] { 0x106, 0x80 }, new ushort[2] { 0x13C, 0x80 }, new ushort[2] { 0xF0, 0x80 }, new ushort[2] { 0xF1, 0x80 }, new ushort[2] { 0x152, 0x80 } };

        private static ushort[] p_StateExpectedIDs_A5 = { 0x2, 0x106, 0x13C, 0xF0, 0xF1, 0x152 };
        private static string[] p_StateExpectedNames_A5 = { "$", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]" };
        private static string[] p_StateItems_A5 = { "[exp_op13_assigment -> exp_op1 += expression . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_A5 = { };
        private static ushort[][] p_StateShiftsOnVariable_A5 = { };
        private static ushort[][] p_StateReducsOnTerminal_A5 = { new ushort[2] { 0x2, 0x81 }, new ushort[2] { 0x106, 0x81 }, new ushort[2] { 0x13C, 0x81 }, new ushort[2] { 0xF0, 0x81 }, new ushort[2] { 0xF1, 0x81 }, new ushort[2] { 0x152, 0x81 } };

        private static ushort[] p_StateExpectedIDs_A6 = { 0x2, 0x106, 0x13C, 0xF0, 0xF1, 0x152 };
        private static string[] p_StateExpectedNames_A6 = { "$", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]" };
        private static string[] p_StateItems_A6 = { "[exp_op13_assigment -> exp_op1 -= expression . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_A6 = { };
        private static ushort[][] p_StateShiftsOnVariable_A6 = { };
        private static ushort[][] p_StateReducsOnTerminal_A6 = { new ushort[2] { 0x2, 0x82 }, new ushort[2] { 0x106, 0x82 }, new ushort[2] { 0x13C, 0x82 }, new ushort[2] { 0xF0, 0x82 }, new ushort[2] { 0xF1, 0x82 }, new ushort[2] { 0x152, 0x82 } };

        private static ushort[] p_StateExpectedIDs_A7 = { 0x2, 0x106, 0x13C, 0xF0, 0xF1, 0x152 };
        private static string[] p_StateExpectedNames_A7 = { "$", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]" };
        private static string[] p_StateItems_A7 = { "[exp_op13_assigment -> exp_op1 *= expression . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_A7 = { };
        private static ushort[][] p_StateShiftsOnVariable_A7 = { };
        private static ushort[][] p_StateReducsOnTerminal_A7 = { new ushort[2] { 0x2, 0x83 }, new ushort[2] { 0x106, 0x83 }, new ushort[2] { 0x13C, 0x83 }, new ushort[2] { 0xF0, 0x83 }, new ushort[2] { 0xF1, 0x83 }, new ushort[2] { 0x152, 0x83 } };

        private static ushort[] p_StateExpectedIDs_A8 = { 0x2, 0x106, 0x13C, 0xF0, 0xF1, 0x152 };
        private static string[] p_StateExpectedNames_A8 = { "$", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]" };
        private static string[] p_StateItems_A8 = { "[exp_op13_assigment -> exp_op1 /= expression . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_A8 = { };
        private static ushort[][] p_StateShiftsOnVariable_A8 = { };
        private static ushort[][] p_StateReducsOnTerminal_A8 = { new ushort[2] { 0x2, 0x84 }, new ushort[2] { 0x106, 0x84 }, new ushort[2] { 0x13C, 0x84 }, new ushort[2] { 0xF0, 0x84 }, new ushort[2] { 0xF1, 0x84 }, new ushort[2] { 0x152, 0x84 } };

        private static ushort[] p_StateExpectedIDs_A9 = { 0x2, 0x106, 0x13C, 0xF0, 0xF1, 0x152 };
        private static string[] p_StateExpectedNames_A9 = { "$", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]" };
        private static string[] p_StateItems_A9 = { "[exp_op13_assigment -> exp_op1 %= expression . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_A9 = { };
        private static ushort[][] p_StateShiftsOnVariable_A9 = { };
        private static ushort[][] p_StateReducsOnTerminal_A9 = { new ushort[2] { 0x2, 0x85 }, new ushort[2] { 0x106, 0x85 }, new ushort[2] { 0x13C, 0x85 }, new ushort[2] { 0xF0, 0x85 }, new ushort[2] { 0xF1, 0x85 }, new ushort[2] { 0x152, 0x85 } };

        private static ushort[] p_StateExpectedIDs_AA = { 0x2, 0x106, 0x13C, 0xF0, 0xF1, 0x152 };
        private static string[] p_StateExpectedNames_AA = { "$", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]" };
        private static string[] p_StateItems_AA = { "[exp_op13_assigment -> exp_op1 &= expression . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_AA = { };
        private static ushort[][] p_StateShiftsOnVariable_AA = { };
        private static ushort[][] p_StateReducsOnTerminal_AA = { new ushort[2] { 0x2, 0x86 }, new ushort[2] { 0x106, 0x86 }, new ushort[2] { 0x13C, 0x86 }, new ushort[2] { 0xF0, 0x86 }, new ushort[2] { 0xF1, 0x86 }, new ushort[2] { 0x152, 0x86 } };

        private static ushort[] p_StateExpectedIDs_AB = { 0x2, 0x106, 0x13C, 0xF0, 0xF1, 0x152 };
        private static string[] p_StateExpectedNames_AB = { "$", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]" };
        private static string[] p_StateItems_AB = { "[exp_op13_assigment -> exp_op1 |= expression . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_AB = { };
        private static ushort[][] p_StateShiftsOnVariable_AB = { };
        private static ushort[][] p_StateReducsOnTerminal_AB = { new ushort[2] { 0x2, 0x87 }, new ushort[2] { 0x106, 0x87 }, new ushort[2] { 0x13C, 0x87 }, new ushort[2] { 0xF0, 0x87 }, new ushort[2] { 0xF1, 0x87 }, new ushort[2] { 0x152, 0x87 } };

        private static ushort[] p_StateExpectedIDs_AC = { 0x2, 0x106, 0x13C, 0xF0, 0xF1, 0x152 };
        private static string[] p_StateExpectedNames_AC = { "$", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]" };
        private static string[] p_StateItems_AC = { "[exp_op13_assigment -> exp_op1 ^= expression . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_AC = { };
        private static ushort[][] p_StateShiftsOnVariable_AC = { };
        private static ushort[][] p_StateReducsOnTerminal_AC = { new ushort[2] { 0x2, 0x88 }, new ushort[2] { 0x106, 0x88 }, new ushort[2] { 0x13C, 0x88 }, new ushort[2] { 0xF0, 0x88 }, new ushort[2] { 0xF1, 0x88 }, new ushort[2] { 0x152, 0x88 } };

        private static ushort[] p_StateExpectedIDs_AD = { 0x2, 0x106, 0x13C, 0xF0, 0xF1, 0x152 };
        private static string[] p_StateExpectedNames_AD = { "$", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]" };
        private static string[] p_StateItems_AD = { "[exp_op13_assigment -> exp_op1 <<= expression . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_AD = { };
        private static ushort[][] p_StateShiftsOnVariable_AD = { };
        private static ushort[][] p_StateReducsOnTerminal_AD = { new ushort[2] { 0x2, 0x89 }, new ushort[2] { 0x106, 0x89 }, new ushort[2] { 0x13C, 0x89 }, new ushort[2] { 0xF0, 0x89 }, new ushort[2] { 0xF1, 0x89 }, new ushort[2] { 0x152, 0x89 } };

        private static ushort[] p_StateExpectedIDs_AE = { 0x2, 0x106, 0x13C, 0xF0, 0xF1, 0x152 };
        private static string[] p_StateExpectedNames_AE = { "$", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]" };
        private static string[] p_StateItems_AE = { "[exp_op13_assigment -> exp_op1 >>= expression . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_AE = { };
        private static ushort[][] p_StateShiftsOnVariable_AE = { };
        private static ushort[][] p_StateReducsOnTerminal_AE = { new ushort[2] { 0x2, 0x8A }, new ushort[2] { 0x106, 0x8A }, new ushort[2] { 0x13C, 0x8A }, new ushort[2] { 0xF0, 0x8A }, new ushort[2] { 0xF1, 0x8A }, new ushort[2] { 0x152, 0x8A } };

        private static ushort[] p_StateExpectedIDs_AF = { 0x2, 0x13B, 0x139, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x138 };
        private static string[] p_StateExpectedNames_AF = { "$", "_T[?]", "_T[&&]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[|]" };
        private static string[] p_StateItems_AF = { "[exp_op10 -> exp_op10 && exp_op9 . ]", "[exp_op9 -> exp_op9 . | exp_op8]" };
        private static ushort[][] p_StateShiftsOnTerminal_AF = { new ushort[2] { 0x138, 0x5D } };
        private static ushort[][] p_StateShiftsOnVariable_AF = { };
        private static ushort[][] p_StateReducsOnTerminal_AF = { new ushort[2] { 0x2, 0x7B }, new ushort[2] { 0x13B, 0x7B }, new ushort[2] { 0x139, 0x7B }, new ushort[2] { 0x106, 0x7B }, new ushort[2] { 0x13C, 0x7B }, new ushort[2] { 0xF0, 0x7B }, new ushort[2] { 0xF1, 0x7B }, new ushort[2] { 0x152, 0x7B }, new ushort[2] { 0x13A, 0x7B } };

        private static ushort[] p_StateExpectedIDs_B0 = { 0x106, 0xF1 };
        private static string[] p_StateExpectedNames_B0 = { "_T[)]", "_T[,]" };
        private static string[] p_StateItems_B0 = { "[exp_op0_invoke -> exp_op0 ( exp_argument_list . )]", "[exp_argument_list -> exp_argument_list . , exp_argument]" };
        private static ushort[][] p_StateShiftsOnTerminal_B0 = { new ushort[2] { 0x106, 0xDA }, new ushort[2] { 0xF1, 0xDB } };
        private static ushort[][] p_StateShiftsOnVariable_B0 = { };
        private static ushort[][] p_StateReducsOnTerminal_B0 = { };

        private static ushort[] p_StateExpectedIDs_B1 = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_B1 = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_B1 = { "[exp_op0_invoke -> exp_op0 ( ) . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_B1 = { };
        private static ushort[][] p_StateShiftsOnVariable_B1 = { };
        private static ushort[][] p_StateReducsOnTerminal_B1 = { new ushort[2] { 0x13D, 0x39 }, new ushort[2] { 0x13E, 0x39 }, new ushort[2] { 0x13F, 0x39 }, new ushort[2] { 0x140, 0x39 }, new ushort[2] { 0x141, 0x39 }, new ushort[2] { 0x142, 0x39 }, new ushort[2] { 0x143, 0x39 }, new ushort[2] { 0x144, 0x39 }, new ushort[2] { 0x145, 0x39 }, new ushort[2] { 0x146, 0x39 }, new ushort[2] { 0x147, 0x39 }, new ushort[2] { 0x2, 0x39 }, new ushort[2] { 0x13B, 0x39 }, new ushort[2] { 0x106, 0x39 }, new ushort[2] { 0x13C, 0x39 }, new ushort[2] { 0xF0, 0x39 }, new ushort[2] { 0xF1, 0x39 }, new ushort[2] { 0x152, 0x39 }, new ushort[2] { 0x13A, 0x39 }, new ushort[2] { 0x139, 0x39 }, new ushort[2] { 0x138, 0x39 }, new ushort[2] { 0x137, 0x39 }, new ushort[2] { 0x136, 0x39 }, new ushort[2] { 0x134, 0x39 }, new ushort[2] { 0x135, 0x39 }, new ushort[2] { 0x12E, 0x39 }, new ushort[2] { 0x12F, 0x39 }, new ushort[2] { 0x130, 0x39 }, new ushort[2] { 0x131, 0x39 }, new ushort[2] { 0x132, 0x39 }, new ushort[2] { 0x133, 0x39 }, new ushort[2] { 0x12C, 0x39 }, new ushort[2] { 0x12D, 0x39 }, new ushort[2] { 0x123, 0x39 }, new ushort[2] { 0x124, 0x39 }, new ushort[2] { 0x127, 0x39 }, new ushort[2] { 0x128, 0x39 }, new ushort[2] { 0x129, 0x39 } };

        private static ushort[] p_StateExpectedIDs_B2 = { 0x106, 0xF1 };
        private static string[] p_StateExpectedNames_B2 = { "_T[)]", "_T[,]" };
        private static string[] p_StateItems_B2 = { "[exp_argument_list -> exp_argument . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_B2 = { };
        private static ushort[][] p_StateShiftsOnVariable_B2 = { };
        private static ushort[][] p_StateReducsOnTerminal_B2 = { new ushort[2] { 0x106, 0x8F }, new ushort[2] { 0xF1, 0x8F } };

        private static ushort[] p_StateExpectedIDs_B3 = { 0x106, 0xF1 };
        private static string[] p_StateExpectedNames_B3 = { "_T[)]", "_T[,]" };
        private static string[] p_StateItems_B3 = { "[exp_argument -> expression . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_B3 = { };
        private static ushort[][] p_StateShiftsOnVariable_B3 = { };
        private static ushort[][] p_StateReducsOnTerminal_B3 = { new ushort[2] { 0x106, 0x91 }, new ushort[2] { 0xF1, 0x91 } };

        private static ushort[] p_StateExpectedIDs_B4 = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_B4 = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_B4 = { "[exp_argument -> ref . expression]", "[expression -> . exp_op12_conditional]", "[expression -> . exp_op13_assigment]", "[exp_op12_conditional -> . exp_op11]", "[exp_op12_conditional -> . exp_op11 ? expression : expression]", "[exp_op13_assigment -> . exp_op1 = expression]", "[exp_op13_assigment -> . exp_op1 += expression]", "[exp_op13_assigment -> . exp_op1 -= expression]", "[exp_op13_assigment -> . exp_op1 *= expression]", "[exp_op13_assigment -> . exp_op1 /= expression]", "[exp_op13_assigment -> . exp_op1 %= expression]", "[exp_op13_assigment -> . exp_op1 &= expression]", "[exp_op13_assigment -> . exp_op1 |= expression]", "[exp_op13_assigment -> . exp_op1 ^= expression]", "[exp_op13_assigment -> . exp_op1 <<= expression]", "[exp_op13_assigment -> . exp_op1 >>= expression]", "[exp_op11 -> . exp_op10]", "[exp_op11 -> . exp_op11 || exp_op10]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op10 -> . exp_op9]", "[exp_op10 -> . exp_op10 && exp_op9]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op9 -> . exp_op8]", "[exp_op9 -> . exp_op9 | exp_op8]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_op8 -> . exp_op7]", "[exp_op8 -> . exp_op8 ^ exp_op7]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[exp_op7 -> . exp_op6]", "[exp_op7 -> . exp_op7 & exp_op6]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]", "[exp_op6 -> . exp_op5]", "[exp_op6 -> . exp_op6 == exp_op5]", "[exp_op6 -> . exp_op6 != exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]" };
        private static ushort[][] p_StateShiftsOnTerminal_B4 = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_B4 = { new ushort[2] { 0x3D, 0xDC }, new ushort[2] { 0x3B, 0x3 }, new ushort[2] { 0x3C, 0x4 }, new ushort[2] { 0x3A, 0x5 }, new ushort[2] { 0x30, 0x6 }, new ushort[2] { 0x39, 0x7 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x38, 0x10 }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x37, 0x16 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x36, 0x21 }, new ushort[2] { 0x1E, 0x2E }, new ushort[2] { 0x35, 0x32 }, new ushort[2] { 0x34, 0x42 }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 } };
        private static ushort[][] p_StateReducsOnTerminal_B4 = { };

        private static ushort[] p_StateExpectedIDs_B5 = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_B5 = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_B5 = { "[exp_argument -> out . expression]", "[expression -> . exp_op12_conditional]", "[expression -> . exp_op13_assigment]", "[exp_op12_conditional -> . exp_op11]", "[exp_op12_conditional -> . exp_op11 ? expression : expression]", "[exp_op13_assigment -> . exp_op1 = expression]", "[exp_op13_assigment -> . exp_op1 += expression]", "[exp_op13_assigment -> . exp_op1 -= expression]", "[exp_op13_assigment -> . exp_op1 *= expression]", "[exp_op13_assigment -> . exp_op1 /= expression]", "[exp_op13_assigment -> . exp_op1 %= expression]", "[exp_op13_assigment -> . exp_op1 &= expression]", "[exp_op13_assigment -> . exp_op1 |= expression]", "[exp_op13_assigment -> . exp_op1 ^= expression]", "[exp_op13_assigment -> . exp_op1 <<= expression]", "[exp_op13_assigment -> . exp_op1 >>= expression]", "[exp_op11 -> . exp_op10]", "[exp_op11 -> . exp_op11 || exp_op10]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op10 -> . exp_op9]", "[exp_op10 -> . exp_op10 && exp_op9]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op9 -> . exp_op8]", "[exp_op9 -> . exp_op9 | exp_op8]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_op8 -> . exp_op7]", "[exp_op8 -> . exp_op8 ^ exp_op7]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[exp_op7 -> . exp_op6]", "[exp_op7 -> . exp_op7 & exp_op6]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]", "[exp_op6 -> . exp_op5]", "[exp_op6 -> . exp_op6 == exp_op5]", "[exp_op6 -> . exp_op6 != exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]" };
        private static ushort[][] p_StateShiftsOnTerminal_B5 = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_B5 = { new ushort[2] { 0x3D, 0xDD }, new ushort[2] { 0x3B, 0x3 }, new ushort[2] { 0x3C, 0x4 }, new ushort[2] { 0x3A, 0x5 }, new ushort[2] { 0x30, 0x6 }, new ushort[2] { 0x39, 0x7 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x38, 0x10 }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x37, 0x16 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x36, 0x21 }, new ushort[2] { 0x1E, 0x2E }, new ushort[2] { 0x35, 0x32 }, new ushort[2] { 0x34, 0x42 }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 } };
        private static ushort[][] p_StateReducsOnTerminal_B5 = { };

        private static ushort[] p_StateExpectedIDs_B6 = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_B6 = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_B6 = { "[exp_op0_member_access -> exp_op0 . IDENTIFIER . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_B6 = { };
        private static ushort[][] p_StateShiftsOnVariable_B6 = { };
        private static ushort[][] p_StateReducsOnTerminal_B6 = { new ushort[2] { 0x13D, 0x3E }, new ushort[2] { 0x13E, 0x3E }, new ushort[2] { 0x13F, 0x3E }, new ushort[2] { 0x140, 0x3E }, new ushort[2] { 0x141, 0x3E }, new ushort[2] { 0x142, 0x3E }, new ushort[2] { 0x143, 0x3E }, new ushort[2] { 0x144, 0x3E }, new ushort[2] { 0x145, 0x3E }, new ushort[2] { 0x146, 0x3E }, new ushort[2] { 0x147, 0x3E }, new ushort[2] { 0x2, 0x3E }, new ushort[2] { 0x13B, 0x3E }, new ushort[2] { 0x106, 0x3E }, new ushort[2] { 0x13C, 0x3E }, new ushort[2] { 0xF0, 0x3E }, new ushort[2] { 0xF1, 0x3E }, new ushort[2] { 0x152, 0x3E }, new ushort[2] { 0x13A, 0x3E }, new ushort[2] { 0x139, 0x3E }, new ushort[2] { 0x138, 0x3E }, new ushort[2] { 0x137, 0x3E }, new ushort[2] { 0x136, 0x3E }, new ushort[2] { 0x134, 0x3E }, new ushort[2] { 0x135, 0x3E }, new ushort[2] { 0x12E, 0x3E }, new ushort[2] { 0x12F, 0x3E }, new ushort[2] { 0x130, 0x3E }, new ushort[2] { 0x131, 0x3E }, new ushort[2] { 0x132, 0x3E }, new ushort[2] { 0x133, 0x3E }, new ushort[2] { 0x12C, 0x3E }, new ushort[2] { 0x12D, 0x3E }, new ushort[2] { 0x123, 0x3E }, new ushort[2] { 0x124, 0x3E }, new ushort[2] { 0x127, 0x3E }, new ushort[2] { 0x128, 0x3E }, new ushort[2] { 0x129, 0x3E } };

        private static ushort[] p_StateExpectedIDs_B7 = { 0x2, 0x13B, 0x138, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x139, 0x13A, 0x137 };
        private static string[] p_StateExpectedNames_B7 = { "$", "_T[?]", "_T[|]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[&&]", "_T[||]", "_T[^]" };
        private static string[] p_StateItems_B7 = { "[exp_op9 -> exp_op9 | exp_op8 . ]", "[exp_op8 -> exp_op8 . ^ exp_op7]" };
        private static ushort[][] p_StateShiftsOnTerminal_B7 = { new ushort[2] { 0x137, 0x79 } };
        private static ushort[][] p_StateShiftsOnVariable_B7 = { };
        private static ushort[][] p_StateReducsOnTerminal_B7 = { new ushort[2] { 0x2, 0x79 }, new ushort[2] { 0x13B, 0x79 }, new ushort[2] { 0x138, 0x79 }, new ushort[2] { 0x106, 0x79 }, new ushort[2] { 0x13C, 0x79 }, new ushort[2] { 0xF0, 0x79 }, new ushort[2] { 0xF1, 0x79 }, new ushort[2] { 0x152, 0x79 }, new ushort[2] { 0x139, 0x79 }, new ushort[2] { 0x13A, 0x79 } };

        private static ushort[] p_StateExpectedIDs_B8 = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_B8 = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_B8 = { "[exp_op1_cast -> ( type ) . exp_op1]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]" };
        private static ushort[][] p_StateShiftsOnTerminal_B8 = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_B8 = { new ushort[2] { 0x30, 0xDE }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x1E, 0x2E } };
        private static ushort[][] p_StateReducsOnTerminal_B8 = { };

        private static ushort[] p_StateExpectedIDs_B9 = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_B9 = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_B9 = { "[exp_atom -> ( expression ) . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_B9 = { };
        private static ushort[][] p_StateShiftsOnVariable_B9 = { };
        private static ushort[][] p_StateReducsOnTerminal_B9 = { new ushort[2] { 0x13D, 0x37 }, new ushort[2] { 0x13E, 0x37 }, new ushort[2] { 0x13F, 0x37 }, new ushort[2] { 0x140, 0x37 }, new ushort[2] { 0x141, 0x37 }, new ushort[2] { 0x142, 0x37 }, new ushort[2] { 0x143, 0x37 }, new ushort[2] { 0x144, 0x37 }, new ushort[2] { 0x145, 0x37 }, new ushort[2] { 0x146, 0x37 }, new ushort[2] { 0x147, 0x37 }, new ushort[2] { 0x2, 0x37 }, new ushort[2] { 0x13B, 0x37 }, new ushort[2] { 0x106, 0x37 }, new ushort[2] { 0x13C, 0x37 }, new ushort[2] { 0xF0, 0x37 }, new ushort[2] { 0xF1, 0x37 }, new ushort[2] { 0x152, 0x37 }, new ushort[2] { 0x13A, 0x37 }, new ushort[2] { 0x139, 0x37 }, new ushort[2] { 0x138, 0x37 }, new ushort[2] { 0x137, 0x37 }, new ushort[2] { 0x136, 0x37 }, new ushort[2] { 0x134, 0x37 }, new ushort[2] { 0x135, 0x37 }, new ushort[2] { 0x12E, 0x37 }, new ushort[2] { 0x12F, 0x37 }, new ushort[2] { 0x130, 0x37 }, new ushort[2] { 0x131, 0x37 }, new ushort[2] { 0x132, 0x37 }, new ushort[2] { 0x133, 0x37 }, new ushort[2] { 0x12C, 0x37 }, new ushort[2] { 0x12D, 0x37 }, new ushort[2] { 0x123, 0x37 }, new ushort[2] { 0x124, 0x37 }, new ushort[2] { 0x127, 0x37 }, new ushort[2] { 0x128, 0x37 }, new ushort[2] { 0x129, 0x37 } };

        private static ushort[] p_StateExpectedIDs_BA = { 0x106, 0x151, 0x105, 0xEF };
        private static string[] p_StateExpectedNames_BA = { "_T[)]", "_T[{]", "_T[(]", "_T[[]" };
        private static string[] p_StateItems_BA = { "[type_array -> type_non_array type_array_rank . _m238]", "[_m238 -> . type_array_rank _m238]", "[_m238 -> . ]", "[type_array_rank -> . [ type_array_rank_dim ]]" };
        private static ushort[][] p_StateShiftsOnTerminal_BA = { new ushort[2] { 0xEF, 0xBB } };
        private static ushort[][] p_StateShiftsOnVariable_BA = { new ushort[2] { 0xEE, 0xDF }, new ushort[2] { 0x1C, 0xE0 } };
        private static ushort[][] p_StateReducsOnTerminal_BA = { new ushort[2] { 0x106, 0x221 }, new ushort[2] { 0x151, 0x221 }, new ushort[2] { 0x105, 0x221 } };

        private static ushort[] p_StateExpectedIDs_BB = { 0xF0, 0xF1 };
        private static string[] p_StateExpectedNames_BB = { "_T[]]", "_T[,]" };
        private static string[] p_StateItems_BB = { "[type_array_rank -> [ . type_array_rank_dim ]]", "[type_array_rank_dim -> . _m242]", "[_m242 -> . , _m242]", "[_m242 -> . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_BB = { new ushort[2] { 0xF1, 0xE3 } };
        private static ushort[][] p_StateShiftsOnVariable_BB = { new ushort[2] { 0x1D, 0xE1 }, new ushort[2] { 0xF2, 0xE2 } };
        private static ushort[][] p_StateReducsOnTerminal_BB = { new ushort[2] { 0xF0, 0x223 } };

        private static ushort[] p_StateExpectedIDs_BC = { 0x106, 0xEF, 0x105 };
        private static string[] p_StateExpectedNames_BC = { "_T[)]", "_T[[]", "_T[(]" };
        private static string[] p_StateItems_BC = { "[qualified_name -> IDENTIFIER _m222 . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_BC = { };
        private static ushort[][] p_StateShiftsOnVariable_BC = { };
        private static ushort[][] p_StateReducsOnTerminal_BC = { new ushort[2] { 0x106, 0x0 }, new ushort[2] { 0xEF, 0x0 }, new ushort[2] { 0x105, 0x0 } };

        private static ushort[] p_StateExpectedIDs_BD = { 0x13 };
        private static string[] p_StateExpectedNames_BD = { "IDENTIFIER" };
        private static string[] p_StateItems_BD = { "[_m222 -> . . IDENTIFIER _m222]" };
        private static ushort[][] p_StateShiftsOnTerminal_BD = { new ushort[2] { 0x13, 0xE4 } };
        private static ushort[][] p_StateShiftsOnVariable_BD = { };
        private static ushort[][] p_StateReducsOnTerminal_BD = { };

        private static ushort[] p_StateExpectedIDs_BE = { 0x2, 0x13B, 0x137, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x138, 0x13A, 0x139, 0x136 };
        private static string[] p_StateExpectedNames_BE = { "$", "_T[?]", "_T[^]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[|]", "_T[||]", "_T[&&]", "_T[&]" };
        private static string[] p_StateItems_BE = { "[exp_op8 -> exp_op8 ^ exp_op7 . ]", "[exp_op7 -> exp_op7 . & exp_op6]" };
        private static ushort[][] p_StateShiftsOnTerminal_BE = { new ushort[2] { 0x136, 0x8D } };
        private static ushort[][] p_StateShiftsOnVariable_BE = { };
        private static ushort[][] p_StateReducsOnTerminal_BE = { new ushort[2] { 0x2, 0x77 }, new ushort[2] { 0x13B, 0x77 }, new ushort[2] { 0x137, 0x77 }, new ushort[2] { 0x106, 0x77 }, new ushort[2] { 0x13C, 0x77 }, new ushort[2] { 0xF0, 0x77 }, new ushort[2] { 0xF1, 0x77 }, new ushort[2] { 0x152, 0x77 }, new ushort[2] { 0x138, 0x77 }, new ushort[2] { 0x13A, 0x77 }, new ushort[2] { 0x139, 0x77 } };

        private static ushort[] p_StateExpectedIDs_BF = { 0xF0, 0xF1, 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_BF = { "_T[]]", "_T[,]", "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_BF = { "[exp_op0_array_creation -> new type_non_array [ . exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> new type_non_array [ . exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> new type_non_array [ . exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> new type_non_array [ . exp_expression_list ]]", "[type_array_rank -> [ . type_array_rank_dim ]]", "[exp_expression_list -> . expression]", "[exp_expression_list -> . exp_expression_list , expression]", "[type_array_rank_dim -> . _m242]", "[expression -> . exp_op12_conditional]", "[expression -> . exp_op13_assigment]", "[_m242 -> . , _m242]", "[_m242 -> . ]", "[exp_op12_conditional -> . exp_op11]", "[exp_op12_conditional -> . exp_op11 ? expression : expression]", "[exp_op13_assigment -> . exp_op1 = expression]", "[exp_op13_assigment -> . exp_op1 += expression]", "[exp_op13_assigment -> . exp_op1 -= expression]", "[exp_op13_assigment -> . exp_op1 *= expression]", "[exp_op13_assigment -> . exp_op1 /= expression]", "[exp_op13_assigment -> . exp_op1 %= expression]", "[exp_op13_assigment -> . exp_op1 &= expression]", "[exp_op13_assigment -> . exp_op1 |= expression]", "[exp_op13_assigment -> . exp_op1 ^= expression]", "[exp_op13_assigment -> . exp_op1 <<= expression]", "[exp_op13_assigment -> . exp_op1 >>= expression]", "[exp_op11 -> . exp_op10]", "[exp_op11 -> . exp_op11 || exp_op10]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op10 -> . exp_op9]", "[exp_op10 -> . exp_op10 && exp_op9]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op9 -> . exp_op8]", "[exp_op9 -> . exp_op9 | exp_op8]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_op8 -> . exp_op7]", "[exp_op8 -> . exp_op8 ^ exp_op7]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[exp_op7 -> . exp_op6]", "[exp_op7 -> . exp_op7 & exp_op6]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]", "[exp_op6 -> . exp_op5]", "[exp_op6 -> . exp_op6 == exp_op5]", "[exp_op6 -> . exp_op6 != exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]" };
        private static ushort[][] p_StateShiftsOnTerminal_BF = { new ushort[2] { 0xF1, 0xE3 }, new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_BF = { new ushort[2] { 0x3E, 0xE5 }, new ushort[2] { 0x1D, 0xE1 }, new ushort[2] { 0x3D, 0xE6 }, new ushort[2] { 0xF2, 0xE2 }, new ushort[2] { 0x3B, 0x3 }, new ushort[2] { 0x3C, 0x4 }, new ushort[2] { 0x3A, 0x5 }, new ushort[2] { 0x30, 0x6 }, new ushort[2] { 0x39, 0x7 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x38, 0x10 }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x37, 0x16 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x36, 0x21 }, new ushort[2] { 0x1E, 0x2E }, new ushort[2] { 0x35, 0x32 }, new ushort[2] { 0x34, 0x42 }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 } };
        private static ushort[][] p_StateReducsOnTerminal_BF = { new ushort[2] { 0xF0, 0x223 } };

        private static ushort[] p_StateExpectedIDs_C0 = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_C0 = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_C0 = { "[exp_op0_array_creation -> new type_array array_initializer . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_C0 = { };
        private static ushort[][] p_StateShiftsOnVariable_C0 = { };
        private static ushort[][] p_StateReducsOnTerminal_C0 = { new ushort[2] { 0x13D, 0x49 }, new ushort[2] { 0x13E, 0x49 }, new ushort[2] { 0x13F, 0x49 }, new ushort[2] { 0x140, 0x49 }, new ushort[2] { 0x141, 0x49 }, new ushort[2] { 0x142, 0x49 }, new ushort[2] { 0x143, 0x49 }, new ushort[2] { 0x144, 0x49 }, new ushort[2] { 0x145, 0x49 }, new ushort[2] { 0x146, 0x49 }, new ushort[2] { 0x147, 0x49 }, new ushort[2] { 0x2, 0x49 }, new ushort[2] { 0x13B, 0x49 }, new ushort[2] { 0x106, 0x49 }, new ushort[2] { 0x13C, 0x49 }, new ushort[2] { 0xF0, 0x49 }, new ushort[2] { 0xF1, 0x49 }, new ushort[2] { 0x152, 0x49 }, new ushort[2] { 0x13A, 0x49 }, new ushort[2] { 0x139, 0x49 }, new ushort[2] { 0x138, 0x49 }, new ushort[2] { 0x137, 0x49 }, new ushort[2] { 0x136, 0x49 }, new ushort[2] { 0x134, 0x49 }, new ushort[2] { 0x135, 0x49 }, new ushort[2] { 0x12E, 0x49 }, new ushort[2] { 0x12F, 0x49 }, new ushort[2] { 0x130, 0x49 }, new ushort[2] { 0x131, 0x49 }, new ushort[2] { 0x132, 0x49 }, new ushort[2] { 0x133, 0x49 }, new ushort[2] { 0x12C, 0x49 }, new ushort[2] { 0x12D, 0x49 }, new ushort[2] { 0x123, 0x49 }, new ushort[2] { 0x124, 0x49 }, new ushort[2] { 0x127, 0x49 }, new ushort[2] { 0x128, 0x49 }, new ushort[2] { 0x129, 0x49 } };

        private static ushort[] p_StateExpectedIDs_C1 = { 0x152, 0x151, 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_C1 = { "_T[}]", "_T[{]", "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_C1 = { "[array_initializer -> { . variable_initializer_list }]", "[variable_initializer_list -> . variable_initializer _m340]", "[variable_initializer_list -> . ]", "[variable_initializer -> . expression]", "[variable_initializer -> . array_initializer]", "[expression -> . exp_op12_conditional]", "[expression -> . exp_op13_assigment]", "[array_initializer -> . { variable_initializer_list }]", "[exp_op12_conditional -> . exp_op11]", "[exp_op12_conditional -> . exp_op11 ? expression : expression]", "[exp_op13_assigment -> . exp_op1 = expression]", "[exp_op13_assigment -> . exp_op1 += expression]", "[exp_op13_assigment -> . exp_op1 -= expression]", "[exp_op13_assigment -> . exp_op1 *= expression]", "[exp_op13_assigment -> . exp_op1 /= expression]", "[exp_op13_assigment -> . exp_op1 %= expression]", "[exp_op13_assigment -> . exp_op1 &= expression]", "[exp_op13_assigment -> . exp_op1 |= expression]", "[exp_op13_assigment -> . exp_op1 ^= expression]", "[exp_op13_assigment -> . exp_op1 <<= expression]", "[exp_op13_assigment -> . exp_op1 >>= expression]", "[exp_op11 -> . exp_op10]", "[exp_op11 -> . exp_op11 || exp_op10]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op10 -> . exp_op9]", "[exp_op10 -> . exp_op10 && exp_op9]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op9 -> . exp_op8]", "[exp_op9 -> . exp_op9 | exp_op8]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_op8 -> . exp_op7]", "[exp_op8 -> . exp_op8 ^ exp_op7]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[exp_op7 -> . exp_op6]", "[exp_op7 -> . exp_op7 & exp_op6]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]", "[exp_op6 -> . exp_op5]", "[exp_op6 -> . exp_op6 == exp_op5]", "[exp_op6 -> . exp_op6 != exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]" };
        private static ushort[][] p_StateShiftsOnTerminal_C1 = { new ushort[2] { 0x151, 0xC1 }, new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_C1 = { new ushort[2] { 0x48, 0xE7 }, new ushort[2] { 0x47, 0xE8 }, new ushort[2] { 0x3D, 0xE9 }, new ushort[2] { 0x46, 0xEA }, new ushort[2] { 0x3B, 0x3 }, new ushort[2] { 0x3C, 0x4 }, new ushort[2] { 0x3A, 0x5 }, new ushort[2] { 0x30, 0x6 }, new ushort[2] { 0x39, 0x7 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x38, 0x10 }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x37, 0x16 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x36, 0x21 }, new ushort[2] { 0x1E, 0x2E }, new ushort[2] { 0x35, 0x32 }, new ushort[2] { 0x34, 0x42 }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 } };
        private static ushort[][] p_StateReducsOnTerminal_C1 = { new ushort[2] { 0x152, 0xA2 } };

        private static ushort[] p_StateExpectedIDs_C2 = { 0x106, 0x14A, 0x14B, 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_C2 = { "_T[)]", "_T[ref]", "_T[out]", "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_C2 = { "[exp_op0_obj_creation -> new type ( . exp_argument_list )]", "[exp_op0_obj_creation -> new type ( . )]", "[exp_argument_list -> . exp_argument]", "[exp_argument_list -> . exp_argument_list , exp_argument]", "[exp_argument -> . expression]", "[exp_argument -> . ref expression]", "[exp_argument -> . out expression]", "[expression -> . exp_op12_conditional]", "[expression -> . exp_op13_assigment]", "[exp_op12_conditional -> . exp_op11]", "[exp_op12_conditional -> . exp_op11 ? expression : expression]", "[exp_op13_assigment -> . exp_op1 = expression]", "[exp_op13_assigment -> . exp_op1 += expression]", "[exp_op13_assigment -> . exp_op1 -= expression]", "[exp_op13_assigment -> . exp_op1 *= expression]", "[exp_op13_assigment -> . exp_op1 /= expression]", "[exp_op13_assigment -> . exp_op1 %= expression]", "[exp_op13_assigment -> . exp_op1 &= expression]", "[exp_op13_assigment -> . exp_op1 |= expression]", "[exp_op13_assigment -> . exp_op1 ^= expression]", "[exp_op13_assigment -> . exp_op1 <<= expression]", "[exp_op13_assigment -> . exp_op1 >>= expression]", "[exp_op11 -> . exp_op10]", "[exp_op11 -> . exp_op11 || exp_op10]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op10 -> . exp_op9]", "[exp_op10 -> . exp_op10 && exp_op9]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op9 -> . exp_op8]", "[exp_op9 -> . exp_op9 | exp_op8]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_op8 -> . exp_op7]", "[exp_op8 -> . exp_op8 ^ exp_op7]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[exp_op7 -> . exp_op6]", "[exp_op7 -> . exp_op7 & exp_op6]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]", "[exp_op6 -> . exp_op5]", "[exp_op6 -> . exp_op6 == exp_op5]", "[exp_op6 -> . exp_op6 != exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]" };
        private static ushort[][] p_StateShiftsOnTerminal_C2 = { new ushort[2] { 0x106, 0xEC }, new ushort[2] { 0x14A, 0xB4 }, new ushort[2] { 0x14B, 0xB5 }, new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_C2 = { new ushort[2] { 0x3F, 0xEB }, new ushort[2] { 0x40, 0xB2 }, new ushort[2] { 0x3D, 0xB3 }, new ushort[2] { 0x3B, 0x3 }, new ushort[2] { 0x3C, 0x4 }, new ushort[2] { 0x3A, 0x5 }, new ushort[2] { 0x30, 0x6 }, new ushort[2] { 0x39, 0x7 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x38, 0x10 }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x37, 0x16 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x36, 0x21 }, new ushort[2] { 0x1E, 0x2E }, new ushort[2] { 0x35, 0x32 }, new ushort[2] { 0x34, 0x42 }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 } };
        private static ushort[][] p_StateReducsOnTerminal_C2 = { };

        private static ushort[] p_StateExpectedIDs_C3 = { 0x2, 0x13B, 0x136, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x137, 0x13A, 0x139, 0x138, 0x134, 0x135 };
        private static string[] p_StateExpectedNames_C3 = { "$", "_T[?]", "_T[&]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[^]", "_T[||]", "_T[&&]", "_T[|]", "_T[==]", "_T[!=]" };
        private static string[] p_StateItems_C3 = { "[exp_op7 -> exp_op7 & exp_op6 . ]", "[exp_op6 -> exp_op6 . == exp_op5]", "[exp_op6 -> exp_op6 . != exp_op5]" };
        private static ushort[][] p_StateShiftsOnTerminal_C3 = { new ushort[2] { 0x134, 0x92 }, new ushort[2] { 0x135, 0x93 } };
        private static ushort[][] p_StateShiftsOnVariable_C3 = { };
        private static ushort[][] p_StateReducsOnTerminal_C3 = { new ushort[2] { 0x2, 0x75 }, new ushort[2] { 0x13B, 0x75 }, new ushort[2] { 0x136, 0x75 }, new ushort[2] { 0x106, 0x75 }, new ushort[2] { 0x13C, 0x75 }, new ushort[2] { 0xF0, 0x75 }, new ushort[2] { 0xF1, 0x75 }, new ushort[2] { 0x152, 0x75 }, new ushort[2] { 0x137, 0x75 }, new ushort[2] { 0x13A, 0x75 }, new ushort[2] { 0x139, 0x75 }, new ushort[2] { 0x138, 0x75 } };

        private static ushort[] p_StateExpectedIDs_C4 = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_C4 = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_C4 = { "[exp_op0_member_access -> type_predefined . IDENTIFIER . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_C4 = { };
        private static ushort[][] p_StateShiftsOnVariable_C4 = { };
        private static ushort[][] p_StateReducsOnTerminal_C4 = { new ushort[2] { 0x13D, 0x3F }, new ushort[2] { 0x13E, 0x3F }, new ushort[2] { 0x13F, 0x3F }, new ushort[2] { 0x140, 0x3F }, new ushort[2] { 0x141, 0x3F }, new ushort[2] { 0x142, 0x3F }, new ushort[2] { 0x143, 0x3F }, new ushort[2] { 0x144, 0x3F }, new ushort[2] { 0x145, 0x3F }, new ushort[2] { 0x146, 0x3F }, new ushort[2] { 0x147, 0x3F }, new ushort[2] { 0x2, 0x3F }, new ushort[2] { 0x13B, 0x3F }, new ushort[2] { 0x106, 0x3F }, new ushort[2] { 0x13C, 0x3F }, new ushort[2] { 0xF0, 0x3F }, new ushort[2] { 0xF1, 0x3F }, new ushort[2] { 0x152, 0x3F }, new ushort[2] { 0x13A, 0x3F }, new ushort[2] { 0x139, 0x3F }, new ushort[2] { 0x138, 0x3F }, new ushort[2] { 0x137, 0x3F }, new ushort[2] { 0x136, 0x3F }, new ushort[2] { 0x134, 0x3F }, new ushort[2] { 0x135, 0x3F }, new ushort[2] { 0x12E, 0x3F }, new ushort[2] { 0x12F, 0x3F }, new ushort[2] { 0x130, 0x3F }, new ushort[2] { 0x131, 0x3F }, new ushort[2] { 0x132, 0x3F }, new ushort[2] { 0x133, 0x3F }, new ushort[2] { 0x12C, 0x3F }, new ushort[2] { 0x12D, 0x3F }, new ushort[2] { 0x123, 0x3F }, new ushort[2] { 0x124, 0x3F }, new ushort[2] { 0x127, 0x3F }, new ushort[2] { 0x128, 0x3F }, new ushort[2] { 0x129, 0x3F } };

        private static ushort[] p_StateExpectedIDs_C5 = { 0x106 };
        private static string[] p_StateExpectedNames_C5 = { "_T[)]" };
        private static string[] p_StateItems_C5 = { "[exp_op0_typeof -> typeof ( type_return . )]" };
        private static ushort[][] p_StateShiftsOnTerminal_C5 = { new ushort[2] { 0x106, 0xED } };
        private static ushort[][] p_StateShiftsOnVariable_C5 = { };
        private static ushort[][] p_StateReducsOnTerminal_C5 = { };

        private static ushort[] p_StateExpectedIDs_C6 = { 0x106 };
        private static string[] p_StateExpectedNames_C6 = { "_T[)]" };
        private static string[] p_StateItems_C6 = { "[type_return -> void . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_C6 = { };
        private static ushort[][] p_StateShiftsOnVariable_C6 = { };
        private static ushort[][] p_StateReducsOnTerminal_C6 = { new ushort[2] { 0x106, 0x29 } };

        private static ushort[] p_StateExpectedIDs_C7 = { 0x106 };
        private static string[] p_StateExpectedNames_C7 = { "_T[)]" };
        private static string[] p_StateItems_C7 = { "[type_return -> type . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_C7 = { };
        private static ushort[][] p_StateShiftsOnVariable_C7 = { };
        private static ushort[][] p_StateReducsOnTerminal_C7 = { new ushort[2] { 0x106, 0x2A } };

        private static ushort[] p_StateExpectedIDs_C8 = { 0x106 };
        private static string[] p_StateExpectedNames_C8 = { "_T[)]" };
        private static string[] p_StateItems_C8 = { "[exp_op0_checked -> checked ( expression . )]" };
        private static ushort[][] p_StateShiftsOnTerminal_C8 = { new ushort[2] { 0x106, 0xEE } };
        private static ushort[][] p_StateShiftsOnVariable_C8 = { };
        private static ushort[][] p_StateReducsOnTerminal_C8 = { };

        private static ushort[] p_StateExpectedIDs_C9 = { 0x106 };
        private static string[] p_StateExpectedNames_C9 = { "_T[)]" };
        private static string[] p_StateItems_C9 = { "[exp_op0_unchecked -> unchecked ( expression . )]" };
        private static ushort[][] p_StateShiftsOnTerminal_C9 = { new ushort[2] { 0x106, 0xEF } };
        private static ushort[][] p_StateShiftsOnVariable_C9 = { };
        private static ushort[][] p_StateReducsOnTerminal_C9 = { };

        private static ushort[] p_StateExpectedIDs_CA = { 0x2, 0x13B, 0x134, 0x135, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x136, 0x13A, 0x139, 0x138, 0x137, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133 };
        private static string[] p_StateExpectedNames_CA = { "$", "_T[?]", "_T[==]", "_T[!=]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[&]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]" };
        private static string[] p_StateItems_CA = { "[exp_op6 -> exp_op6 == exp_op5 . ]", "[exp_op5 -> exp_op5 . < exp_op4]", "[exp_op5 -> exp_op5 . <= exp_op4]", "[exp_op5 -> exp_op5 . > exp_op4]", "[exp_op5 -> exp_op5 . >= exp_op4]", "[exp_op5 -> exp_op5 . is exp_op4]", "[exp_op5 -> exp_op5 . as exp_op4]" };
        private static ushort[][] p_StateShiftsOnTerminal_CA = { new ushort[2] { 0x12E, 0x94 }, new ushort[2] { 0x12F, 0x95 }, new ushort[2] { 0x130, 0x96 }, new ushort[2] { 0x131, 0x97 }, new ushort[2] { 0x132, 0x98 }, new ushort[2] { 0x133, 0x99 } };
        private static ushort[][] p_StateShiftsOnVariable_CA = { };
        private static ushort[][] p_StateReducsOnTerminal_CA = { new ushort[2] { 0x2, 0x72 }, new ushort[2] { 0x13B, 0x72 }, new ushort[2] { 0x134, 0x72 }, new ushort[2] { 0x135, 0x72 }, new ushort[2] { 0x106, 0x72 }, new ushort[2] { 0x13C, 0x72 }, new ushort[2] { 0xF0, 0x72 }, new ushort[2] { 0xF1, 0x72 }, new ushort[2] { 0x152, 0x72 }, new ushort[2] { 0x136, 0x72 }, new ushort[2] { 0x13A, 0x72 }, new ushort[2] { 0x139, 0x72 }, new ushort[2] { 0x138, 0x72 }, new ushort[2] { 0x137, 0x72 } };

        private static ushort[] p_StateExpectedIDs_CB = { 0x2, 0x13B, 0x134, 0x135, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x136, 0x13A, 0x139, 0x138, 0x137, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133 };
        private static string[] p_StateExpectedNames_CB = { "$", "_T[?]", "_T[==]", "_T[!=]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[&]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]" };
        private static string[] p_StateItems_CB = { "[exp_op6 -> exp_op6 != exp_op5 . ]", "[exp_op5 -> exp_op5 . < exp_op4]", "[exp_op5 -> exp_op5 . <= exp_op4]", "[exp_op5 -> exp_op5 . > exp_op4]", "[exp_op5 -> exp_op5 . >= exp_op4]", "[exp_op5 -> exp_op5 . is exp_op4]", "[exp_op5 -> exp_op5 . as exp_op4]" };
        private static ushort[][] p_StateShiftsOnTerminal_CB = { new ushort[2] { 0x12E, 0x94 }, new ushort[2] { 0x12F, 0x95 }, new ushort[2] { 0x130, 0x96 }, new ushort[2] { 0x131, 0x97 }, new ushort[2] { 0x132, 0x98 }, new ushort[2] { 0x133, 0x99 } };
        private static ushort[][] p_StateShiftsOnVariable_CB = { };
        private static ushort[][] p_StateReducsOnTerminal_CB = { new ushort[2] { 0x2, 0x73 }, new ushort[2] { 0x13B, 0x73 }, new ushort[2] { 0x134, 0x73 }, new ushort[2] { 0x135, 0x73 }, new ushort[2] { 0x106, 0x73 }, new ushort[2] { 0x13C, 0x73 }, new ushort[2] { 0xF0, 0x73 }, new ushort[2] { 0xF1, 0x73 }, new ushort[2] { 0x152, 0x73 }, new ushort[2] { 0x136, 0x73 }, new ushort[2] { 0x13A, 0x73 }, new ushort[2] { 0x139, 0x73 }, new ushort[2] { 0x138, 0x73 }, new ushort[2] { 0x137, 0x73 } };

        private static ushort[] p_StateExpectedIDs_CC = { 0x2, 0x13B, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x134, 0x135, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x12C, 0x12D };
        private static string[] p_StateExpectedNames_CC = { "$", "_T[?]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[==]", "_T[!=]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[<<]", "_T[>>]" };
        private static string[] p_StateItems_CC = { "[exp_op5 -> exp_op5 < exp_op4 . ]", "[exp_op4 -> exp_op4 . << exp_op3]", "[exp_op4 -> exp_op4 . >> exp_op3]" };
        private static ushort[][] p_StateShiftsOnTerminal_CC = { new ushort[2] { 0x12C, 0x9A }, new ushort[2] { 0x12D, 0x9B } };
        private static ushort[][] p_StateShiftsOnVariable_CC = { };
        private static ushort[][] p_StateReducsOnTerminal_CC = { new ushort[2] { 0x2, 0x6B }, new ushort[2] { 0x13B, 0x6B }, new ushort[2] { 0x12E, 0x6B }, new ushort[2] { 0x12F, 0x6B }, new ushort[2] { 0x130, 0x6B }, new ushort[2] { 0x131, 0x6B }, new ushort[2] { 0x132, 0x6B }, new ushort[2] { 0x133, 0x6B }, new ushort[2] { 0x106, 0x6B }, new ushort[2] { 0x13C, 0x6B }, new ushort[2] { 0xF0, 0x6B }, new ushort[2] { 0xF1, 0x6B }, new ushort[2] { 0x152, 0x6B }, new ushort[2] { 0x134, 0x6B }, new ushort[2] { 0x135, 0x6B }, new ushort[2] { 0x13A, 0x6B }, new ushort[2] { 0x139, 0x6B }, new ushort[2] { 0x138, 0x6B }, new ushort[2] { 0x137, 0x6B }, new ushort[2] { 0x136, 0x6B } };

        private static ushort[] p_StateExpectedIDs_CD = { 0x2, 0x13B, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x134, 0x135, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x12C, 0x12D };
        private static string[] p_StateExpectedNames_CD = { "$", "_T[?]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[==]", "_T[!=]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[<<]", "_T[>>]" };
        private static string[] p_StateItems_CD = { "[exp_op5 -> exp_op5 <= exp_op4 . ]", "[exp_op4 -> exp_op4 . << exp_op3]", "[exp_op4 -> exp_op4 . >> exp_op3]" };
        private static ushort[][] p_StateShiftsOnTerminal_CD = { new ushort[2] { 0x12C, 0x9A }, new ushort[2] { 0x12D, 0x9B } };
        private static ushort[][] p_StateShiftsOnVariable_CD = { };
        private static ushort[][] p_StateReducsOnTerminal_CD = { new ushort[2] { 0x2, 0x6C }, new ushort[2] { 0x13B, 0x6C }, new ushort[2] { 0x12E, 0x6C }, new ushort[2] { 0x12F, 0x6C }, new ushort[2] { 0x130, 0x6C }, new ushort[2] { 0x131, 0x6C }, new ushort[2] { 0x132, 0x6C }, new ushort[2] { 0x133, 0x6C }, new ushort[2] { 0x106, 0x6C }, new ushort[2] { 0x13C, 0x6C }, new ushort[2] { 0xF0, 0x6C }, new ushort[2] { 0xF1, 0x6C }, new ushort[2] { 0x152, 0x6C }, new ushort[2] { 0x134, 0x6C }, new ushort[2] { 0x135, 0x6C }, new ushort[2] { 0x13A, 0x6C }, new ushort[2] { 0x139, 0x6C }, new ushort[2] { 0x138, 0x6C }, new ushort[2] { 0x137, 0x6C }, new ushort[2] { 0x136, 0x6C } };

        private static ushort[] p_StateExpectedIDs_CE = { 0x2, 0x13B, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x134, 0x135, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x12C, 0x12D };
        private static string[] p_StateExpectedNames_CE = { "$", "_T[?]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[==]", "_T[!=]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[<<]", "_T[>>]" };
        private static string[] p_StateItems_CE = { "[exp_op5 -> exp_op5 > exp_op4 . ]", "[exp_op4 -> exp_op4 . << exp_op3]", "[exp_op4 -> exp_op4 . >> exp_op3]" };
        private static ushort[][] p_StateShiftsOnTerminal_CE = { new ushort[2] { 0x12C, 0x9A }, new ushort[2] { 0x12D, 0x9B } };
        private static ushort[][] p_StateShiftsOnVariable_CE = { };
        private static ushort[][] p_StateReducsOnTerminal_CE = { new ushort[2] { 0x2, 0x6D }, new ushort[2] { 0x13B, 0x6D }, new ushort[2] { 0x12E, 0x6D }, new ushort[2] { 0x12F, 0x6D }, new ushort[2] { 0x130, 0x6D }, new ushort[2] { 0x131, 0x6D }, new ushort[2] { 0x132, 0x6D }, new ushort[2] { 0x133, 0x6D }, new ushort[2] { 0x106, 0x6D }, new ushort[2] { 0x13C, 0x6D }, new ushort[2] { 0xF0, 0x6D }, new ushort[2] { 0xF1, 0x6D }, new ushort[2] { 0x152, 0x6D }, new ushort[2] { 0x134, 0x6D }, new ushort[2] { 0x135, 0x6D }, new ushort[2] { 0x13A, 0x6D }, new ushort[2] { 0x139, 0x6D }, new ushort[2] { 0x138, 0x6D }, new ushort[2] { 0x137, 0x6D }, new ushort[2] { 0x136, 0x6D } };

        private static ushort[] p_StateExpectedIDs_CF = { 0x2, 0x13B, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x134, 0x135, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x12C, 0x12D };
        private static string[] p_StateExpectedNames_CF = { "$", "_T[?]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[==]", "_T[!=]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[<<]", "_T[>>]" };
        private static string[] p_StateItems_CF = { "[exp_op5 -> exp_op5 >= exp_op4 . ]", "[exp_op4 -> exp_op4 . << exp_op3]", "[exp_op4 -> exp_op4 . >> exp_op3]" };
        private static ushort[][] p_StateShiftsOnTerminal_CF = { new ushort[2] { 0x12C, 0x9A }, new ushort[2] { 0x12D, 0x9B } };
        private static ushort[][] p_StateShiftsOnVariable_CF = { };
        private static ushort[][] p_StateReducsOnTerminal_CF = { new ushort[2] { 0x2, 0x6E }, new ushort[2] { 0x13B, 0x6E }, new ushort[2] { 0x12E, 0x6E }, new ushort[2] { 0x12F, 0x6E }, new ushort[2] { 0x130, 0x6E }, new ushort[2] { 0x131, 0x6E }, new ushort[2] { 0x132, 0x6E }, new ushort[2] { 0x133, 0x6E }, new ushort[2] { 0x106, 0x6E }, new ushort[2] { 0x13C, 0x6E }, new ushort[2] { 0xF0, 0x6E }, new ushort[2] { 0xF1, 0x6E }, new ushort[2] { 0x152, 0x6E }, new ushort[2] { 0x134, 0x6E }, new ushort[2] { 0x135, 0x6E }, new ushort[2] { 0x13A, 0x6E }, new ushort[2] { 0x139, 0x6E }, new ushort[2] { 0x138, 0x6E }, new ushort[2] { 0x137, 0x6E }, new ushort[2] { 0x136, 0x6E } };

        private static ushort[] p_StateExpectedIDs_D0 = { 0x2, 0x13B, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x134, 0x135, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x12C, 0x12D };
        private static string[] p_StateExpectedNames_D0 = { "$", "_T[?]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[==]", "_T[!=]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[<<]", "_T[>>]" };
        private static string[] p_StateItems_D0 = { "[exp_op5 -> exp_op5 is exp_op4 . ]", "[exp_op4 -> exp_op4 . << exp_op3]", "[exp_op4 -> exp_op4 . >> exp_op3]" };
        private static ushort[][] p_StateShiftsOnTerminal_D0 = { new ushort[2] { 0x12C, 0x9A }, new ushort[2] { 0x12D, 0x9B } };
        private static ushort[][] p_StateShiftsOnVariable_D0 = { };
        private static ushort[][] p_StateReducsOnTerminal_D0 = { new ushort[2] { 0x2, 0x6F }, new ushort[2] { 0x13B, 0x6F }, new ushort[2] { 0x12E, 0x6F }, new ushort[2] { 0x12F, 0x6F }, new ushort[2] { 0x130, 0x6F }, new ushort[2] { 0x131, 0x6F }, new ushort[2] { 0x132, 0x6F }, new ushort[2] { 0x133, 0x6F }, new ushort[2] { 0x106, 0x6F }, new ushort[2] { 0x13C, 0x6F }, new ushort[2] { 0xF0, 0x6F }, new ushort[2] { 0xF1, 0x6F }, new ushort[2] { 0x152, 0x6F }, new ushort[2] { 0x134, 0x6F }, new ushort[2] { 0x135, 0x6F }, new ushort[2] { 0x13A, 0x6F }, new ushort[2] { 0x139, 0x6F }, new ushort[2] { 0x138, 0x6F }, new ushort[2] { 0x137, 0x6F }, new ushort[2] { 0x136, 0x6F } };

        private static ushort[] p_StateExpectedIDs_D1 = { 0x2, 0x13B, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x134, 0x135, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x12C, 0x12D };
        private static string[] p_StateExpectedNames_D1 = { "$", "_T[?]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[==]", "_T[!=]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[<<]", "_T[>>]" };
        private static string[] p_StateItems_D1 = { "[exp_op5 -> exp_op5 as exp_op4 . ]", "[exp_op4 -> exp_op4 . << exp_op3]", "[exp_op4 -> exp_op4 . >> exp_op3]" };
        private static ushort[][] p_StateShiftsOnTerminal_D1 = { new ushort[2] { 0x12C, 0x9A }, new ushort[2] { 0x12D, 0x9B } };
        private static ushort[][] p_StateShiftsOnVariable_D1 = { };
        private static ushort[][] p_StateReducsOnTerminal_D1 = { new ushort[2] { 0x2, 0x70 }, new ushort[2] { 0x13B, 0x70 }, new ushort[2] { 0x12E, 0x70 }, new ushort[2] { 0x12F, 0x70 }, new ushort[2] { 0x130, 0x70 }, new ushort[2] { 0x131, 0x70 }, new ushort[2] { 0x132, 0x70 }, new ushort[2] { 0x133, 0x70 }, new ushort[2] { 0x106, 0x70 }, new ushort[2] { 0x13C, 0x70 }, new ushort[2] { 0xF0, 0x70 }, new ushort[2] { 0xF1, 0x70 }, new ushort[2] { 0x152, 0x70 }, new ushort[2] { 0x134, 0x70 }, new ushort[2] { 0x135, 0x70 }, new ushort[2] { 0x13A, 0x70 }, new ushort[2] { 0x139, 0x70 }, new ushort[2] { 0x138, 0x70 }, new ushort[2] { 0x137, 0x70 }, new ushort[2] { 0x136, 0x70 } };

        private static ushort[] p_StateExpectedIDs_D2 = { 0x2, 0x13B, 0x12C, 0x12D, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x123, 0x124 };
        private static string[] p_StateExpectedNames_D2 = { "$", "_T[?]", "_T[<<]", "_T[>>]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[+]", "_T[-]" };
        private static string[] p_StateItems_D2 = { "[exp_op4 -> exp_op4 << exp_op3 . ]", "[exp_op3 -> exp_op3 . + exp_op2]", "[exp_op3 -> exp_op3 . - exp_op2]" };
        private static ushort[][] p_StateShiftsOnTerminal_D2 = { new ushort[2] { 0x123, 0x9C }, new ushort[2] { 0x124, 0x9D } };
        private static ushort[][] p_StateShiftsOnVariable_D2 = { };
        private static ushort[][] p_StateReducsOnTerminal_D2 = { new ushort[2] { 0x2, 0x68 }, new ushort[2] { 0x13B, 0x68 }, new ushort[2] { 0x12C, 0x68 }, new ushort[2] { 0x12D, 0x68 }, new ushort[2] { 0x106, 0x68 }, new ushort[2] { 0x13C, 0x68 }, new ushort[2] { 0xF0, 0x68 }, new ushort[2] { 0xF1, 0x68 }, new ushort[2] { 0x152, 0x68 }, new ushort[2] { 0x12E, 0x68 }, new ushort[2] { 0x12F, 0x68 }, new ushort[2] { 0x130, 0x68 }, new ushort[2] { 0x131, 0x68 }, new ushort[2] { 0x132, 0x68 }, new ushort[2] { 0x133, 0x68 }, new ushort[2] { 0x13A, 0x68 }, new ushort[2] { 0x139, 0x68 }, new ushort[2] { 0x138, 0x68 }, new ushort[2] { 0x137, 0x68 }, new ushort[2] { 0x136, 0x68 }, new ushort[2] { 0x134, 0x68 }, new ushort[2] { 0x135, 0x68 } };

        private static ushort[] p_StateExpectedIDs_D3 = { 0x2, 0x13B, 0x12C, 0x12D, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x123, 0x124 };
        private static string[] p_StateExpectedNames_D3 = { "$", "_T[?]", "_T[<<]", "_T[>>]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[+]", "_T[-]" };
        private static string[] p_StateItems_D3 = { "[exp_op4 -> exp_op4 >> exp_op3 . ]", "[exp_op3 -> exp_op3 . + exp_op2]", "[exp_op3 -> exp_op3 . - exp_op2]" };
        private static ushort[][] p_StateShiftsOnTerminal_D3 = { new ushort[2] { 0x123, 0x9C }, new ushort[2] { 0x124, 0x9D } };
        private static ushort[][] p_StateShiftsOnVariable_D3 = { };
        private static ushort[][] p_StateReducsOnTerminal_D3 = { new ushort[2] { 0x2, 0x69 }, new ushort[2] { 0x13B, 0x69 }, new ushort[2] { 0x12C, 0x69 }, new ushort[2] { 0x12D, 0x69 }, new ushort[2] { 0x106, 0x69 }, new ushort[2] { 0x13C, 0x69 }, new ushort[2] { 0xF0, 0x69 }, new ushort[2] { 0xF1, 0x69 }, new ushort[2] { 0x152, 0x69 }, new ushort[2] { 0x12E, 0x69 }, new ushort[2] { 0x12F, 0x69 }, new ushort[2] { 0x130, 0x69 }, new ushort[2] { 0x131, 0x69 }, new ushort[2] { 0x132, 0x69 }, new ushort[2] { 0x133, 0x69 }, new ushort[2] { 0x13A, 0x69 }, new ushort[2] { 0x139, 0x69 }, new ushort[2] { 0x138, 0x69 }, new ushort[2] { 0x137, 0x69 }, new ushort[2] { 0x136, 0x69 }, new ushort[2] { 0x134, 0x69 }, new ushort[2] { 0x135, 0x69 } };

        private static ushort[] p_StateExpectedIDs_D4 = { 0x2, 0x13B, 0x123, 0x124, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x12C, 0x12D, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_D4 = { "$", "_T[?]", "_T[+]", "_T[-]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[<<]", "_T[>>]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_D4 = { "[exp_op3 -> exp_op3 + exp_op2 . ]", "[exp_op2 -> exp_op2 . * exp_op1]", "[exp_op2 -> exp_op2 . / exp_op1]", "[exp_op2 -> exp_op2 . % exp_op1]" };
        private static ushort[][] p_StateShiftsOnTerminal_D4 = { new ushort[2] { 0x127, 0x9E }, new ushort[2] { 0x128, 0x9F }, new ushort[2] { 0x129, 0xA0 } };
        private static ushort[][] p_StateShiftsOnVariable_D4 = { };
        private static ushort[][] p_StateReducsOnTerminal_D4 = { new ushort[2] { 0x2, 0x65 }, new ushort[2] { 0x13B, 0x65 }, new ushort[2] { 0x123, 0x65 }, new ushort[2] { 0x124, 0x65 }, new ushort[2] { 0x106, 0x65 }, new ushort[2] { 0x13C, 0x65 }, new ushort[2] { 0xF0, 0x65 }, new ushort[2] { 0xF1, 0x65 }, new ushort[2] { 0x152, 0x65 }, new ushort[2] { 0x12C, 0x65 }, new ushort[2] { 0x12D, 0x65 }, new ushort[2] { 0x13A, 0x65 }, new ushort[2] { 0x139, 0x65 }, new ushort[2] { 0x138, 0x65 }, new ushort[2] { 0x137, 0x65 }, new ushort[2] { 0x136, 0x65 }, new ushort[2] { 0x134, 0x65 }, new ushort[2] { 0x135, 0x65 }, new ushort[2] { 0x12E, 0x65 }, new ushort[2] { 0x12F, 0x65 }, new ushort[2] { 0x130, 0x65 }, new ushort[2] { 0x131, 0x65 }, new ushort[2] { 0x132, 0x65 }, new ushort[2] { 0x133, 0x65 } };

        private static ushort[] p_StateExpectedIDs_D5 = { 0x2, 0x13B, 0x123, 0x124, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x12C, 0x12D, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_D5 = { "$", "_T[?]", "_T[+]", "_T[-]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[<<]", "_T[>>]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_D5 = { "[exp_op3 -> exp_op3 - exp_op2 . ]", "[exp_op2 -> exp_op2 . * exp_op1]", "[exp_op2 -> exp_op2 . / exp_op1]", "[exp_op2 -> exp_op2 . % exp_op1]" };
        private static ushort[][] p_StateShiftsOnTerminal_D5 = { new ushort[2] { 0x127, 0x9E }, new ushort[2] { 0x128, 0x9F }, new ushort[2] { 0x129, 0xA0 } };
        private static ushort[][] p_StateShiftsOnVariable_D5 = { };
        private static ushort[][] p_StateReducsOnTerminal_D5 = { new ushort[2] { 0x2, 0x66 }, new ushort[2] { 0x13B, 0x66 }, new ushort[2] { 0x123, 0x66 }, new ushort[2] { 0x124, 0x66 }, new ushort[2] { 0x106, 0x66 }, new ushort[2] { 0x13C, 0x66 }, new ushort[2] { 0xF0, 0x66 }, new ushort[2] { 0xF1, 0x66 }, new ushort[2] { 0x152, 0x66 }, new ushort[2] { 0x12C, 0x66 }, new ushort[2] { 0x12D, 0x66 }, new ushort[2] { 0x13A, 0x66 }, new ushort[2] { 0x139, 0x66 }, new ushort[2] { 0x138, 0x66 }, new ushort[2] { 0x137, 0x66 }, new ushort[2] { 0x136, 0x66 }, new ushort[2] { 0x134, 0x66 }, new ushort[2] { 0x135, 0x66 }, new ushort[2] { 0x12E, 0x66 }, new ushort[2] { 0x12F, 0x66 }, new ushort[2] { 0x130, 0x66 }, new ushort[2] { 0x131, 0x66 }, new ushort[2] { 0x132, 0x66 }, new ushort[2] { 0x133, 0x66 } };

        private static ushort[] p_StateExpectedIDs_D6 = { 0x2, 0x13B, 0x127, 0x128, 0x129, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x123, 0x124, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D };
        private static string[] p_StateExpectedNames_D6 = { "$", "_T[?]", "_T[*]", "_T[/]", "_T[%]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[+]", "_T[-]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]" };
        private static string[] p_StateItems_D6 = { "[exp_op2 -> exp_op2 * exp_op1 . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_D6 = { };
        private static ushort[][] p_StateShiftsOnVariable_D6 = { };
        private static ushort[][] p_StateReducsOnTerminal_D6 = { new ushort[2] { 0x2, 0x61 }, new ushort[2] { 0x13B, 0x61 }, new ushort[2] { 0x127, 0x61 }, new ushort[2] { 0x128, 0x61 }, new ushort[2] { 0x129, 0x61 }, new ushort[2] { 0x106, 0x61 }, new ushort[2] { 0x13C, 0x61 }, new ushort[2] { 0xF0, 0x61 }, new ushort[2] { 0xF1, 0x61 }, new ushort[2] { 0x152, 0x61 }, new ushort[2] { 0x123, 0x61 }, new ushort[2] { 0x124, 0x61 }, new ushort[2] { 0x13A, 0x61 }, new ushort[2] { 0x139, 0x61 }, new ushort[2] { 0x138, 0x61 }, new ushort[2] { 0x137, 0x61 }, new ushort[2] { 0x136, 0x61 }, new ushort[2] { 0x134, 0x61 }, new ushort[2] { 0x135, 0x61 }, new ushort[2] { 0x12E, 0x61 }, new ushort[2] { 0x12F, 0x61 }, new ushort[2] { 0x130, 0x61 }, new ushort[2] { 0x131, 0x61 }, new ushort[2] { 0x132, 0x61 }, new ushort[2] { 0x133, 0x61 }, new ushort[2] { 0x12C, 0x61 }, new ushort[2] { 0x12D, 0x61 } };

        private static ushort[] p_StateExpectedIDs_D7 = { 0x2, 0x13B, 0x127, 0x128, 0x129, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x123, 0x124, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D };
        private static string[] p_StateExpectedNames_D7 = { "$", "_T[?]", "_T[*]", "_T[/]", "_T[%]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[+]", "_T[-]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]" };
        private static string[] p_StateItems_D7 = { "[exp_op2 -> exp_op2 / exp_op1 . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_D7 = { };
        private static ushort[][] p_StateShiftsOnVariable_D7 = { };
        private static ushort[][] p_StateReducsOnTerminal_D7 = { new ushort[2] { 0x2, 0x62 }, new ushort[2] { 0x13B, 0x62 }, new ushort[2] { 0x127, 0x62 }, new ushort[2] { 0x128, 0x62 }, new ushort[2] { 0x129, 0x62 }, new ushort[2] { 0x106, 0x62 }, new ushort[2] { 0x13C, 0x62 }, new ushort[2] { 0xF0, 0x62 }, new ushort[2] { 0xF1, 0x62 }, new ushort[2] { 0x152, 0x62 }, new ushort[2] { 0x123, 0x62 }, new ushort[2] { 0x124, 0x62 }, new ushort[2] { 0x13A, 0x62 }, new ushort[2] { 0x139, 0x62 }, new ushort[2] { 0x138, 0x62 }, new ushort[2] { 0x137, 0x62 }, new ushort[2] { 0x136, 0x62 }, new ushort[2] { 0x134, 0x62 }, new ushort[2] { 0x135, 0x62 }, new ushort[2] { 0x12E, 0x62 }, new ushort[2] { 0x12F, 0x62 }, new ushort[2] { 0x130, 0x62 }, new ushort[2] { 0x131, 0x62 }, new ushort[2] { 0x132, 0x62 }, new ushort[2] { 0x133, 0x62 }, new ushort[2] { 0x12C, 0x62 }, new ushort[2] { 0x12D, 0x62 } };

        private static ushort[] p_StateExpectedIDs_D8 = { 0x2, 0x13B, 0x127, 0x128, 0x129, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x123, 0x124, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D };
        private static string[] p_StateExpectedNames_D8 = { "$", "_T[?]", "_T[*]", "_T[/]", "_T[%]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[+]", "_T[-]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]" };
        private static string[] p_StateItems_D8 = { "[exp_op2 -> exp_op2 % exp_op1 . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_D8 = { };
        private static ushort[][] p_StateShiftsOnVariable_D8 = { };
        private static ushort[][] p_StateReducsOnTerminal_D8 = { new ushort[2] { 0x2, 0x63 }, new ushort[2] { 0x13B, 0x63 }, new ushort[2] { 0x127, 0x63 }, new ushort[2] { 0x128, 0x63 }, new ushort[2] { 0x129, 0x63 }, new ushort[2] { 0x106, 0x63 }, new ushort[2] { 0x13C, 0x63 }, new ushort[2] { 0xF0, 0x63 }, new ushort[2] { 0xF1, 0x63 }, new ushort[2] { 0x152, 0x63 }, new ushort[2] { 0x123, 0x63 }, new ushort[2] { 0x124, 0x63 }, new ushort[2] { 0x13A, 0x63 }, new ushort[2] { 0x139, 0x63 }, new ushort[2] { 0x138, 0x63 }, new ushort[2] { 0x137, 0x63 }, new ushort[2] { 0x136, 0x63 }, new ushort[2] { 0x134, 0x63 }, new ushort[2] { 0x135, 0x63 }, new ushort[2] { 0x12E, 0x63 }, new ushort[2] { 0x12F, 0x63 }, new ushort[2] { 0x130, 0x63 }, new ushort[2] { 0x131, 0x63 }, new ushort[2] { 0x132, 0x63 }, new ushort[2] { 0x133, 0x63 }, new ushort[2] { 0x12C, 0x63 }, new ushort[2] { 0x12D, 0x63 } };

        private static ushort[] p_StateExpectedIDs_D9 = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_D9 = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_D9 = { "[exp_op12_conditional -> exp_op11 ? expression : . expression]", "[expression -> . exp_op12_conditional]", "[expression -> . exp_op13_assigment]", "[exp_op12_conditional -> . exp_op11]", "[exp_op12_conditional -> . exp_op11 ? expression : expression]", "[exp_op13_assigment -> . exp_op1 = expression]", "[exp_op13_assigment -> . exp_op1 += expression]", "[exp_op13_assigment -> . exp_op1 -= expression]", "[exp_op13_assigment -> . exp_op1 *= expression]", "[exp_op13_assigment -> . exp_op1 /= expression]", "[exp_op13_assigment -> . exp_op1 %= expression]", "[exp_op13_assigment -> . exp_op1 &= expression]", "[exp_op13_assigment -> . exp_op1 |= expression]", "[exp_op13_assigment -> . exp_op1 ^= expression]", "[exp_op13_assigment -> . exp_op1 <<= expression]", "[exp_op13_assigment -> . exp_op1 >>= expression]", "[exp_op11 -> . exp_op10]", "[exp_op11 -> . exp_op11 || exp_op10]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op10 -> . exp_op9]", "[exp_op10 -> . exp_op10 && exp_op9]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op9 -> . exp_op8]", "[exp_op9 -> . exp_op9 | exp_op8]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_op8 -> . exp_op7]", "[exp_op8 -> . exp_op8 ^ exp_op7]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[exp_op7 -> . exp_op6]", "[exp_op7 -> . exp_op7 & exp_op6]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]", "[exp_op6 -> . exp_op5]", "[exp_op6 -> . exp_op6 == exp_op5]", "[exp_op6 -> . exp_op6 != exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]" };
        private static ushort[][] p_StateShiftsOnTerminal_D9 = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_D9 = { new ushort[2] { 0x3D, 0xF0 }, new ushort[2] { 0x3B, 0x3 }, new ushort[2] { 0x3C, 0x4 }, new ushort[2] { 0x3A, 0x5 }, new ushort[2] { 0x30, 0x6 }, new ushort[2] { 0x39, 0x7 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x38, 0x10 }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x37, 0x16 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x36, 0x21 }, new ushort[2] { 0x1E, 0x2E }, new ushort[2] { 0x35, 0x32 }, new ushort[2] { 0x34, 0x42 }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 } };
        private static ushort[][] p_StateReducsOnTerminal_D9 = { };

        private static ushort[] p_StateExpectedIDs_DA = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_DA = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_DA = { "[exp_op0_invoke -> exp_op0 ( exp_argument_list ) . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_DA = { };
        private static ushort[][] p_StateShiftsOnVariable_DA = { };
        private static ushort[][] p_StateReducsOnTerminal_DA = { new ushort[2] { 0x13D, 0x38 }, new ushort[2] { 0x13E, 0x38 }, new ushort[2] { 0x13F, 0x38 }, new ushort[2] { 0x140, 0x38 }, new ushort[2] { 0x141, 0x38 }, new ushort[2] { 0x142, 0x38 }, new ushort[2] { 0x143, 0x38 }, new ushort[2] { 0x144, 0x38 }, new ushort[2] { 0x145, 0x38 }, new ushort[2] { 0x146, 0x38 }, new ushort[2] { 0x147, 0x38 }, new ushort[2] { 0x2, 0x38 }, new ushort[2] { 0x13B, 0x38 }, new ushort[2] { 0x106, 0x38 }, new ushort[2] { 0x13C, 0x38 }, new ushort[2] { 0xF0, 0x38 }, new ushort[2] { 0xF1, 0x38 }, new ushort[2] { 0x152, 0x38 }, new ushort[2] { 0x13A, 0x38 }, new ushort[2] { 0x139, 0x38 }, new ushort[2] { 0x138, 0x38 }, new ushort[2] { 0x137, 0x38 }, new ushort[2] { 0x136, 0x38 }, new ushort[2] { 0x134, 0x38 }, new ushort[2] { 0x135, 0x38 }, new ushort[2] { 0x12E, 0x38 }, new ushort[2] { 0x12F, 0x38 }, new ushort[2] { 0x130, 0x38 }, new ushort[2] { 0x131, 0x38 }, new ushort[2] { 0x132, 0x38 }, new ushort[2] { 0x133, 0x38 }, new ushort[2] { 0x12C, 0x38 }, new ushort[2] { 0x12D, 0x38 }, new ushort[2] { 0x123, 0x38 }, new ushort[2] { 0x124, 0x38 }, new ushort[2] { 0x127, 0x38 }, new ushort[2] { 0x128, 0x38 }, new ushort[2] { 0x129, 0x38 } };

        private static ushort[] p_StateExpectedIDs_DB = { 0x14A, 0x14B, 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_DB = { "_T[ref]", "_T[out]", "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_DB = { "[exp_argument_list -> exp_argument_list , . exp_argument]", "[exp_argument -> . expression]", "[exp_argument -> . ref expression]", "[exp_argument -> . out expression]", "[expression -> . exp_op12_conditional]", "[expression -> . exp_op13_assigment]", "[exp_op12_conditional -> . exp_op11]", "[exp_op12_conditional -> . exp_op11 ? expression : expression]", "[exp_op13_assigment -> . exp_op1 = expression]", "[exp_op13_assigment -> . exp_op1 += expression]", "[exp_op13_assigment -> . exp_op1 -= expression]", "[exp_op13_assigment -> . exp_op1 *= expression]", "[exp_op13_assigment -> . exp_op1 /= expression]", "[exp_op13_assigment -> . exp_op1 %= expression]", "[exp_op13_assigment -> . exp_op1 &= expression]", "[exp_op13_assigment -> . exp_op1 |= expression]", "[exp_op13_assigment -> . exp_op1 ^= expression]", "[exp_op13_assigment -> . exp_op1 <<= expression]", "[exp_op13_assigment -> . exp_op1 >>= expression]", "[exp_op11 -> . exp_op10]", "[exp_op11 -> . exp_op11 || exp_op10]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op10 -> . exp_op9]", "[exp_op10 -> . exp_op10 && exp_op9]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op9 -> . exp_op8]", "[exp_op9 -> . exp_op9 | exp_op8]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_op8 -> . exp_op7]", "[exp_op8 -> . exp_op8 ^ exp_op7]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[exp_op7 -> . exp_op6]", "[exp_op7 -> . exp_op7 & exp_op6]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]", "[exp_op6 -> . exp_op5]", "[exp_op6 -> . exp_op6 == exp_op5]", "[exp_op6 -> . exp_op6 != exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]" };
        private static ushort[][] p_StateShiftsOnTerminal_DB = { new ushort[2] { 0x14A, 0xB4 }, new ushort[2] { 0x14B, 0xB5 }, new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_DB = { new ushort[2] { 0x40, 0xF1 }, new ushort[2] { 0x3D, 0xB3 }, new ushort[2] { 0x3B, 0x3 }, new ushort[2] { 0x3C, 0x4 }, new ushort[2] { 0x3A, 0x5 }, new ushort[2] { 0x30, 0x6 }, new ushort[2] { 0x39, 0x7 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x38, 0x10 }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x37, 0x16 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x36, 0x21 }, new ushort[2] { 0x1E, 0x2E }, new ushort[2] { 0x35, 0x32 }, new ushort[2] { 0x34, 0x42 }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 } };
        private static ushort[][] p_StateReducsOnTerminal_DB = { };

        private static ushort[] p_StateExpectedIDs_DC = { 0x106, 0xF1 };
        private static string[] p_StateExpectedNames_DC = { "_T[)]", "_T[,]" };
        private static string[] p_StateItems_DC = { "[exp_argument -> ref expression . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_DC = { };
        private static ushort[][] p_StateShiftsOnVariable_DC = { };
        private static ushort[][] p_StateReducsOnTerminal_DC = { new ushort[2] { 0x106, 0x92 }, new ushort[2] { 0xF1, 0x92 } };

        private static ushort[] p_StateExpectedIDs_DD = { 0x106, 0xF1 };
        private static string[] p_StateExpectedNames_DD = { "_T[)]", "_T[,]" };
        private static string[] p_StateItems_DD = { "[exp_argument -> out expression . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_DD = { };
        private static ushort[][] p_StateShiftsOnVariable_DD = { };
        private static ushort[][] p_StateReducsOnTerminal_DD = { new ushort[2] { 0x106, 0x93 }, new ushort[2] { 0xF1, 0x93 } };

        private static ushort[] p_StateExpectedIDs_DE = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_DE = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_DE = { "[exp_op1_cast -> ( type ) exp_op1 . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_DE = { };
        private static ushort[][] p_StateShiftsOnVariable_DE = { };
        private static ushort[][] p_StateReducsOnTerminal_DE = { new ushort[2] { 0x13D, 0x57 }, new ushort[2] { 0x13E, 0x57 }, new ushort[2] { 0x13F, 0x57 }, new ushort[2] { 0x140, 0x57 }, new ushort[2] { 0x141, 0x57 }, new ushort[2] { 0x142, 0x57 }, new ushort[2] { 0x143, 0x57 }, new ushort[2] { 0x144, 0x57 }, new ushort[2] { 0x145, 0x57 }, new ushort[2] { 0x146, 0x57 }, new ushort[2] { 0x147, 0x57 }, new ushort[2] { 0x2, 0x57 }, new ushort[2] { 0x13B, 0x57 }, new ushort[2] { 0x106, 0x57 }, new ushort[2] { 0x13C, 0x57 }, new ushort[2] { 0xF0, 0x57 }, new ushort[2] { 0xF1, 0x57 }, new ushort[2] { 0x152, 0x57 }, new ushort[2] { 0x13A, 0x57 }, new ushort[2] { 0x139, 0x57 }, new ushort[2] { 0x138, 0x57 }, new ushort[2] { 0x137, 0x57 }, new ushort[2] { 0x136, 0x57 }, new ushort[2] { 0x134, 0x57 }, new ushort[2] { 0x135, 0x57 }, new ushort[2] { 0x12E, 0x57 }, new ushort[2] { 0x12F, 0x57 }, new ushort[2] { 0x130, 0x57 }, new ushort[2] { 0x131, 0x57 }, new ushort[2] { 0x132, 0x57 }, new ushort[2] { 0x133, 0x57 }, new ushort[2] { 0x12C, 0x57 }, new ushort[2] { 0x12D, 0x57 }, new ushort[2] { 0x123, 0x57 }, new ushort[2] { 0x124, 0x57 }, new ushort[2] { 0x127, 0x57 }, new ushort[2] { 0x128, 0x57 }, new ushort[2] { 0x129, 0x57 } };

        private static ushort[] p_StateExpectedIDs_DF = { 0x106, 0x151, 0x105 };
        private static string[] p_StateExpectedNames_DF = { "_T[)]", "_T[{]", "_T[(]" };
        private static string[] p_StateItems_DF = { "[type_array -> type_non_array type_array_rank _m238 . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_DF = { };
        private static ushort[][] p_StateShiftsOnVariable_DF = { };
        private static ushort[][] p_StateReducsOnTerminal_DF = { new ushort[2] { 0x106, 0x17 }, new ushort[2] { 0x151, 0x17 }, new ushort[2] { 0x105, 0x17 } };

        private static ushort[] p_StateExpectedIDs_E0 = { 0x106, 0x151, 0x105, 0xEF };
        private static string[] p_StateExpectedNames_E0 = { "_T[)]", "_T[{]", "_T[(]", "_T[[]" };
        private static string[] p_StateItems_E0 = { "[_m238 -> type_array_rank . _m238]", "[_m238 -> . type_array_rank _m238]", "[_m238 -> . ]", "[type_array_rank -> . [ type_array_rank_dim ]]" };
        private static ushort[][] p_StateShiftsOnTerminal_E0 = { new ushort[2] { 0xEF, 0xBB } };
        private static ushort[][] p_StateShiftsOnVariable_E0 = { new ushort[2] { 0xEE, 0xF2 }, new ushort[2] { 0x1C, 0xE0 } };
        private static ushort[][] p_StateReducsOnTerminal_E0 = { new ushort[2] { 0x106, 0x221 }, new ushort[2] { 0x151, 0x221 }, new ushort[2] { 0x105, 0x221 } };

        private static ushort[] p_StateExpectedIDs_E1 = { 0xF0 };
        private static string[] p_StateExpectedNames_E1 = { "_T[]]" };
        private static string[] p_StateItems_E1 = { "[type_array_rank -> [ type_array_rank_dim . ]]" };
        private static ushort[][] p_StateShiftsOnTerminal_E1 = { new ushort[2] { 0xF0, 0xF3 } };
        private static ushort[][] p_StateShiftsOnVariable_E1 = { };
        private static ushort[][] p_StateReducsOnTerminal_E1 = { };

        private static ushort[] p_StateExpectedIDs_E2 = { 0xF0 };
        private static string[] p_StateExpectedNames_E2 = { "_T[]]" };
        private static string[] p_StateItems_E2 = { "[type_array_rank_dim -> _m242 . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_E2 = { };
        private static ushort[][] p_StateShiftsOnVariable_E2 = { };
        private static ushort[][] p_StateReducsOnTerminal_E2 = { new ushort[2] { 0xF0, 0x19 } };

        private static ushort[] p_StateExpectedIDs_E3 = { 0xF0, 0xF1 };
        private static string[] p_StateExpectedNames_E3 = { "_T[]]", "_T[,]" };
        private static string[] p_StateItems_E3 = { "[_m242 -> , . _m242]", "[_m242 -> . , _m242]", "[_m242 -> . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_E3 = { new ushort[2] { 0xF1, 0xE3 } };
        private static ushort[][] p_StateShiftsOnVariable_E3 = { new ushort[2] { 0xF2, 0xF4 } };
        private static ushort[][] p_StateReducsOnTerminal_E3 = { new ushort[2] { 0xF0, 0x223 } };

        private static ushort[] p_StateExpectedIDs_E4 = { 0x106, 0xEF, 0x105, 0xDD };
        private static string[] p_StateExpectedNames_E4 = { "_T[)]", "_T[[]", "_T[(]", "_T[.]" };
        private static string[] p_StateItems_E4 = { "[_m222 -> . IDENTIFIER . _m222]", "[_m222 -> . . IDENTIFIER _m222]", "[_m222 -> . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_E4 = { new ushort[2] { 0xDD, 0xBD } };
        private static ushort[][] p_StateShiftsOnVariable_E4 = { new ushort[2] { 0xDE, 0xF5 } };
        private static ushort[][] p_StateReducsOnTerminal_E4 = { new ushort[2] { 0x106, 0x21F }, new ushort[2] { 0xEF, 0x21F }, new ushort[2] { 0x105, 0x21F } };

        private static ushort[] p_StateExpectedIDs_E5 = { 0xF0, 0xF1 };
        private static string[] p_StateExpectedNames_E5 = { "_T[]]", "_T[,]" };
        private static string[] p_StateItems_E5 = { "[exp_op0_array_creation -> new type_non_array [ exp_expression_list . ] type_array_rank array_initializer]", "[exp_op0_array_creation -> new type_non_array [ exp_expression_list . ] type_array_rank]", "[exp_op0_array_creation -> new type_non_array [ exp_expression_list . ] array_initializer]", "[exp_op0_array_creation -> new type_non_array [ exp_expression_list . ]]", "[exp_expression_list -> exp_expression_list . , expression]" };
        private static ushort[][] p_StateShiftsOnTerminal_E5 = { new ushort[2] { 0xF0, 0xF6 }, new ushort[2] { 0xF1, 0xF7 } };
        private static ushort[][] p_StateShiftsOnVariable_E5 = { };
        private static ushort[][] p_StateReducsOnTerminal_E5 = { };

        private static ushort[] p_StateExpectedIDs_E6 = { 0xF0, 0xF1 };
        private static string[] p_StateExpectedNames_E6 = { "_T[]]", "_T[,]" };
        private static string[] p_StateItems_E6 = { "[exp_expression_list -> expression . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_E6 = { };
        private static ushort[][] p_StateShiftsOnVariable_E6 = { };
        private static ushort[][] p_StateReducsOnTerminal_E6 = { new ushort[2] { 0xF0, 0x8D }, new ushort[2] { 0xF1, 0x8D } };

        private static ushort[] p_StateExpectedIDs_E7 = { 0x152 };
        private static string[] p_StateExpectedNames_E7 = { "_T[}]" };
        private static string[] p_StateItems_E7 = { "[array_initializer -> { variable_initializer_list . }]" };
        private static ushort[][] p_StateShiftsOnTerminal_E7 = { new ushort[2] { 0x152, 0xF8 } };
        private static ushort[][] p_StateShiftsOnVariable_E7 = { };
        private static ushort[][] p_StateReducsOnTerminal_E7 = { };

        private static ushort[] p_StateExpectedIDs_E8 = { 0x152, 0xF1 };
        private static string[] p_StateExpectedNames_E8 = { "_T[}]", "_T[,]" };
        private static string[] p_StateItems_E8 = { "[variable_initializer_list -> variable_initializer . _m340]", "[_m340 -> . , variable_initializer _m340]", "[_m340 -> . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_E8 = { new ushort[2] { 0xF1, 0xFA } };
        private static ushort[][] p_StateShiftsOnVariable_E8 = { new ushort[2] { 0x154, 0xF9 } };
        private static ushort[][] p_StateReducsOnTerminal_E8 = { new ushort[2] { 0x152, 0x225 } };

        private static ushort[] p_StateExpectedIDs_E9 = { 0xF1, 0x152 };
        private static string[] p_StateExpectedNames_E9 = { "_T[,]", "_T[}]" };
        private static string[] p_StateItems_E9 = { "[variable_initializer -> expression . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_E9 = { };
        private static ushort[][] p_StateShiftsOnVariable_E9 = { };
        private static ushort[][] p_StateReducsOnTerminal_E9 = { new ushort[2] { 0xF1, 0x9F }, new ushort[2] { 0x152, 0x9F } };

        private static ushort[] p_StateExpectedIDs_EA = { 0xF1, 0x152 };
        private static string[] p_StateExpectedNames_EA = { "_T[,]", "_T[}]" };
        private static string[] p_StateItems_EA = { "[variable_initializer -> array_initializer . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_EA = { };
        private static ushort[][] p_StateShiftsOnVariable_EA = { };
        private static ushort[][] p_StateReducsOnTerminal_EA = { new ushort[2] { 0xF1, 0xA0 }, new ushort[2] { 0x152, 0xA0 } };

        private static ushort[] p_StateExpectedIDs_EB = { 0x106, 0xF1 };
        private static string[] p_StateExpectedNames_EB = { "_T[)]", "_T[,]" };
        private static string[] p_StateItems_EB = { "[exp_op0_obj_creation -> new type ( exp_argument_list . )]", "[exp_argument_list -> exp_argument_list . , exp_argument]" };
        private static ushort[][] p_StateShiftsOnTerminal_EB = { new ushort[2] { 0x106, 0xFB }, new ushort[2] { 0xF1, 0xDB } };
        private static ushort[][] p_StateShiftsOnVariable_EB = { };
        private static ushort[][] p_StateReducsOnTerminal_EB = { };

        private static ushort[] p_StateExpectedIDs_EC = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_EC = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_EC = { "[exp_op0_obj_creation -> new type ( ) . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_EC = { };
        private static ushort[][] p_StateShiftsOnVariable_EC = { };
        private static ushort[][] p_StateReducsOnTerminal_EC = { new ushort[2] { 0x13D, 0x3B }, new ushort[2] { 0x13E, 0x3B }, new ushort[2] { 0x13F, 0x3B }, new ushort[2] { 0x140, 0x3B }, new ushort[2] { 0x141, 0x3B }, new ushort[2] { 0x142, 0x3B }, new ushort[2] { 0x143, 0x3B }, new ushort[2] { 0x144, 0x3B }, new ushort[2] { 0x145, 0x3B }, new ushort[2] { 0x146, 0x3B }, new ushort[2] { 0x147, 0x3B }, new ushort[2] { 0x2, 0x3B }, new ushort[2] { 0x13B, 0x3B }, new ushort[2] { 0x106, 0x3B }, new ushort[2] { 0x13C, 0x3B }, new ushort[2] { 0xF0, 0x3B }, new ushort[2] { 0xF1, 0x3B }, new ushort[2] { 0x152, 0x3B }, new ushort[2] { 0x13A, 0x3B }, new ushort[2] { 0x139, 0x3B }, new ushort[2] { 0x138, 0x3B }, new ushort[2] { 0x137, 0x3B }, new ushort[2] { 0x136, 0x3B }, new ushort[2] { 0x134, 0x3B }, new ushort[2] { 0x135, 0x3B }, new ushort[2] { 0x12E, 0x3B }, new ushort[2] { 0x12F, 0x3B }, new ushort[2] { 0x130, 0x3B }, new ushort[2] { 0x131, 0x3B }, new ushort[2] { 0x132, 0x3B }, new ushort[2] { 0x133, 0x3B }, new ushort[2] { 0x12C, 0x3B }, new ushort[2] { 0x12D, 0x3B }, new ushort[2] { 0x123, 0x3B }, new ushort[2] { 0x124, 0x3B }, new ushort[2] { 0x127, 0x3B }, new ushort[2] { 0x128, 0x3B }, new ushort[2] { 0x129, 0x3B } };

        private static ushort[] p_StateExpectedIDs_ED = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_ED = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_ED = { "[exp_op0_typeof -> typeof ( type_return ) . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_ED = { };
        private static ushort[][] p_StateShiftsOnVariable_ED = { };
        private static ushort[][] p_StateReducsOnTerminal_ED = { new ushort[2] { 0x13D, 0x42 }, new ushort[2] { 0x13E, 0x42 }, new ushort[2] { 0x13F, 0x42 }, new ushort[2] { 0x140, 0x42 }, new ushort[2] { 0x141, 0x42 }, new ushort[2] { 0x142, 0x42 }, new ushort[2] { 0x143, 0x42 }, new ushort[2] { 0x144, 0x42 }, new ushort[2] { 0x145, 0x42 }, new ushort[2] { 0x146, 0x42 }, new ushort[2] { 0x147, 0x42 }, new ushort[2] { 0x2, 0x42 }, new ushort[2] { 0x13B, 0x42 }, new ushort[2] { 0x106, 0x42 }, new ushort[2] { 0x13C, 0x42 }, new ushort[2] { 0xF0, 0x42 }, new ushort[2] { 0xF1, 0x42 }, new ushort[2] { 0x152, 0x42 }, new ushort[2] { 0x13A, 0x42 }, new ushort[2] { 0x139, 0x42 }, new ushort[2] { 0x138, 0x42 }, new ushort[2] { 0x137, 0x42 }, new ushort[2] { 0x136, 0x42 }, new ushort[2] { 0x134, 0x42 }, new ushort[2] { 0x135, 0x42 }, new ushort[2] { 0x12E, 0x42 }, new ushort[2] { 0x12F, 0x42 }, new ushort[2] { 0x130, 0x42 }, new ushort[2] { 0x131, 0x42 }, new ushort[2] { 0x132, 0x42 }, new ushort[2] { 0x133, 0x42 }, new ushort[2] { 0x12C, 0x42 }, new ushort[2] { 0x12D, 0x42 }, new ushort[2] { 0x123, 0x42 }, new ushort[2] { 0x124, 0x42 }, new ushort[2] { 0x127, 0x42 }, new ushort[2] { 0x128, 0x42 }, new ushort[2] { 0x129, 0x42 } };

        private static ushort[] p_StateExpectedIDs_EE = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_EE = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_EE = { "[exp_op0_checked -> checked ( expression ) . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_EE = { };
        private static ushort[][] p_StateShiftsOnVariable_EE = { };
        private static ushort[][] p_StateReducsOnTerminal_EE = { new ushort[2] { 0x13D, 0x43 }, new ushort[2] { 0x13E, 0x43 }, new ushort[2] { 0x13F, 0x43 }, new ushort[2] { 0x140, 0x43 }, new ushort[2] { 0x141, 0x43 }, new ushort[2] { 0x142, 0x43 }, new ushort[2] { 0x143, 0x43 }, new ushort[2] { 0x144, 0x43 }, new ushort[2] { 0x145, 0x43 }, new ushort[2] { 0x146, 0x43 }, new ushort[2] { 0x147, 0x43 }, new ushort[2] { 0x2, 0x43 }, new ushort[2] { 0x13B, 0x43 }, new ushort[2] { 0x106, 0x43 }, new ushort[2] { 0x13C, 0x43 }, new ushort[2] { 0xF0, 0x43 }, new ushort[2] { 0xF1, 0x43 }, new ushort[2] { 0x152, 0x43 }, new ushort[2] { 0x13A, 0x43 }, new ushort[2] { 0x139, 0x43 }, new ushort[2] { 0x138, 0x43 }, new ushort[2] { 0x137, 0x43 }, new ushort[2] { 0x136, 0x43 }, new ushort[2] { 0x134, 0x43 }, new ushort[2] { 0x135, 0x43 }, new ushort[2] { 0x12E, 0x43 }, new ushort[2] { 0x12F, 0x43 }, new ushort[2] { 0x130, 0x43 }, new ushort[2] { 0x131, 0x43 }, new ushort[2] { 0x132, 0x43 }, new ushort[2] { 0x133, 0x43 }, new ushort[2] { 0x12C, 0x43 }, new ushort[2] { 0x12D, 0x43 }, new ushort[2] { 0x123, 0x43 }, new ushort[2] { 0x124, 0x43 }, new ushort[2] { 0x127, 0x43 }, new ushort[2] { 0x128, 0x43 }, new ushort[2] { 0x129, 0x43 } };

        private static ushort[] p_StateExpectedIDs_EF = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_EF = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_EF = { "[exp_op0_unchecked -> unchecked ( expression ) . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_EF = { };
        private static ushort[][] p_StateShiftsOnVariable_EF = { };
        private static ushort[][] p_StateReducsOnTerminal_EF = { new ushort[2] { 0x13D, 0x44 }, new ushort[2] { 0x13E, 0x44 }, new ushort[2] { 0x13F, 0x44 }, new ushort[2] { 0x140, 0x44 }, new ushort[2] { 0x141, 0x44 }, new ushort[2] { 0x142, 0x44 }, new ushort[2] { 0x143, 0x44 }, new ushort[2] { 0x144, 0x44 }, new ushort[2] { 0x145, 0x44 }, new ushort[2] { 0x146, 0x44 }, new ushort[2] { 0x147, 0x44 }, new ushort[2] { 0x2, 0x44 }, new ushort[2] { 0x13B, 0x44 }, new ushort[2] { 0x106, 0x44 }, new ushort[2] { 0x13C, 0x44 }, new ushort[2] { 0xF0, 0x44 }, new ushort[2] { 0xF1, 0x44 }, new ushort[2] { 0x152, 0x44 }, new ushort[2] { 0x13A, 0x44 }, new ushort[2] { 0x139, 0x44 }, new ushort[2] { 0x138, 0x44 }, new ushort[2] { 0x137, 0x44 }, new ushort[2] { 0x136, 0x44 }, new ushort[2] { 0x134, 0x44 }, new ushort[2] { 0x135, 0x44 }, new ushort[2] { 0x12E, 0x44 }, new ushort[2] { 0x12F, 0x44 }, new ushort[2] { 0x130, 0x44 }, new ushort[2] { 0x131, 0x44 }, new ushort[2] { 0x132, 0x44 }, new ushort[2] { 0x133, 0x44 }, new ushort[2] { 0x12C, 0x44 }, new ushort[2] { 0x12D, 0x44 }, new ushort[2] { 0x123, 0x44 }, new ushort[2] { 0x124, 0x44 }, new ushort[2] { 0x127, 0x44 }, new ushort[2] { 0x128, 0x44 }, new ushort[2] { 0x129, 0x44 } };

        private static ushort[] p_StateExpectedIDs_F0 = { 0x2, 0x106, 0x13C, 0xF0, 0xF1, 0x152 };
        private static string[] p_StateExpectedNames_F0 = { "$", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]" };
        private static string[] p_StateItems_F0 = { "[exp_op12_conditional -> exp_op11 ? expression : expression . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_F0 = { };
        private static ushort[][] p_StateShiftsOnVariable_F0 = { };
        private static ushort[][] p_StateReducsOnTerminal_F0 = { new ushort[2] { 0x2, 0x7F }, new ushort[2] { 0x106, 0x7F }, new ushort[2] { 0x13C, 0x7F }, new ushort[2] { 0xF0, 0x7F }, new ushort[2] { 0xF1, 0x7F }, new ushort[2] { 0x152, 0x7F } };

        private static ushort[] p_StateExpectedIDs_F1 = { 0x106, 0xF1 };
        private static string[] p_StateExpectedNames_F1 = { "_T[)]", "_T[,]" };
        private static string[] p_StateItems_F1 = { "[exp_argument_list -> exp_argument_list , exp_argument . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_F1 = { };
        private static ushort[][] p_StateShiftsOnVariable_F1 = { };
        private static ushort[][] p_StateReducsOnTerminal_F1 = { new ushort[2] { 0x106, 0x90 }, new ushort[2] { 0xF1, 0x90 } };

        private static ushort[] p_StateExpectedIDs_F2 = { 0x106, 0x151, 0x105 };
        private static string[] p_StateExpectedNames_F2 = { "_T[)]", "_T[{]", "_T[(]" };
        private static string[] p_StateItems_F2 = { "[_m238 -> type_array_rank _m238 . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_F2 = { };
        private static ushort[][] p_StateShiftsOnVariable_F2 = { };
        private static ushort[][] p_StateReducsOnTerminal_F2 = { new ushort[2] { 0x106, 0x220 }, new ushort[2] { 0x151, 0x220 }, new ushort[2] { 0x105, 0x220 } };

        private static ushort[] p_StateExpectedIDs_F3 = { 0xEF, 0x151, 0x106, 0x105, 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_F3 = { "_T[[]", "_T[{]", "_T[)]", "_T[(]", "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_F3 = { "[type_array_rank -> [ type_array_rank_dim ] . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_F3 = { };
        private static ushort[][] p_StateShiftsOnVariable_F3 = { };
        private static ushort[][] p_StateReducsOnTerminal_F3 = { new ushort[2] { 0xEF, 0x18 }, new ushort[2] { 0x151, 0x18 }, new ushort[2] { 0x106, 0x18 }, new ushort[2] { 0x105, 0x18 }, new ushort[2] { 0x13D, 0x18 }, new ushort[2] { 0x13E, 0x18 }, new ushort[2] { 0x13F, 0x18 }, new ushort[2] { 0x140, 0x18 }, new ushort[2] { 0x141, 0x18 }, new ushort[2] { 0x142, 0x18 }, new ushort[2] { 0x143, 0x18 }, new ushort[2] { 0x144, 0x18 }, new ushort[2] { 0x145, 0x18 }, new ushort[2] { 0x146, 0x18 }, new ushort[2] { 0x147, 0x18 }, new ushort[2] { 0x2, 0x18 }, new ushort[2] { 0x13B, 0x18 }, new ushort[2] { 0x13C, 0x18 }, new ushort[2] { 0xF0, 0x18 }, new ushort[2] { 0xF1, 0x18 }, new ushort[2] { 0x152, 0x18 }, new ushort[2] { 0x13A, 0x18 }, new ushort[2] { 0x139, 0x18 }, new ushort[2] { 0x138, 0x18 }, new ushort[2] { 0x137, 0x18 }, new ushort[2] { 0x136, 0x18 }, new ushort[2] { 0x134, 0x18 }, new ushort[2] { 0x135, 0x18 }, new ushort[2] { 0x12E, 0x18 }, new ushort[2] { 0x12F, 0x18 }, new ushort[2] { 0x130, 0x18 }, new ushort[2] { 0x131, 0x18 }, new ushort[2] { 0x132, 0x18 }, new ushort[2] { 0x133, 0x18 }, new ushort[2] { 0x12C, 0x18 }, new ushort[2] { 0x12D, 0x18 }, new ushort[2] { 0x123, 0x18 }, new ushort[2] { 0x124, 0x18 }, new ushort[2] { 0x127, 0x18 }, new ushort[2] { 0x128, 0x18 }, new ushort[2] { 0x129, 0x18 } };

        private static ushort[] p_StateExpectedIDs_F4 = { 0xF0 };
        private static string[] p_StateExpectedNames_F4 = { "_T[]]" };
        private static string[] p_StateItems_F4 = { "[_m242 -> , _m242 . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_F4 = { };
        private static ushort[][] p_StateShiftsOnVariable_F4 = { };
        private static ushort[][] p_StateReducsOnTerminal_F4 = { new ushort[2] { 0xF0, 0x222 } };

        private static ushort[] p_StateExpectedIDs_F5 = { 0x106, 0xEF, 0x105 };
        private static string[] p_StateExpectedNames_F5 = { "_T[)]", "_T[[]", "_T[(]" };
        private static string[] p_StateItems_F5 = { "[_m222 -> . IDENTIFIER _m222 . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_F5 = { };
        private static ushort[][] p_StateShiftsOnVariable_F5 = { };
        private static ushort[][] p_StateReducsOnTerminal_F5 = { new ushort[2] { 0x106, 0x21E }, new ushort[2] { 0xEF, 0x21E }, new ushort[2] { 0x105, 0x21E } };

        private static ushort[] p_StateExpectedIDs_F6 = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129, 0xEF, 0x151 };
        private static string[] p_StateExpectedNames_F6 = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]", "_T[[]", "_T[{]" };
        private static string[] p_StateItems_F6 = { "[exp_op0_array_creation -> new type_non_array [ exp_expression_list ] . type_array_rank array_initializer]", "[exp_op0_array_creation -> new type_non_array [ exp_expression_list ] . type_array_rank]", "[exp_op0_array_creation -> new type_non_array [ exp_expression_list ] . array_initializer]", "[exp_op0_array_creation -> new type_non_array [ exp_expression_list ] . ]", "[type_array_rank -> . [ type_array_rank_dim ]]", "[array_initializer -> . { variable_initializer_list }]" };
        private static ushort[][] p_StateShiftsOnTerminal_F6 = { new ushort[2] { 0xEF, 0xBB }, new ushort[2] { 0x151, 0xC1 } };
        private static ushort[][] p_StateShiftsOnVariable_F6 = { new ushort[2] { 0x1C, 0xFC }, new ushort[2] { 0x46, 0xFD } };
        private static ushort[][] p_StateReducsOnTerminal_F6 = { new ushort[2] { 0x13D, 0x48 }, new ushort[2] { 0x13E, 0x48 }, new ushort[2] { 0x13F, 0x48 }, new ushort[2] { 0x140, 0x48 }, new ushort[2] { 0x141, 0x48 }, new ushort[2] { 0x142, 0x48 }, new ushort[2] { 0x143, 0x48 }, new ushort[2] { 0x144, 0x48 }, new ushort[2] { 0x145, 0x48 }, new ushort[2] { 0x146, 0x48 }, new ushort[2] { 0x147, 0x48 }, new ushort[2] { 0x2, 0x48 }, new ushort[2] { 0x13B, 0x48 }, new ushort[2] { 0x106, 0x48 }, new ushort[2] { 0x13C, 0x48 }, new ushort[2] { 0xF0, 0x48 }, new ushort[2] { 0xF1, 0x48 }, new ushort[2] { 0x152, 0x48 }, new ushort[2] { 0x13A, 0x48 }, new ushort[2] { 0x139, 0x48 }, new ushort[2] { 0x138, 0x48 }, new ushort[2] { 0x137, 0x48 }, new ushort[2] { 0x136, 0x48 }, new ushort[2] { 0x134, 0x48 }, new ushort[2] { 0x135, 0x48 }, new ushort[2] { 0x12E, 0x48 }, new ushort[2] { 0x12F, 0x48 }, new ushort[2] { 0x130, 0x48 }, new ushort[2] { 0x131, 0x48 }, new ushort[2] { 0x132, 0x48 }, new ushort[2] { 0x133, 0x48 }, new ushort[2] { 0x12C, 0x48 }, new ushort[2] { 0x12D, 0x48 }, new ushort[2] { 0x123, 0x48 }, new ushort[2] { 0x124, 0x48 }, new ushort[2] { 0x127, 0x48 }, new ushort[2] { 0x128, 0x48 }, new ushort[2] { 0x129, 0x48 } };

        private static ushort[] p_StateExpectedIDs_F7 = { 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_F7 = { "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_F7 = { "[exp_expression_list -> exp_expression_list , . expression]", "[expression -> . exp_op12_conditional]", "[expression -> . exp_op13_assigment]", "[exp_op12_conditional -> . exp_op11]", "[exp_op12_conditional -> . exp_op11 ? expression : expression]", "[exp_op13_assigment -> . exp_op1 = expression]", "[exp_op13_assigment -> . exp_op1 += expression]", "[exp_op13_assigment -> . exp_op1 -= expression]", "[exp_op13_assigment -> . exp_op1 *= expression]", "[exp_op13_assigment -> . exp_op1 /= expression]", "[exp_op13_assigment -> . exp_op1 %= expression]", "[exp_op13_assigment -> . exp_op1 &= expression]", "[exp_op13_assigment -> . exp_op1 |= expression]", "[exp_op13_assigment -> . exp_op1 ^= expression]", "[exp_op13_assigment -> . exp_op1 <<= expression]", "[exp_op13_assigment -> . exp_op1 >>= expression]", "[exp_op11 -> . exp_op10]", "[exp_op11 -> . exp_op11 || exp_op10]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op10 -> . exp_op9]", "[exp_op10 -> . exp_op10 && exp_op9]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op9 -> . exp_op8]", "[exp_op9 -> . exp_op9 | exp_op8]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_op8 -> . exp_op7]", "[exp_op8 -> . exp_op8 ^ exp_op7]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[exp_op7 -> . exp_op6]", "[exp_op7 -> . exp_op7 & exp_op6]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]", "[exp_op6 -> . exp_op5]", "[exp_op6 -> . exp_op6 == exp_op5]", "[exp_op6 -> . exp_op6 != exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]" };
        private static ushort[][] p_StateShiftsOnTerminal_F7 = { new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_F7 = { new ushort[2] { 0x3D, 0xFE }, new ushort[2] { 0x3B, 0x3 }, new ushort[2] { 0x3C, 0x4 }, new ushort[2] { 0x3A, 0x5 }, new ushort[2] { 0x30, 0x6 }, new ushort[2] { 0x39, 0x7 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x38, 0x10 }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x37, 0x16 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x36, 0x21 }, new ushort[2] { 0x1E, 0x2E }, new ushort[2] { 0x35, 0x32 }, new ushort[2] { 0x34, 0x42 }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 } };
        private static ushort[][] p_StateReducsOnTerminal_F7 = { };

        private static ushort[] p_StateExpectedIDs_F8 = { 0xF1, 0x152, 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_F8 = { "_T[,]", "_T[}]", "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_F8 = { "[array_initializer -> { variable_initializer_list } . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_F8 = { };
        private static ushort[][] p_StateShiftsOnVariable_F8 = { };
        private static ushort[][] p_StateReducsOnTerminal_F8 = { new ushort[2] { 0xF1, 0x9E }, new ushort[2] { 0x152, 0x9E }, new ushort[2] { 0x13D, 0x9E }, new ushort[2] { 0x13E, 0x9E }, new ushort[2] { 0x13F, 0x9E }, new ushort[2] { 0x140, 0x9E }, new ushort[2] { 0x141, 0x9E }, new ushort[2] { 0x142, 0x9E }, new ushort[2] { 0x143, 0x9E }, new ushort[2] { 0x144, 0x9E }, new ushort[2] { 0x145, 0x9E }, new ushort[2] { 0x146, 0x9E }, new ushort[2] { 0x147, 0x9E }, new ushort[2] { 0x2, 0x9E }, new ushort[2] { 0x13B, 0x9E }, new ushort[2] { 0x106, 0x9E }, new ushort[2] { 0x13C, 0x9E }, new ushort[2] { 0xF0, 0x9E }, new ushort[2] { 0x13A, 0x9E }, new ushort[2] { 0x139, 0x9E }, new ushort[2] { 0x138, 0x9E }, new ushort[2] { 0x137, 0x9E }, new ushort[2] { 0x136, 0x9E }, new ushort[2] { 0x134, 0x9E }, new ushort[2] { 0x135, 0x9E }, new ushort[2] { 0x12E, 0x9E }, new ushort[2] { 0x12F, 0x9E }, new ushort[2] { 0x130, 0x9E }, new ushort[2] { 0x131, 0x9E }, new ushort[2] { 0x132, 0x9E }, new ushort[2] { 0x133, 0x9E }, new ushort[2] { 0x12C, 0x9E }, new ushort[2] { 0x12D, 0x9E }, new ushort[2] { 0x123, 0x9E }, new ushort[2] { 0x124, 0x9E }, new ushort[2] { 0x127, 0x9E }, new ushort[2] { 0x128, 0x9E }, new ushort[2] { 0x129, 0x9E } };

        private static ushort[] p_StateExpectedIDs_F9 = { 0x152 };
        private static string[] p_StateExpectedNames_F9 = { "_T[}]" };
        private static string[] p_StateItems_F9 = { "[variable_initializer_list -> variable_initializer _m340 . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_F9 = { };
        private static ushort[][] p_StateShiftsOnVariable_F9 = { };
        private static ushort[][] p_StateReducsOnTerminal_F9 = { new ushort[2] { 0x152, 0xA1 } };

        private static ushort[] p_StateExpectedIDs_FA = { 0x151, 0x123, 0x124, 0x125, 0x126, 0x10C, 0x10D, 0x105, 0x109, 0x8, 0x9, 0xA, 0xC, 0xD, 0xF, 0x10, 0x11, 0x12, 0x13, 0x103, 0x104, 0x112, 0x115, 0x118, 0xE1, 0xE4, 0xEB, 0xE2, 0xED, 0xEC, 0xE7, 0xE9, 0xDF, 0xE3, 0xE5, 0xE0, 0xE8, 0xEA, 0xE6 };
        private static string[] p_StateExpectedNames_FA = { "_T[{]", "_T[+]", "_T[-]", "_T[!]", "_T[~]", "_T[++]", "_T[--]", "_T[(]", "_T[new]", "NULL_LITTERAL", "BOOLEAN_LITTERAL_TRUE", "BOOLEAN_LITTERAL_FALSE", "INTEGER_LITTERAL_DECIMAL", "INTEGER_LITTERAL_HEXA", "REAL_LITTERAL", "CHARACTER_LITTERAL", "STRING_LITTERAL_REGULAR", "STRING_LITTERAL_VERBATIM", "IDENTIFIER", "_T[this]", "_T[base]", "_T[typeof]", "_T[checked]", "_T[unchecked]", "_T[bool]", "_T[byte]", "_T[char]", "_T[decimal]", "_T[double]", "_T[float]", "_T[int]", "_T[long]", "_T[object]", "_T[sbyte]", "_T[short]", "_T[string]", "_T[uint]", "_T[ulong]", "_T[ushort]" };
        private static string[] p_StateItems_FA = { "[_m340 -> , . variable_initializer _m340]", "[variable_initializer -> . expression]", "[variable_initializer -> . array_initializer]", "[expression -> . exp_op12_conditional]", "[expression -> . exp_op13_assigment]", "[array_initializer -> . { variable_initializer_list }]", "[exp_op12_conditional -> . exp_op11]", "[exp_op12_conditional -> . exp_op11 ? expression : expression]", "[exp_op13_assigment -> . exp_op1 = expression]", "[exp_op13_assigment -> . exp_op1 += expression]", "[exp_op13_assigment -> . exp_op1 -= expression]", "[exp_op13_assigment -> . exp_op1 *= expression]", "[exp_op13_assigment -> . exp_op1 /= expression]", "[exp_op13_assigment -> . exp_op1 %= expression]", "[exp_op13_assigment -> . exp_op1 &= expression]", "[exp_op13_assigment -> . exp_op1 |= expression]", "[exp_op13_assigment -> . exp_op1 ^= expression]", "[exp_op13_assigment -> . exp_op1 <<= expression]", "[exp_op13_assigment -> . exp_op1 >>= expression]", "[exp_op11 -> . exp_op10]", "[exp_op11 -> . exp_op11 || exp_op10]", "[exp_op1 -> . exp_op0]", "[exp_op1 -> . + exp_op1]", "[exp_op1 -> . - exp_op1]", "[exp_op1 -> . ! exp_op1]", "[exp_op1 -> . ~ exp_op1]", "[exp_op1 -> . exp_op1_pre_increment]", "[exp_op1 -> . exp_op1_pre_decrement]", "[exp_op1 -> . exp_op1_cast]", "[exp_op10 -> . exp_op9]", "[exp_op10 -> . exp_op10 && exp_op9]", "[exp_op0 -> . exp_op0_no_array]", "[exp_op0 -> . exp_op0_array_creation]", "[exp_op1_pre_increment -> . ++ exp_op1]", "[exp_op1_pre_decrement -> . -- exp_op1]", "[exp_op1_cast -> . ( type ) exp_op1]", "[exp_op9 -> . exp_op8]", "[exp_op9 -> . exp_op9 | exp_op8]", "[exp_op0_no_array -> . exp_atom]", "[exp_op0_no_array -> . exp_op0_invoke]", "[exp_op0_no_array -> . exp_op0_obj_creation]", "[exp_op0_no_array -> . exp_op0_post_increment]", "[exp_op0_no_array -> . exp_op0_post_decrement]", "[exp_op0_no_array -> . exp_op0_member_access]", "[exp_op0_no_array -> . exp_op0_typeof]", "[exp_op0_no_array -> . exp_op0_checked]", "[exp_op0_no_array -> . exp_op0_unchecked]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] type_array_rank]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ] array_initializer]", "[exp_op0_array_creation -> . new type_non_array [ exp_expression_list ]]", "[exp_op0_array_creation -> . new type_array array_initializer]", "[exp_op8 -> . exp_op7]", "[exp_op8 -> . exp_op8 ^ exp_op7]", "[exp_atom -> . NULL_LITTERAL]", "[exp_atom -> . BOOLEAN_LITTERAL_TRUE]", "[exp_atom -> . BOOLEAN_LITTERAL_FALSE]", "[exp_atom -> . INTEGER_LITTERAL_DECIMAL]", "[exp_atom -> . INTEGER_LITTERAL_HEXA]", "[exp_atom -> . REAL_LITTERAL]", "[exp_atom -> . CHARACTER_LITTERAL]", "[exp_atom -> . STRING_LITTERAL_REGULAR]", "[exp_atom -> . STRING_LITTERAL_VERBATIM]", "[exp_atom -> . IDENTIFIER]", "[exp_atom -> . this]", "[exp_atom -> . base]", "[exp_atom -> . ( expression )]", "[exp_op0_invoke -> . exp_op0 ( exp_argument_list )]", "[exp_op0_invoke -> . exp_op0 ( )]", "[exp_op0_obj_creation -> . new type ( exp_argument_list )]", "[exp_op0_obj_creation -> . new type ( )]", "[exp_op0_post_increment -> . exp_op0 ++]", "[exp_op0_post_decrement -> . exp_op0 --]", "[exp_op0_member_access -> . exp_op0 . IDENTIFIER]", "[exp_op0_member_access -> . type_predefined . IDENTIFIER]", "[exp_op0_typeof -> . typeof ( type_return )]", "[exp_op0_checked -> . checked ( expression )]", "[exp_op0_unchecked -> . unchecked ( expression )]", "[exp_op7 -> . exp_op6]", "[exp_op7 -> . exp_op7 & exp_op6]", "[type_predefined -> . bool]", "[type_predefined -> . byte]", "[type_predefined -> . char]", "[type_predefined -> . decimal]", "[type_predefined -> . double]", "[type_predefined -> . float]", "[type_predefined -> . int]", "[type_predefined -> . long]", "[type_predefined -> . object]", "[type_predefined -> . sbyte]", "[type_predefined -> . short]", "[type_predefined -> . string]", "[type_predefined -> . uint]", "[type_predefined -> . ulong]", "[type_predefined -> . ushort]", "[exp_op6 -> . exp_op5]", "[exp_op6 -> . exp_op6 == exp_op5]", "[exp_op6 -> . exp_op6 != exp_op5]", "[exp_op5 -> . exp_op4]", "[exp_op5 -> . exp_op5 < exp_op4]", "[exp_op5 -> . exp_op5 <= exp_op4]", "[exp_op5 -> . exp_op5 > exp_op4]", "[exp_op5 -> . exp_op5 >= exp_op4]", "[exp_op5 -> . exp_op5 is exp_op4]", "[exp_op5 -> . exp_op5 as exp_op4]", "[exp_op4 -> . exp_op3]", "[exp_op4 -> . exp_op4 << exp_op3]", "[exp_op4 -> . exp_op4 >> exp_op3]", "[exp_op3 -> . exp_op2]", "[exp_op3 -> . exp_op3 + exp_op2]", "[exp_op3 -> . exp_op3 - exp_op2]", "[exp_op2 -> . exp_op1]", "[exp_op2 -> . exp_op2 * exp_op1]", "[exp_op2 -> . exp_op2 / exp_op1]", "[exp_op2 -> . exp_op2 % exp_op1]" };
        private static ushort[][] p_StateShiftsOnTerminal_FA = { new ushort[2] { 0x151, 0xC1 }, new ushort[2] { 0x123, 0x9 }, new ushort[2] { 0x124, 0xA }, new ushort[2] { 0x125, 0xB }, new ushort[2] { 0x126, 0xC }, new ushort[2] { 0x10C, 0x13 }, new ushort[2] { 0x10D, 0x14 }, new ushort[2] { 0x105, 0x15 }, new ushort[2] { 0x109, 0x20 }, new ushort[2] { 0x8, 0x22 }, new ushort[2] { 0x9, 0x23 }, new ushort[2] { 0xA, 0x24 }, new ushort[2] { 0xC, 0x25 }, new ushort[2] { 0xD, 0x26 }, new ushort[2] { 0xF, 0x27 }, new ushort[2] { 0x10, 0x28 }, new ushort[2] { 0x11, 0x29 }, new ushort[2] { 0x12, 0x2A }, new ushort[2] { 0x13, 0x2B }, new ushort[2] { 0x103, 0x2C }, new ushort[2] { 0x104, 0x2D }, new ushort[2] { 0x112, 0x2F }, new ushort[2] { 0x115, 0x30 }, new ushort[2] { 0x118, 0x31 }, new ushort[2] { 0xE1, 0x33 }, new ushort[2] { 0xE4, 0x34 }, new ushort[2] { 0xEB, 0x35 }, new ushort[2] { 0xE2, 0x36 }, new ushort[2] { 0xED, 0x37 }, new ushort[2] { 0xEC, 0x38 }, new ushort[2] { 0xE7, 0x39 }, new ushort[2] { 0xE9, 0x3A }, new ushort[2] { 0xDF, 0x3B }, new ushort[2] { 0xE3, 0x3C }, new ushort[2] { 0xE5, 0x3D }, new ushort[2] { 0xE0, 0x3E }, new ushort[2] { 0xE8, 0x3F }, new ushort[2] { 0xEA, 0x40 }, new ushort[2] { 0xE6, 0x41 } };
        private static ushort[][] p_StateShiftsOnVariable_FA = { new ushort[2] { 0x47, 0xFF }, new ushort[2] { 0x3D, 0xE9 }, new ushort[2] { 0x46, 0xEA }, new ushort[2] { 0x3B, 0x3 }, new ushort[2] { 0x3C, 0x4 }, new ushort[2] { 0x3A, 0x5 }, new ushort[2] { 0x30, 0x6 }, new ushort[2] { 0x39, 0x7 }, new ushort[2] { 0x2C, 0x8 }, new ushort[2] { 0x2D, 0xD }, new ushort[2] { 0x2E, 0xE }, new ushort[2] { 0x2F, 0xF }, new ushort[2] { 0x38, 0x10 }, new ushort[2] { 0x2B, 0x11 }, new ushort[2] { 0x2A, 0x12 }, new ushort[2] { 0x37, 0x16 }, new ushort[2] { 0x20, 0x17 }, new ushort[2] { 0x21, 0x18 }, new ushort[2] { 0x22, 0x19 }, new ushort[2] { 0x23, 0x1A }, new ushort[2] { 0x24, 0x1B }, new ushort[2] { 0x25, 0x1C }, new ushort[2] { 0x27, 0x1D }, new ushort[2] { 0x28, 0x1E }, new ushort[2] { 0x29, 0x1F }, new ushort[2] { 0x36, 0x21 }, new ushort[2] { 0x1E, 0x2E }, new ushort[2] { 0x35, 0x32 }, new ushort[2] { 0x34, 0x42 }, new ushort[2] { 0x33, 0x43 }, new ushort[2] { 0x32, 0x44 }, new ushort[2] { 0x31, 0x45 } };
        private static ushort[][] p_StateReducsOnTerminal_FA = { };

        private static ushort[] p_StateExpectedIDs_FB = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_FB = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_FB = { "[exp_op0_obj_creation -> new type ( exp_argument_list ) . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_FB = { };
        private static ushort[][] p_StateShiftsOnVariable_FB = { };
        private static ushort[][] p_StateReducsOnTerminal_FB = { new ushort[2] { 0x13D, 0x3A }, new ushort[2] { 0x13E, 0x3A }, new ushort[2] { 0x13F, 0x3A }, new ushort[2] { 0x140, 0x3A }, new ushort[2] { 0x141, 0x3A }, new ushort[2] { 0x142, 0x3A }, new ushort[2] { 0x143, 0x3A }, new ushort[2] { 0x144, 0x3A }, new ushort[2] { 0x145, 0x3A }, new ushort[2] { 0x146, 0x3A }, new ushort[2] { 0x147, 0x3A }, new ushort[2] { 0x2, 0x3A }, new ushort[2] { 0x13B, 0x3A }, new ushort[2] { 0x106, 0x3A }, new ushort[2] { 0x13C, 0x3A }, new ushort[2] { 0xF0, 0x3A }, new ushort[2] { 0xF1, 0x3A }, new ushort[2] { 0x152, 0x3A }, new ushort[2] { 0x13A, 0x3A }, new ushort[2] { 0x139, 0x3A }, new ushort[2] { 0x138, 0x3A }, new ushort[2] { 0x137, 0x3A }, new ushort[2] { 0x136, 0x3A }, new ushort[2] { 0x134, 0x3A }, new ushort[2] { 0x135, 0x3A }, new ushort[2] { 0x12E, 0x3A }, new ushort[2] { 0x12F, 0x3A }, new ushort[2] { 0x130, 0x3A }, new ushort[2] { 0x131, 0x3A }, new ushort[2] { 0x132, 0x3A }, new ushort[2] { 0x133, 0x3A }, new ushort[2] { 0x12C, 0x3A }, new ushort[2] { 0x12D, 0x3A }, new ushort[2] { 0x123, 0x3A }, new ushort[2] { 0x124, 0x3A }, new ushort[2] { 0x127, 0x3A }, new ushort[2] { 0x128, 0x3A }, new ushort[2] { 0x129, 0x3A } };

        private static ushort[] p_StateExpectedIDs_FC = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129, 0x151 };
        private static string[] p_StateExpectedNames_FC = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]", "_T[{]" };
        private static string[] p_StateItems_FC = { "[exp_op0_array_creation -> new type_non_array [ exp_expression_list ] type_array_rank . array_initializer]", "[exp_op0_array_creation -> new type_non_array [ exp_expression_list ] type_array_rank . ]", "[array_initializer -> . { variable_initializer_list }]" };
        private static ushort[][] p_StateShiftsOnTerminal_FC = { new ushort[2] { 0x151, 0xC1 } };
        private static ushort[][] p_StateShiftsOnVariable_FC = { new ushort[2] { 0x46, 0x100 } };
        private static ushort[][] p_StateReducsOnTerminal_FC = { new ushort[2] { 0x13D, 0x46 }, new ushort[2] { 0x13E, 0x46 }, new ushort[2] { 0x13F, 0x46 }, new ushort[2] { 0x140, 0x46 }, new ushort[2] { 0x141, 0x46 }, new ushort[2] { 0x142, 0x46 }, new ushort[2] { 0x143, 0x46 }, new ushort[2] { 0x144, 0x46 }, new ushort[2] { 0x145, 0x46 }, new ushort[2] { 0x146, 0x46 }, new ushort[2] { 0x147, 0x46 }, new ushort[2] { 0x2, 0x46 }, new ushort[2] { 0x13B, 0x46 }, new ushort[2] { 0x106, 0x46 }, new ushort[2] { 0x13C, 0x46 }, new ushort[2] { 0xF0, 0x46 }, new ushort[2] { 0xF1, 0x46 }, new ushort[2] { 0x152, 0x46 }, new ushort[2] { 0x13A, 0x46 }, new ushort[2] { 0x139, 0x46 }, new ushort[2] { 0x138, 0x46 }, new ushort[2] { 0x137, 0x46 }, new ushort[2] { 0x136, 0x46 }, new ushort[2] { 0x134, 0x46 }, new ushort[2] { 0x135, 0x46 }, new ushort[2] { 0x12E, 0x46 }, new ushort[2] { 0x12F, 0x46 }, new ushort[2] { 0x130, 0x46 }, new ushort[2] { 0x131, 0x46 }, new ushort[2] { 0x132, 0x46 }, new ushort[2] { 0x133, 0x46 }, new ushort[2] { 0x12C, 0x46 }, new ushort[2] { 0x12D, 0x46 }, new ushort[2] { 0x123, 0x46 }, new ushort[2] { 0x124, 0x46 }, new ushort[2] { 0x127, 0x46 }, new ushort[2] { 0x128, 0x46 }, new ushort[2] { 0x129, 0x46 } };

        private static ushort[] p_StateExpectedIDs_FD = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_FD = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_FD = { "[exp_op0_array_creation -> new type_non_array [ exp_expression_list ] array_initializer . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_FD = { };
        private static ushort[][] p_StateShiftsOnVariable_FD = { };
        private static ushort[][] p_StateReducsOnTerminal_FD = { new ushort[2] { 0x13D, 0x47 }, new ushort[2] { 0x13E, 0x47 }, new ushort[2] { 0x13F, 0x47 }, new ushort[2] { 0x140, 0x47 }, new ushort[2] { 0x141, 0x47 }, new ushort[2] { 0x142, 0x47 }, new ushort[2] { 0x143, 0x47 }, new ushort[2] { 0x144, 0x47 }, new ushort[2] { 0x145, 0x47 }, new ushort[2] { 0x146, 0x47 }, new ushort[2] { 0x147, 0x47 }, new ushort[2] { 0x2, 0x47 }, new ushort[2] { 0x13B, 0x47 }, new ushort[2] { 0x106, 0x47 }, new ushort[2] { 0x13C, 0x47 }, new ushort[2] { 0xF0, 0x47 }, new ushort[2] { 0xF1, 0x47 }, new ushort[2] { 0x152, 0x47 }, new ushort[2] { 0x13A, 0x47 }, new ushort[2] { 0x139, 0x47 }, new ushort[2] { 0x138, 0x47 }, new ushort[2] { 0x137, 0x47 }, new ushort[2] { 0x136, 0x47 }, new ushort[2] { 0x134, 0x47 }, new ushort[2] { 0x135, 0x47 }, new ushort[2] { 0x12E, 0x47 }, new ushort[2] { 0x12F, 0x47 }, new ushort[2] { 0x130, 0x47 }, new ushort[2] { 0x131, 0x47 }, new ushort[2] { 0x132, 0x47 }, new ushort[2] { 0x133, 0x47 }, new ushort[2] { 0x12C, 0x47 }, new ushort[2] { 0x12D, 0x47 }, new ushort[2] { 0x123, 0x47 }, new ushort[2] { 0x124, 0x47 }, new ushort[2] { 0x127, 0x47 }, new ushort[2] { 0x128, 0x47 }, new ushort[2] { 0x129, 0x47 } };

        private static ushort[] p_StateExpectedIDs_FE = { 0xF0, 0xF1 };
        private static string[] p_StateExpectedNames_FE = { "_T[]]", "_T[,]" };
        private static string[] p_StateItems_FE = { "[exp_expression_list -> exp_expression_list , expression . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_FE = { };
        private static ushort[][] p_StateShiftsOnVariable_FE = { };
        private static ushort[][] p_StateReducsOnTerminal_FE = { new ushort[2] { 0xF0, 0x8E }, new ushort[2] { 0xF1, 0x8E } };

        private static ushort[] p_StateExpectedIDs_FF = { 0x152, 0xF1 };
        private static string[] p_StateExpectedNames_FF = { "_T[}]", "_T[,]" };
        private static string[] p_StateItems_FF = { "[_m340 -> , variable_initializer . _m340]", "[_m340 -> . , variable_initializer _m340]", "[_m340 -> . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_FF = { new ushort[2] { 0xF1, 0xFA } };
        private static ushort[][] p_StateShiftsOnVariable_FF = { new ushort[2] { 0x154, 0x101 } };
        private static ushort[][] p_StateReducsOnTerminal_FF = { new ushort[2] { 0x152, 0x225 } };

        private static ushort[] p_StateExpectedIDs_100 = { 0x13D, 0x13E, 0x13F, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x2, 0x13B, 0x106, 0x13C, 0xF0, 0xF1, 0x152, 0x13A, 0x139, 0x138, 0x137, 0x136, 0x134, 0x135, 0x12E, 0x12F, 0x130, 0x131, 0x132, 0x133, 0x12C, 0x12D, 0x123, 0x124, 0x127, 0x128, 0x129 };
        private static string[] p_StateExpectedNames_100 = { "_T[=]", "_T[+=]", "_T[-=]", "_T[*=]", "_T[/=]", "_T[%=]", "_T[&=]", "_T[|=]", "_T[^=]", "_T[<<=]", "_T[>>=]", "$", "_T[?]", "_T[)]", "_T[:]", "_T[]]", "_T[,]", "_T[}]", "_T[||]", "_T[&&]", "_T[|]", "_T[^]", "_T[&]", "_T[==]", "_T[!=]", "_T[<]", "_T[<=]", "_T[>]", "_T[>=]", "_T[is]", "_T[as]", "_T[<<]", "_T[>>]", "_T[+]", "_T[-]", "_T[*]", "_T[/]", "_T[%]" };
        private static string[] p_StateItems_100 = { "[exp_op0_array_creation -> new type_non_array [ exp_expression_list ] type_array_rank array_initializer . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_100 = { };
        private static ushort[][] p_StateShiftsOnVariable_100 = { };
        private static ushort[][] p_StateReducsOnTerminal_100 = { new ushort[2] { 0x13D, 0x45 }, new ushort[2] { 0x13E, 0x45 }, new ushort[2] { 0x13F, 0x45 }, new ushort[2] { 0x140, 0x45 }, new ushort[2] { 0x141, 0x45 }, new ushort[2] { 0x142, 0x45 }, new ushort[2] { 0x143, 0x45 }, new ushort[2] { 0x144, 0x45 }, new ushort[2] { 0x145, 0x45 }, new ushort[2] { 0x146, 0x45 }, new ushort[2] { 0x147, 0x45 }, new ushort[2] { 0x2, 0x45 }, new ushort[2] { 0x13B, 0x45 }, new ushort[2] { 0x106, 0x45 }, new ushort[2] { 0x13C, 0x45 }, new ushort[2] { 0xF0, 0x45 }, new ushort[2] { 0xF1, 0x45 }, new ushort[2] { 0x152, 0x45 }, new ushort[2] { 0x13A, 0x45 }, new ushort[2] { 0x139, 0x45 }, new ushort[2] { 0x138, 0x45 }, new ushort[2] { 0x137, 0x45 }, new ushort[2] { 0x136, 0x45 }, new ushort[2] { 0x134, 0x45 }, new ushort[2] { 0x135, 0x45 }, new ushort[2] { 0x12E, 0x45 }, new ushort[2] { 0x12F, 0x45 }, new ushort[2] { 0x130, 0x45 }, new ushort[2] { 0x131, 0x45 }, new ushort[2] { 0x132, 0x45 }, new ushort[2] { 0x133, 0x45 }, new ushort[2] { 0x12C, 0x45 }, new ushort[2] { 0x12D, 0x45 }, new ushort[2] { 0x123, 0x45 }, new ushort[2] { 0x124, 0x45 }, new ushort[2] { 0x127, 0x45 }, new ushort[2] { 0x128, 0x45 }, new ushort[2] { 0x129, 0x45 } };

        private static ushort[] p_StateExpectedIDs_101 = { 0x152 };
        private static string[] p_StateExpectedNames_101 = { "_T[}]" };
        private static string[] p_StateItems_101 = { "[_m340 -> , variable_initializer _m340 . ]" };
        private static ushort[][] p_StateShiftsOnTerminal_101 = { };
        private static ushort[][] p_StateShiftsOnVariable_101 = { };
        private static ushort[][] p_StateReducsOnTerminal_101 = { new ushort[2] { 0x152, 0x224 } };

        private static ushort[][] p_StateExpectedIDs = { p_StateExpectedIDs_0, p_StateExpectedIDs_1, p_StateExpectedIDs_2, p_StateExpectedIDs_3, p_StateExpectedIDs_4, p_StateExpectedIDs_5, p_StateExpectedIDs_6, p_StateExpectedIDs_7, p_StateExpectedIDs_8, p_StateExpectedIDs_9, p_StateExpectedIDs_A, p_StateExpectedIDs_B, p_StateExpectedIDs_C, p_StateExpectedIDs_D, p_StateExpectedIDs_E, p_StateExpectedIDs_F, p_StateExpectedIDs_10, p_StateExpectedIDs_11, p_StateExpectedIDs_12, p_StateExpectedIDs_13, p_StateExpectedIDs_14, p_StateExpectedIDs_15, p_StateExpectedIDs_16, p_StateExpectedIDs_17, p_StateExpectedIDs_18, p_StateExpectedIDs_19, p_StateExpectedIDs_1A, p_StateExpectedIDs_1B, p_StateExpectedIDs_1C, p_StateExpectedIDs_1D, p_StateExpectedIDs_1E, p_StateExpectedIDs_1F, p_StateExpectedIDs_20, p_StateExpectedIDs_21, p_StateExpectedIDs_22, p_StateExpectedIDs_23, p_StateExpectedIDs_24, p_StateExpectedIDs_25, p_StateExpectedIDs_26, p_StateExpectedIDs_27, p_StateExpectedIDs_28, p_StateExpectedIDs_29, p_StateExpectedIDs_2A, p_StateExpectedIDs_2B, p_StateExpectedIDs_2C, p_StateExpectedIDs_2D, p_StateExpectedIDs_2E, p_StateExpectedIDs_2F, p_StateExpectedIDs_30, p_StateExpectedIDs_31, p_StateExpectedIDs_32, p_StateExpectedIDs_33, p_StateExpectedIDs_34, p_StateExpectedIDs_35, p_StateExpectedIDs_36, p_StateExpectedIDs_37, p_StateExpectedIDs_38, p_StateExpectedIDs_39, p_StateExpectedIDs_3A, p_StateExpectedIDs_3B, p_StateExpectedIDs_3C, p_StateExpectedIDs_3D, p_StateExpectedIDs_3E, p_StateExpectedIDs_3F, p_StateExpectedIDs_40, p_StateExpectedIDs_41, p_StateExpectedIDs_42, p_StateExpectedIDs_43, p_StateExpectedIDs_44, p_StateExpectedIDs_45, p_StateExpectedIDs_46, p_StateExpectedIDs_47, p_StateExpectedIDs_48, p_StateExpectedIDs_49, p_StateExpectedIDs_4A, p_StateExpectedIDs_4B, p_StateExpectedIDs_4C, p_StateExpectedIDs_4D, p_StateExpectedIDs_4E, p_StateExpectedIDs_4F, p_StateExpectedIDs_50, p_StateExpectedIDs_51, p_StateExpectedIDs_52, p_StateExpectedIDs_53, p_StateExpectedIDs_54, p_StateExpectedIDs_55, p_StateExpectedIDs_56, p_StateExpectedIDs_57, p_StateExpectedIDs_58, p_StateExpectedIDs_59, p_StateExpectedIDs_5A, p_StateExpectedIDs_5B, p_StateExpectedIDs_5C, p_StateExpectedIDs_5D, p_StateExpectedIDs_5E, p_StateExpectedIDs_5F, p_StateExpectedIDs_60, p_StateExpectedIDs_61, p_StateExpectedIDs_62, p_StateExpectedIDs_63, p_StateExpectedIDs_64, p_StateExpectedIDs_65, p_StateExpectedIDs_66, p_StateExpectedIDs_67, p_StateExpectedIDs_68, p_StateExpectedIDs_69, p_StateExpectedIDs_6A, p_StateExpectedIDs_6B, p_StateExpectedIDs_6C, p_StateExpectedIDs_6D, p_StateExpectedIDs_6E, p_StateExpectedIDs_6F, p_StateExpectedIDs_70, p_StateExpectedIDs_71, p_StateExpectedIDs_72, p_StateExpectedIDs_73, p_StateExpectedIDs_74, p_StateExpectedIDs_75, p_StateExpectedIDs_76, p_StateExpectedIDs_77, p_StateExpectedIDs_78, p_StateExpectedIDs_79, p_StateExpectedIDs_7A, p_StateExpectedIDs_7B, p_StateExpectedIDs_7C, p_StateExpectedIDs_7D, p_StateExpectedIDs_7E, p_StateExpectedIDs_7F, p_StateExpectedIDs_80, p_StateExpectedIDs_81, p_StateExpectedIDs_82, p_StateExpectedIDs_83, p_StateExpectedIDs_84, p_StateExpectedIDs_85, p_StateExpectedIDs_86, p_StateExpectedIDs_87, p_StateExpectedIDs_88, p_StateExpectedIDs_89, p_StateExpectedIDs_8A, p_StateExpectedIDs_8B, p_StateExpectedIDs_8C, p_StateExpectedIDs_8D, p_StateExpectedIDs_8E, p_StateExpectedIDs_8F, p_StateExpectedIDs_90, p_StateExpectedIDs_91, p_StateExpectedIDs_92, p_StateExpectedIDs_93, p_StateExpectedIDs_94, p_StateExpectedIDs_95, p_StateExpectedIDs_96, p_StateExpectedIDs_97, p_StateExpectedIDs_98, p_StateExpectedIDs_99, p_StateExpectedIDs_9A, p_StateExpectedIDs_9B, p_StateExpectedIDs_9C, p_StateExpectedIDs_9D, p_StateExpectedIDs_9E, p_StateExpectedIDs_9F, p_StateExpectedIDs_A0, p_StateExpectedIDs_A1, p_StateExpectedIDs_A2, p_StateExpectedIDs_A3, p_StateExpectedIDs_A4, p_StateExpectedIDs_A5, p_StateExpectedIDs_A6, p_StateExpectedIDs_A7, p_StateExpectedIDs_A8, p_StateExpectedIDs_A9, p_StateExpectedIDs_AA, p_StateExpectedIDs_AB, p_StateExpectedIDs_AC, p_StateExpectedIDs_AD, p_StateExpectedIDs_AE, p_StateExpectedIDs_AF, p_StateExpectedIDs_B0, p_StateExpectedIDs_B1, p_StateExpectedIDs_B2, p_StateExpectedIDs_B3, p_StateExpectedIDs_B4, p_StateExpectedIDs_B5, p_StateExpectedIDs_B6, p_StateExpectedIDs_B7, p_StateExpectedIDs_B8, p_StateExpectedIDs_B9, p_StateExpectedIDs_BA, p_StateExpectedIDs_BB, p_StateExpectedIDs_BC, p_StateExpectedIDs_BD, p_StateExpectedIDs_BE, p_StateExpectedIDs_BF, p_StateExpectedIDs_C0, p_StateExpectedIDs_C1, p_StateExpectedIDs_C2, p_StateExpectedIDs_C3, p_StateExpectedIDs_C4, p_StateExpectedIDs_C5, p_StateExpectedIDs_C6, p_StateExpectedIDs_C7, p_StateExpectedIDs_C8, p_StateExpectedIDs_C9, p_StateExpectedIDs_CA, p_StateExpectedIDs_CB, p_StateExpectedIDs_CC, p_StateExpectedIDs_CD, p_StateExpectedIDs_CE, p_StateExpectedIDs_CF, p_StateExpectedIDs_D0, p_StateExpectedIDs_D1, p_StateExpectedIDs_D2, p_StateExpectedIDs_D3, p_StateExpectedIDs_D4, p_StateExpectedIDs_D5, p_StateExpectedIDs_D6, p_StateExpectedIDs_D7, p_StateExpectedIDs_D8, p_StateExpectedIDs_D9, p_StateExpectedIDs_DA, p_StateExpectedIDs_DB, p_StateExpectedIDs_DC, p_StateExpectedIDs_DD, p_StateExpectedIDs_DE, p_StateExpectedIDs_DF, p_StateExpectedIDs_E0, p_StateExpectedIDs_E1, p_StateExpectedIDs_E2, p_StateExpectedIDs_E3, p_StateExpectedIDs_E4, p_StateExpectedIDs_E5, p_StateExpectedIDs_E6, p_StateExpectedIDs_E7, p_StateExpectedIDs_E8, p_StateExpectedIDs_E9, p_StateExpectedIDs_EA, p_StateExpectedIDs_EB, p_StateExpectedIDs_EC, p_StateExpectedIDs_ED, p_StateExpectedIDs_EE, p_StateExpectedIDs_EF, p_StateExpectedIDs_F0, p_StateExpectedIDs_F1, p_StateExpectedIDs_F2, p_StateExpectedIDs_F3, p_StateExpectedIDs_F4, p_StateExpectedIDs_F5, p_StateExpectedIDs_F6, p_StateExpectedIDs_F7, p_StateExpectedIDs_F8, p_StateExpectedIDs_F9, p_StateExpectedIDs_FA, p_StateExpectedIDs_FB, p_StateExpectedIDs_FC, p_StateExpectedIDs_FD, p_StateExpectedIDs_FE, p_StateExpectedIDs_FF, p_StateExpectedIDs_100, p_StateExpectedIDs_101 };
        private static string[][] p_StateExpectedNames = { p_StateExpectedNames_0, p_StateExpectedNames_1, p_StateExpectedNames_2, p_StateExpectedNames_3, p_StateExpectedNames_4, p_StateExpectedNames_5, p_StateExpectedNames_6, p_StateExpectedNames_7, p_StateExpectedNames_8, p_StateExpectedNames_9, p_StateExpectedNames_A, p_StateExpectedNames_B, p_StateExpectedNames_C, p_StateExpectedNames_D, p_StateExpectedNames_E, p_StateExpectedNames_F, p_StateExpectedNames_10, p_StateExpectedNames_11, p_StateExpectedNames_12, p_StateExpectedNames_13, p_StateExpectedNames_14, p_StateExpectedNames_15, p_StateExpectedNames_16, p_StateExpectedNames_17, p_StateExpectedNames_18, p_StateExpectedNames_19, p_StateExpectedNames_1A, p_StateExpectedNames_1B, p_StateExpectedNames_1C, p_StateExpectedNames_1D, p_StateExpectedNames_1E, p_StateExpectedNames_1F, p_StateExpectedNames_20, p_StateExpectedNames_21, p_StateExpectedNames_22, p_StateExpectedNames_23, p_StateExpectedNames_24, p_StateExpectedNames_25, p_StateExpectedNames_26, p_StateExpectedNames_27, p_StateExpectedNames_28, p_StateExpectedNames_29, p_StateExpectedNames_2A, p_StateExpectedNames_2B, p_StateExpectedNames_2C, p_StateExpectedNames_2D, p_StateExpectedNames_2E, p_StateExpectedNames_2F, p_StateExpectedNames_30, p_StateExpectedNames_31, p_StateExpectedNames_32, p_StateExpectedNames_33, p_StateExpectedNames_34, p_StateExpectedNames_35, p_StateExpectedNames_36, p_StateExpectedNames_37, p_StateExpectedNames_38, p_StateExpectedNames_39, p_StateExpectedNames_3A, p_StateExpectedNames_3B, p_StateExpectedNames_3C, p_StateExpectedNames_3D, p_StateExpectedNames_3E, p_StateExpectedNames_3F, p_StateExpectedNames_40, p_StateExpectedNames_41, p_StateExpectedNames_42, p_StateExpectedNames_43, p_StateExpectedNames_44, p_StateExpectedNames_45, p_StateExpectedNames_46, p_StateExpectedNames_47, p_StateExpectedNames_48, p_StateExpectedNames_49, p_StateExpectedNames_4A, p_StateExpectedNames_4B, p_StateExpectedNames_4C, p_StateExpectedNames_4D, p_StateExpectedNames_4E, p_StateExpectedNames_4F, p_StateExpectedNames_50, p_StateExpectedNames_51, p_StateExpectedNames_52, p_StateExpectedNames_53, p_StateExpectedNames_54, p_StateExpectedNames_55, p_StateExpectedNames_56, p_StateExpectedNames_57, p_StateExpectedNames_58, p_StateExpectedNames_59, p_StateExpectedNames_5A, p_StateExpectedNames_5B, p_StateExpectedNames_5C, p_StateExpectedNames_5D, p_StateExpectedNames_5E, p_StateExpectedNames_5F, p_StateExpectedNames_60, p_StateExpectedNames_61, p_StateExpectedNames_62, p_StateExpectedNames_63, p_StateExpectedNames_64, p_StateExpectedNames_65, p_StateExpectedNames_66, p_StateExpectedNames_67, p_StateExpectedNames_68, p_StateExpectedNames_69, p_StateExpectedNames_6A, p_StateExpectedNames_6B, p_StateExpectedNames_6C, p_StateExpectedNames_6D, p_StateExpectedNames_6E, p_StateExpectedNames_6F, p_StateExpectedNames_70, p_StateExpectedNames_71, p_StateExpectedNames_72, p_StateExpectedNames_73, p_StateExpectedNames_74, p_StateExpectedNames_75, p_StateExpectedNames_76, p_StateExpectedNames_77, p_StateExpectedNames_78, p_StateExpectedNames_79, p_StateExpectedNames_7A, p_StateExpectedNames_7B, p_StateExpectedNames_7C, p_StateExpectedNames_7D, p_StateExpectedNames_7E, p_StateExpectedNames_7F, p_StateExpectedNames_80, p_StateExpectedNames_81, p_StateExpectedNames_82, p_StateExpectedNames_83, p_StateExpectedNames_84, p_StateExpectedNames_85, p_StateExpectedNames_86, p_StateExpectedNames_87, p_StateExpectedNames_88, p_StateExpectedNames_89, p_StateExpectedNames_8A, p_StateExpectedNames_8B, p_StateExpectedNames_8C, p_StateExpectedNames_8D, p_StateExpectedNames_8E, p_StateExpectedNames_8F, p_StateExpectedNames_90, p_StateExpectedNames_91, p_StateExpectedNames_92, p_StateExpectedNames_93, p_StateExpectedNames_94, p_StateExpectedNames_95, p_StateExpectedNames_96, p_StateExpectedNames_97, p_StateExpectedNames_98, p_StateExpectedNames_99, p_StateExpectedNames_9A, p_StateExpectedNames_9B, p_StateExpectedNames_9C, p_StateExpectedNames_9D, p_StateExpectedNames_9E, p_StateExpectedNames_9F, p_StateExpectedNames_A0, p_StateExpectedNames_A1, p_StateExpectedNames_A2, p_StateExpectedNames_A3, p_StateExpectedNames_A4, p_StateExpectedNames_A5, p_StateExpectedNames_A6, p_StateExpectedNames_A7, p_StateExpectedNames_A8, p_StateExpectedNames_A9, p_StateExpectedNames_AA, p_StateExpectedNames_AB, p_StateExpectedNames_AC, p_StateExpectedNames_AD, p_StateExpectedNames_AE, p_StateExpectedNames_AF, p_StateExpectedNames_B0, p_StateExpectedNames_B1, p_StateExpectedNames_B2, p_StateExpectedNames_B3, p_StateExpectedNames_B4, p_StateExpectedNames_B5, p_StateExpectedNames_B6, p_StateExpectedNames_B7, p_StateExpectedNames_B8, p_StateExpectedNames_B9, p_StateExpectedNames_BA, p_StateExpectedNames_BB, p_StateExpectedNames_BC, p_StateExpectedNames_BD, p_StateExpectedNames_BE, p_StateExpectedNames_BF, p_StateExpectedNames_C0, p_StateExpectedNames_C1, p_StateExpectedNames_C2, p_StateExpectedNames_C3, p_StateExpectedNames_C4, p_StateExpectedNames_C5, p_StateExpectedNames_C6, p_StateExpectedNames_C7, p_StateExpectedNames_C8, p_StateExpectedNames_C9, p_StateExpectedNames_CA, p_StateExpectedNames_CB, p_StateExpectedNames_CC, p_StateExpectedNames_CD, p_StateExpectedNames_CE, p_StateExpectedNames_CF, p_StateExpectedNames_D0, p_StateExpectedNames_D1, p_StateExpectedNames_D2, p_StateExpectedNames_D3, p_StateExpectedNames_D4, p_StateExpectedNames_D5, p_StateExpectedNames_D6, p_StateExpectedNames_D7, p_StateExpectedNames_D8, p_StateExpectedNames_D9, p_StateExpectedNames_DA, p_StateExpectedNames_DB, p_StateExpectedNames_DC, p_StateExpectedNames_DD, p_StateExpectedNames_DE, p_StateExpectedNames_DF, p_StateExpectedNames_E0, p_StateExpectedNames_E1, p_StateExpectedNames_E2, p_StateExpectedNames_E3, p_StateExpectedNames_E4, p_StateExpectedNames_E5, p_StateExpectedNames_E6, p_StateExpectedNames_E7, p_StateExpectedNames_E8, p_StateExpectedNames_E9, p_StateExpectedNames_EA, p_StateExpectedNames_EB, p_StateExpectedNames_EC, p_StateExpectedNames_ED, p_StateExpectedNames_EE, p_StateExpectedNames_EF, p_StateExpectedNames_F0, p_StateExpectedNames_F1, p_StateExpectedNames_F2, p_StateExpectedNames_F3, p_StateExpectedNames_F4, p_StateExpectedNames_F5, p_StateExpectedNames_F6, p_StateExpectedNames_F7, p_StateExpectedNames_F8, p_StateExpectedNames_F9, p_StateExpectedNames_FA, p_StateExpectedNames_FB, p_StateExpectedNames_FC, p_StateExpectedNames_FD, p_StateExpectedNames_FE, p_StateExpectedNames_FF, p_StateExpectedNames_100, p_StateExpectedNames_101 };
        private static string[][] p_StateItems = { p_StateItems_0, p_StateItems_1, p_StateItems_2, p_StateItems_3, p_StateItems_4, p_StateItems_5, p_StateItems_6, p_StateItems_7, p_StateItems_8, p_StateItems_9, p_StateItems_A, p_StateItems_B, p_StateItems_C, p_StateItems_D, p_StateItems_E, p_StateItems_F, p_StateItems_10, p_StateItems_11, p_StateItems_12, p_StateItems_13, p_StateItems_14, p_StateItems_15, p_StateItems_16, p_StateItems_17, p_StateItems_18, p_StateItems_19, p_StateItems_1A, p_StateItems_1B, p_StateItems_1C, p_StateItems_1D, p_StateItems_1E, p_StateItems_1F, p_StateItems_20, p_StateItems_21, p_StateItems_22, p_StateItems_23, p_StateItems_24, p_StateItems_25, p_StateItems_26, p_StateItems_27, p_StateItems_28, p_StateItems_29, p_StateItems_2A, p_StateItems_2B, p_StateItems_2C, p_StateItems_2D, p_StateItems_2E, p_StateItems_2F, p_StateItems_30, p_StateItems_31, p_StateItems_32, p_StateItems_33, p_StateItems_34, p_StateItems_35, p_StateItems_36, p_StateItems_37, p_StateItems_38, p_StateItems_39, p_StateItems_3A, p_StateItems_3B, p_StateItems_3C, p_StateItems_3D, p_StateItems_3E, p_StateItems_3F, p_StateItems_40, p_StateItems_41, p_StateItems_42, p_StateItems_43, p_StateItems_44, p_StateItems_45, p_StateItems_46, p_StateItems_47, p_StateItems_48, p_StateItems_49, p_StateItems_4A, p_StateItems_4B, p_StateItems_4C, p_StateItems_4D, p_StateItems_4E, p_StateItems_4F, p_StateItems_50, p_StateItems_51, p_StateItems_52, p_StateItems_53, p_StateItems_54, p_StateItems_55, p_StateItems_56, p_StateItems_57, p_StateItems_58, p_StateItems_59, p_StateItems_5A, p_StateItems_5B, p_StateItems_5C, p_StateItems_5D, p_StateItems_5E, p_StateItems_5F, p_StateItems_60, p_StateItems_61, p_StateItems_62, p_StateItems_63, p_StateItems_64, p_StateItems_65, p_StateItems_66, p_StateItems_67, p_StateItems_68, p_StateItems_69, p_StateItems_6A, p_StateItems_6B, p_StateItems_6C, p_StateItems_6D, p_StateItems_6E, p_StateItems_6F, p_StateItems_70, p_StateItems_71, p_StateItems_72, p_StateItems_73, p_StateItems_74, p_StateItems_75, p_StateItems_76, p_StateItems_77, p_StateItems_78, p_StateItems_79, p_StateItems_7A, p_StateItems_7B, p_StateItems_7C, p_StateItems_7D, p_StateItems_7E, p_StateItems_7F, p_StateItems_80, p_StateItems_81, p_StateItems_82, p_StateItems_83, p_StateItems_84, p_StateItems_85, p_StateItems_86, p_StateItems_87, p_StateItems_88, p_StateItems_89, p_StateItems_8A, p_StateItems_8B, p_StateItems_8C, p_StateItems_8D, p_StateItems_8E, p_StateItems_8F, p_StateItems_90, p_StateItems_91, p_StateItems_92, p_StateItems_93, p_StateItems_94, p_StateItems_95, p_StateItems_96, p_StateItems_97, p_StateItems_98, p_StateItems_99, p_StateItems_9A, p_StateItems_9B, p_StateItems_9C, p_StateItems_9D, p_StateItems_9E, p_StateItems_9F, p_StateItems_A0, p_StateItems_A1, p_StateItems_A2, p_StateItems_A3, p_StateItems_A4, p_StateItems_A5, p_StateItems_A6, p_StateItems_A7, p_StateItems_A8, p_StateItems_A9, p_StateItems_AA, p_StateItems_AB, p_StateItems_AC, p_StateItems_AD, p_StateItems_AE, p_StateItems_AF, p_StateItems_B0, p_StateItems_B1, p_StateItems_B2, p_StateItems_B3, p_StateItems_B4, p_StateItems_B5, p_StateItems_B6, p_StateItems_B7, p_StateItems_B8, p_StateItems_B9, p_StateItems_BA, p_StateItems_BB, p_StateItems_BC, p_StateItems_BD, p_StateItems_BE, p_StateItems_BF, p_StateItems_C0, p_StateItems_C1, p_StateItems_C2, p_StateItems_C3, p_StateItems_C4, p_StateItems_C5, p_StateItems_C6, p_StateItems_C7, p_StateItems_C8, p_StateItems_C9, p_StateItems_CA, p_StateItems_CB, p_StateItems_CC, p_StateItems_CD, p_StateItems_CE, p_StateItems_CF, p_StateItems_D0, p_StateItems_D1, p_StateItems_D2, p_StateItems_D3, p_StateItems_D4, p_StateItems_D5, p_StateItems_D6, p_StateItems_D7, p_StateItems_D8, p_StateItems_D9, p_StateItems_DA, p_StateItems_DB, p_StateItems_DC, p_StateItems_DD, p_StateItems_DE, p_StateItems_DF, p_StateItems_E0, p_StateItems_E1, p_StateItems_E2, p_StateItems_E3, p_StateItems_E4, p_StateItems_E5, p_StateItems_E6, p_StateItems_E7, p_StateItems_E8, p_StateItems_E9, p_StateItems_EA, p_StateItems_EB, p_StateItems_EC, p_StateItems_ED, p_StateItems_EE, p_StateItems_EF, p_StateItems_F0, p_StateItems_F1, p_StateItems_F2, p_StateItems_F3, p_StateItems_F4, p_StateItems_F5, p_StateItems_F6, p_StateItems_F7, p_StateItems_F8, p_StateItems_F9, p_StateItems_FA, p_StateItems_FB, p_StateItems_FC, p_StateItems_FD, p_StateItems_FE, p_StateItems_FF, p_StateItems_100, p_StateItems_101 };
        private static ushort[][][] p_StateShiftsOnTerminal = { p_StateShiftsOnTerminal_0, p_StateShiftsOnTerminal_1, p_StateShiftsOnTerminal_2, p_StateShiftsOnTerminal_3, p_StateShiftsOnTerminal_4, p_StateShiftsOnTerminal_5, p_StateShiftsOnTerminal_6, p_StateShiftsOnTerminal_7, p_StateShiftsOnTerminal_8, p_StateShiftsOnTerminal_9, p_StateShiftsOnTerminal_A, p_StateShiftsOnTerminal_B, p_StateShiftsOnTerminal_C, p_StateShiftsOnTerminal_D, p_StateShiftsOnTerminal_E, p_StateShiftsOnTerminal_F, p_StateShiftsOnTerminal_10, p_StateShiftsOnTerminal_11, p_StateShiftsOnTerminal_12, p_StateShiftsOnTerminal_13, p_StateShiftsOnTerminal_14, p_StateShiftsOnTerminal_15, p_StateShiftsOnTerminal_16, p_StateShiftsOnTerminal_17, p_StateShiftsOnTerminal_18, p_StateShiftsOnTerminal_19, p_StateShiftsOnTerminal_1A, p_StateShiftsOnTerminal_1B, p_StateShiftsOnTerminal_1C, p_StateShiftsOnTerminal_1D, p_StateShiftsOnTerminal_1E, p_StateShiftsOnTerminal_1F, p_StateShiftsOnTerminal_20, p_StateShiftsOnTerminal_21, p_StateShiftsOnTerminal_22, p_StateShiftsOnTerminal_23, p_StateShiftsOnTerminal_24, p_StateShiftsOnTerminal_25, p_StateShiftsOnTerminal_26, p_StateShiftsOnTerminal_27, p_StateShiftsOnTerminal_28, p_StateShiftsOnTerminal_29, p_StateShiftsOnTerminal_2A, p_StateShiftsOnTerminal_2B, p_StateShiftsOnTerminal_2C, p_StateShiftsOnTerminal_2D, p_StateShiftsOnTerminal_2E, p_StateShiftsOnTerminal_2F, p_StateShiftsOnTerminal_30, p_StateShiftsOnTerminal_31, p_StateShiftsOnTerminal_32, p_StateShiftsOnTerminal_33, p_StateShiftsOnTerminal_34, p_StateShiftsOnTerminal_35, p_StateShiftsOnTerminal_36, p_StateShiftsOnTerminal_37, p_StateShiftsOnTerminal_38, p_StateShiftsOnTerminal_39, p_StateShiftsOnTerminal_3A, p_StateShiftsOnTerminal_3B, p_StateShiftsOnTerminal_3C, p_StateShiftsOnTerminal_3D, p_StateShiftsOnTerminal_3E, p_StateShiftsOnTerminal_3F, p_StateShiftsOnTerminal_40, p_StateShiftsOnTerminal_41, p_StateShiftsOnTerminal_42, p_StateShiftsOnTerminal_43, p_StateShiftsOnTerminal_44, p_StateShiftsOnTerminal_45, p_StateShiftsOnTerminal_46, p_StateShiftsOnTerminal_47, p_StateShiftsOnTerminal_48, p_StateShiftsOnTerminal_49, p_StateShiftsOnTerminal_4A, p_StateShiftsOnTerminal_4B, p_StateShiftsOnTerminal_4C, p_StateShiftsOnTerminal_4D, p_StateShiftsOnTerminal_4E, p_StateShiftsOnTerminal_4F, p_StateShiftsOnTerminal_50, p_StateShiftsOnTerminal_51, p_StateShiftsOnTerminal_52, p_StateShiftsOnTerminal_53, p_StateShiftsOnTerminal_54, p_StateShiftsOnTerminal_55, p_StateShiftsOnTerminal_56, p_StateShiftsOnTerminal_57, p_StateShiftsOnTerminal_58, p_StateShiftsOnTerminal_59, p_StateShiftsOnTerminal_5A, p_StateShiftsOnTerminal_5B, p_StateShiftsOnTerminal_5C, p_StateShiftsOnTerminal_5D, p_StateShiftsOnTerminal_5E, p_StateShiftsOnTerminal_5F, p_StateShiftsOnTerminal_60, p_StateShiftsOnTerminal_61, p_StateShiftsOnTerminal_62, p_StateShiftsOnTerminal_63, p_StateShiftsOnTerminal_64, p_StateShiftsOnTerminal_65, p_StateShiftsOnTerminal_66, p_StateShiftsOnTerminal_67, p_StateShiftsOnTerminal_68, p_StateShiftsOnTerminal_69, p_StateShiftsOnTerminal_6A, p_StateShiftsOnTerminal_6B, p_StateShiftsOnTerminal_6C, p_StateShiftsOnTerminal_6D, p_StateShiftsOnTerminal_6E, p_StateShiftsOnTerminal_6F, p_StateShiftsOnTerminal_70, p_StateShiftsOnTerminal_71, p_StateShiftsOnTerminal_72, p_StateShiftsOnTerminal_73, p_StateShiftsOnTerminal_74, p_StateShiftsOnTerminal_75, p_StateShiftsOnTerminal_76, p_StateShiftsOnTerminal_77, p_StateShiftsOnTerminal_78, p_StateShiftsOnTerminal_79, p_StateShiftsOnTerminal_7A, p_StateShiftsOnTerminal_7B, p_StateShiftsOnTerminal_7C, p_StateShiftsOnTerminal_7D, p_StateShiftsOnTerminal_7E, p_StateShiftsOnTerminal_7F, p_StateShiftsOnTerminal_80, p_StateShiftsOnTerminal_81, p_StateShiftsOnTerminal_82, p_StateShiftsOnTerminal_83, p_StateShiftsOnTerminal_84, p_StateShiftsOnTerminal_85, p_StateShiftsOnTerminal_86, p_StateShiftsOnTerminal_87, p_StateShiftsOnTerminal_88, p_StateShiftsOnTerminal_89, p_StateShiftsOnTerminal_8A, p_StateShiftsOnTerminal_8B, p_StateShiftsOnTerminal_8C, p_StateShiftsOnTerminal_8D, p_StateShiftsOnTerminal_8E, p_StateShiftsOnTerminal_8F, p_StateShiftsOnTerminal_90, p_StateShiftsOnTerminal_91, p_StateShiftsOnTerminal_92, p_StateShiftsOnTerminal_93, p_StateShiftsOnTerminal_94, p_StateShiftsOnTerminal_95, p_StateShiftsOnTerminal_96, p_StateShiftsOnTerminal_97, p_StateShiftsOnTerminal_98, p_StateShiftsOnTerminal_99, p_StateShiftsOnTerminal_9A, p_StateShiftsOnTerminal_9B, p_StateShiftsOnTerminal_9C, p_StateShiftsOnTerminal_9D, p_StateShiftsOnTerminal_9E, p_StateShiftsOnTerminal_9F, p_StateShiftsOnTerminal_A0, p_StateShiftsOnTerminal_A1, p_StateShiftsOnTerminal_A2, p_StateShiftsOnTerminal_A3, p_StateShiftsOnTerminal_A4, p_StateShiftsOnTerminal_A5, p_StateShiftsOnTerminal_A6, p_StateShiftsOnTerminal_A7, p_StateShiftsOnTerminal_A8, p_StateShiftsOnTerminal_A9, p_StateShiftsOnTerminal_AA, p_StateShiftsOnTerminal_AB, p_StateShiftsOnTerminal_AC, p_StateShiftsOnTerminal_AD, p_StateShiftsOnTerminal_AE, p_StateShiftsOnTerminal_AF, p_StateShiftsOnTerminal_B0, p_StateShiftsOnTerminal_B1, p_StateShiftsOnTerminal_B2, p_StateShiftsOnTerminal_B3, p_StateShiftsOnTerminal_B4, p_StateShiftsOnTerminal_B5, p_StateShiftsOnTerminal_B6, p_StateShiftsOnTerminal_B7, p_StateShiftsOnTerminal_B8, p_StateShiftsOnTerminal_B9, p_StateShiftsOnTerminal_BA, p_StateShiftsOnTerminal_BB, p_StateShiftsOnTerminal_BC, p_StateShiftsOnTerminal_BD, p_StateShiftsOnTerminal_BE, p_StateShiftsOnTerminal_BF, p_StateShiftsOnTerminal_C0, p_StateShiftsOnTerminal_C1, p_StateShiftsOnTerminal_C2, p_StateShiftsOnTerminal_C3, p_StateShiftsOnTerminal_C4, p_StateShiftsOnTerminal_C5, p_StateShiftsOnTerminal_C6, p_StateShiftsOnTerminal_C7, p_StateShiftsOnTerminal_C8, p_StateShiftsOnTerminal_C9, p_StateShiftsOnTerminal_CA, p_StateShiftsOnTerminal_CB, p_StateShiftsOnTerminal_CC, p_StateShiftsOnTerminal_CD, p_StateShiftsOnTerminal_CE, p_StateShiftsOnTerminal_CF, p_StateShiftsOnTerminal_D0, p_StateShiftsOnTerminal_D1, p_StateShiftsOnTerminal_D2, p_StateShiftsOnTerminal_D3, p_StateShiftsOnTerminal_D4, p_StateShiftsOnTerminal_D5, p_StateShiftsOnTerminal_D6, p_StateShiftsOnTerminal_D7, p_StateShiftsOnTerminal_D8, p_StateShiftsOnTerminal_D9, p_StateShiftsOnTerminal_DA, p_StateShiftsOnTerminal_DB, p_StateShiftsOnTerminal_DC, p_StateShiftsOnTerminal_DD, p_StateShiftsOnTerminal_DE, p_StateShiftsOnTerminal_DF, p_StateShiftsOnTerminal_E0, p_StateShiftsOnTerminal_E1, p_StateShiftsOnTerminal_E2, p_StateShiftsOnTerminal_E3, p_StateShiftsOnTerminal_E4, p_StateShiftsOnTerminal_E5, p_StateShiftsOnTerminal_E6, p_StateShiftsOnTerminal_E7, p_StateShiftsOnTerminal_E8, p_StateShiftsOnTerminal_E9, p_StateShiftsOnTerminal_EA, p_StateShiftsOnTerminal_EB, p_StateShiftsOnTerminal_EC, p_StateShiftsOnTerminal_ED, p_StateShiftsOnTerminal_EE, p_StateShiftsOnTerminal_EF, p_StateShiftsOnTerminal_F0, p_StateShiftsOnTerminal_F1, p_StateShiftsOnTerminal_F2, p_StateShiftsOnTerminal_F3, p_StateShiftsOnTerminal_F4, p_StateShiftsOnTerminal_F5, p_StateShiftsOnTerminal_F6, p_StateShiftsOnTerminal_F7, p_StateShiftsOnTerminal_F8, p_StateShiftsOnTerminal_F9, p_StateShiftsOnTerminal_FA, p_StateShiftsOnTerminal_FB, p_StateShiftsOnTerminal_FC, p_StateShiftsOnTerminal_FD, p_StateShiftsOnTerminal_FE, p_StateShiftsOnTerminal_FF, p_StateShiftsOnTerminal_100, p_StateShiftsOnTerminal_101 };
        private static ushort[][][] p_StateShiftsOnVariable = { p_StateShiftsOnVariable_0, p_StateShiftsOnVariable_1, p_StateShiftsOnVariable_2, p_StateShiftsOnVariable_3, p_StateShiftsOnVariable_4, p_StateShiftsOnVariable_5, p_StateShiftsOnVariable_6, p_StateShiftsOnVariable_7, p_StateShiftsOnVariable_8, p_StateShiftsOnVariable_9, p_StateShiftsOnVariable_A, p_StateShiftsOnVariable_B, p_StateShiftsOnVariable_C, p_StateShiftsOnVariable_D, p_StateShiftsOnVariable_E, p_StateShiftsOnVariable_F, p_StateShiftsOnVariable_10, p_StateShiftsOnVariable_11, p_StateShiftsOnVariable_12, p_StateShiftsOnVariable_13, p_StateShiftsOnVariable_14, p_StateShiftsOnVariable_15, p_StateShiftsOnVariable_16, p_StateShiftsOnVariable_17, p_StateShiftsOnVariable_18, p_StateShiftsOnVariable_19, p_StateShiftsOnVariable_1A, p_StateShiftsOnVariable_1B, p_StateShiftsOnVariable_1C, p_StateShiftsOnVariable_1D, p_StateShiftsOnVariable_1E, p_StateShiftsOnVariable_1F, p_StateShiftsOnVariable_20, p_StateShiftsOnVariable_21, p_StateShiftsOnVariable_22, p_StateShiftsOnVariable_23, p_StateShiftsOnVariable_24, p_StateShiftsOnVariable_25, p_StateShiftsOnVariable_26, p_StateShiftsOnVariable_27, p_StateShiftsOnVariable_28, p_StateShiftsOnVariable_29, p_StateShiftsOnVariable_2A, p_StateShiftsOnVariable_2B, p_StateShiftsOnVariable_2C, p_StateShiftsOnVariable_2D, p_StateShiftsOnVariable_2E, p_StateShiftsOnVariable_2F, p_StateShiftsOnVariable_30, p_StateShiftsOnVariable_31, p_StateShiftsOnVariable_32, p_StateShiftsOnVariable_33, p_StateShiftsOnVariable_34, p_StateShiftsOnVariable_35, p_StateShiftsOnVariable_36, p_StateShiftsOnVariable_37, p_StateShiftsOnVariable_38, p_StateShiftsOnVariable_39, p_StateShiftsOnVariable_3A, p_StateShiftsOnVariable_3B, p_StateShiftsOnVariable_3C, p_StateShiftsOnVariable_3D, p_StateShiftsOnVariable_3E, p_StateShiftsOnVariable_3F, p_StateShiftsOnVariable_40, p_StateShiftsOnVariable_41, p_StateShiftsOnVariable_42, p_StateShiftsOnVariable_43, p_StateShiftsOnVariable_44, p_StateShiftsOnVariable_45, p_StateShiftsOnVariable_46, p_StateShiftsOnVariable_47, p_StateShiftsOnVariable_48, p_StateShiftsOnVariable_49, p_StateShiftsOnVariable_4A, p_StateShiftsOnVariable_4B, p_StateShiftsOnVariable_4C, p_StateShiftsOnVariable_4D, p_StateShiftsOnVariable_4E, p_StateShiftsOnVariable_4F, p_StateShiftsOnVariable_50, p_StateShiftsOnVariable_51, p_StateShiftsOnVariable_52, p_StateShiftsOnVariable_53, p_StateShiftsOnVariable_54, p_StateShiftsOnVariable_55, p_StateShiftsOnVariable_56, p_StateShiftsOnVariable_57, p_StateShiftsOnVariable_58, p_StateShiftsOnVariable_59, p_StateShiftsOnVariable_5A, p_StateShiftsOnVariable_5B, p_StateShiftsOnVariable_5C, p_StateShiftsOnVariable_5D, p_StateShiftsOnVariable_5E, p_StateShiftsOnVariable_5F, p_StateShiftsOnVariable_60, p_StateShiftsOnVariable_61, p_StateShiftsOnVariable_62, p_StateShiftsOnVariable_63, p_StateShiftsOnVariable_64, p_StateShiftsOnVariable_65, p_StateShiftsOnVariable_66, p_StateShiftsOnVariable_67, p_StateShiftsOnVariable_68, p_StateShiftsOnVariable_69, p_StateShiftsOnVariable_6A, p_StateShiftsOnVariable_6B, p_StateShiftsOnVariable_6C, p_StateShiftsOnVariable_6D, p_StateShiftsOnVariable_6E, p_StateShiftsOnVariable_6F, p_StateShiftsOnVariable_70, p_StateShiftsOnVariable_71, p_StateShiftsOnVariable_72, p_StateShiftsOnVariable_73, p_StateShiftsOnVariable_74, p_StateShiftsOnVariable_75, p_StateShiftsOnVariable_76, p_StateShiftsOnVariable_77, p_StateShiftsOnVariable_78, p_StateShiftsOnVariable_79, p_StateShiftsOnVariable_7A, p_StateShiftsOnVariable_7B, p_StateShiftsOnVariable_7C, p_StateShiftsOnVariable_7D, p_StateShiftsOnVariable_7E, p_StateShiftsOnVariable_7F, p_StateShiftsOnVariable_80, p_StateShiftsOnVariable_81, p_StateShiftsOnVariable_82, p_StateShiftsOnVariable_83, p_StateShiftsOnVariable_84, p_StateShiftsOnVariable_85, p_StateShiftsOnVariable_86, p_StateShiftsOnVariable_87, p_StateShiftsOnVariable_88, p_StateShiftsOnVariable_89, p_StateShiftsOnVariable_8A, p_StateShiftsOnVariable_8B, p_StateShiftsOnVariable_8C, p_StateShiftsOnVariable_8D, p_StateShiftsOnVariable_8E, p_StateShiftsOnVariable_8F, p_StateShiftsOnVariable_90, p_StateShiftsOnVariable_91, p_StateShiftsOnVariable_92, p_StateShiftsOnVariable_93, p_StateShiftsOnVariable_94, p_StateShiftsOnVariable_95, p_StateShiftsOnVariable_96, p_StateShiftsOnVariable_97, p_StateShiftsOnVariable_98, p_StateShiftsOnVariable_99, p_StateShiftsOnVariable_9A, p_StateShiftsOnVariable_9B, p_StateShiftsOnVariable_9C, p_StateShiftsOnVariable_9D, p_StateShiftsOnVariable_9E, p_StateShiftsOnVariable_9F, p_StateShiftsOnVariable_A0, p_StateShiftsOnVariable_A1, p_StateShiftsOnVariable_A2, p_StateShiftsOnVariable_A3, p_StateShiftsOnVariable_A4, p_StateShiftsOnVariable_A5, p_StateShiftsOnVariable_A6, p_StateShiftsOnVariable_A7, p_StateShiftsOnVariable_A8, p_StateShiftsOnVariable_A9, p_StateShiftsOnVariable_AA, p_StateShiftsOnVariable_AB, p_StateShiftsOnVariable_AC, p_StateShiftsOnVariable_AD, p_StateShiftsOnVariable_AE, p_StateShiftsOnVariable_AF, p_StateShiftsOnVariable_B0, p_StateShiftsOnVariable_B1, p_StateShiftsOnVariable_B2, p_StateShiftsOnVariable_B3, p_StateShiftsOnVariable_B4, p_StateShiftsOnVariable_B5, p_StateShiftsOnVariable_B6, p_StateShiftsOnVariable_B7, p_StateShiftsOnVariable_B8, p_StateShiftsOnVariable_B9, p_StateShiftsOnVariable_BA, p_StateShiftsOnVariable_BB, p_StateShiftsOnVariable_BC, p_StateShiftsOnVariable_BD, p_StateShiftsOnVariable_BE, p_StateShiftsOnVariable_BF, p_StateShiftsOnVariable_C0, p_StateShiftsOnVariable_C1, p_StateShiftsOnVariable_C2, p_StateShiftsOnVariable_C3, p_StateShiftsOnVariable_C4, p_StateShiftsOnVariable_C5, p_StateShiftsOnVariable_C6, p_StateShiftsOnVariable_C7, p_StateShiftsOnVariable_C8, p_StateShiftsOnVariable_C9, p_StateShiftsOnVariable_CA, p_StateShiftsOnVariable_CB, p_StateShiftsOnVariable_CC, p_StateShiftsOnVariable_CD, p_StateShiftsOnVariable_CE, p_StateShiftsOnVariable_CF, p_StateShiftsOnVariable_D0, p_StateShiftsOnVariable_D1, p_StateShiftsOnVariable_D2, p_StateShiftsOnVariable_D3, p_StateShiftsOnVariable_D4, p_StateShiftsOnVariable_D5, p_StateShiftsOnVariable_D6, p_StateShiftsOnVariable_D7, p_StateShiftsOnVariable_D8, p_StateShiftsOnVariable_D9, p_StateShiftsOnVariable_DA, p_StateShiftsOnVariable_DB, p_StateShiftsOnVariable_DC, p_StateShiftsOnVariable_DD, p_StateShiftsOnVariable_DE, p_StateShiftsOnVariable_DF, p_StateShiftsOnVariable_E0, p_StateShiftsOnVariable_E1, p_StateShiftsOnVariable_E2, p_StateShiftsOnVariable_E3, p_StateShiftsOnVariable_E4, p_StateShiftsOnVariable_E5, p_StateShiftsOnVariable_E6, p_StateShiftsOnVariable_E7, p_StateShiftsOnVariable_E8, p_StateShiftsOnVariable_E9, p_StateShiftsOnVariable_EA, p_StateShiftsOnVariable_EB, p_StateShiftsOnVariable_EC, p_StateShiftsOnVariable_ED, p_StateShiftsOnVariable_EE, p_StateShiftsOnVariable_EF, p_StateShiftsOnVariable_F0, p_StateShiftsOnVariable_F1, p_StateShiftsOnVariable_F2, p_StateShiftsOnVariable_F3, p_StateShiftsOnVariable_F4, p_StateShiftsOnVariable_F5, p_StateShiftsOnVariable_F6, p_StateShiftsOnVariable_F7, p_StateShiftsOnVariable_F8, p_StateShiftsOnVariable_F9, p_StateShiftsOnVariable_FA, p_StateShiftsOnVariable_FB, p_StateShiftsOnVariable_FC, p_StateShiftsOnVariable_FD, p_StateShiftsOnVariable_FE, p_StateShiftsOnVariable_FF, p_StateShiftsOnVariable_100, p_StateShiftsOnVariable_101 };
        private static ushort[][][] p_StateReducsOnTerminal = { p_StateReducsOnTerminal_0, p_StateReducsOnTerminal_1, p_StateReducsOnTerminal_2, p_StateReducsOnTerminal_3, p_StateReducsOnTerminal_4, p_StateReducsOnTerminal_5, p_StateReducsOnTerminal_6, p_StateReducsOnTerminal_7, p_StateReducsOnTerminal_8, p_StateReducsOnTerminal_9, p_StateReducsOnTerminal_A, p_StateReducsOnTerminal_B, p_StateReducsOnTerminal_C, p_StateReducsOnTerminal_D, p_StateReducsOnTerminal_E, p_StateReducsOnTerminal_F, p_StateReducsOnTerminal_10, p_StateReducsOnTerminal_11, p_StateReducsOnTerminal_12, p_StateReducsOnTerminal_13, p_StateReducsOnTerminal_14, p_StateReducsOnTerminal_15, p_StateReducsOnTerminal_16, p_StateReducsOnTerminal_17, p_StateReducsOnTerminal_18, p_StateReducsOnTerminal_19, p_StateReducsOnTerminal_1A, p_StateReducsOnTerminal_1B, p_StateReducsOnTerminal_1C, p_StateReducsOnTerminal_1D, p_StateReducsOnTerminal_1E, p_StateReducsOnTerminal_1F, p_StateReducsOnTerminal_20, p_StateReducsOnTerminal_21, p_StateReducsOnTerminal_22, p_StateReducsOnTerminal_23, p_StateReducsOnTerminal_24, p_StateReducsOnTerminal_25, p_StateReducsOnTerminal_26, p_StateReducsOnTerminal_27, p_StateReducsOnTerminal_28, p_StateReducsOnTerminal_29, p_StateReducsOnTerminal_2A, p_StateReducsOnTerminal_2B, p_StateReducsOnTerminal_2C, p_StateReducsOnTerminal_2D, p_StateReducsOnTerminal_2E, p_StateReducsOnTerminal_2F, p_StateReducsOnTerminal_30, p_StateReducsOnTerminal_31, p_StateReducsOnTerminal_32, p_StateReducsOnTerminal_33, p_StateReducsOnTerminal_34, p_StateReducsOnTerminal_35, p_StateReducsOnTerminal_36, p_StateReducsOnTerminal_37, p_StateReducsOnTerminal_38, p_StateReducsOnTerminal_39, p_StateReducsOnTerminal_3A, p_StateReducsOnTerminal_3B, p_StateReducsOnTerminal_3C, p_StateReducsOnTerminal_3D, p_StateReducsOnTerminal_3E, p_StateReducsOnTerminal_3F, p_StateReducsOnTerminal_40, p_StateReducsOnTerminal_41, p_StateReducsOnTerminal_42, p_StateReducsOnTerminal_43, p_StateReducsOnTerminal_44, p_StateReducsOnTerminal_45, p_StateReducsOnTerminal_46, p_StateReducsOnTerminal_47, p_StateReducsOnTerminal_48, p_StateReducsOnTerminal_49, p_StateReducsOnTerminal_4A, p_StateReducsOnTerminal_4B, p_StateReducsOnTerminal_4C, p_StateReducsOnTerminal_4D, p_StateReducsOnTerminal_4E, p_StateReducsOnTerminal_4F, p_StateReducsOnTerminal_50, p_StateReducsOnTerminal_51, p_StateReducsOnTerminal_52, p_StateReducsOnTerminal_53, p_StateReducsOnTerminal_54, p_StateReducsOnTerminal_55, p_StateReducsOnTerminal_56, p_StateReducsOnTerminal_57, p_StateReducsOnTerminal_58, p_StateReducsOnTerminal_59, p_StateReducsOnTerminal_5A, p_StateReducsOnTerminal_5B, p_StateReducsOnTerminal_5C, p_StateReducsOnTerminal_5D, p_StateReducsOnTerminal_5E, p_StateReducsOnTerminal_5F, p_StateReducsOnTerminal_60, p_StateReducsOnTerminal_61, p_StateReducsOnTerminal_62, p_StateReducsOnTerminal_63, p_StateReducsOnTerminal_64, p_StateReducsOnTerminal_65, p_StateReducsOnTerminal_66, p_StateReducsOnTerminal_67, p_StateReducsOnTerminal_68, p_StateReducsOnTerminal_69, p_StateReducsOnTerminal_6A, p_StateReducsOnTerminal_6B, p_StateReducsOnTerminal_6C, p_StateReducsOnTerminal_6D, p_StateReducsOnTerminal_6E, p_StateReducsOnTerminal_6F, p_StateReducsOnTerminal_70, p_StateReducsOnTerminal_71, p_StateReducsOnTerminal_72, p_StateReducsOnTerminal_73, p_StateReducsOnTerminal_74, p_StateReducsOnTerminal_75, p_StateReducsOnTerminal_76, p_StateReducsOnTerminal_77, p_StateReducsOnTerminal_78, p_StateReducsOnTerminal_79, p_StateReducsOnTerminal_7A, p_StateReducsOnTerminal_7B, p_StateReducsOnTerminal_7C, p_StateReducsOnTerminal_7D, p_StateReducsOnTerminal_7E, p_StateReducsOnTerminal_7F, p_StateReducsOnTerminal_80, p_StateReducsOnTerminal_81, p_StateReducsOnTerminal_82, p_StateReducsOnTerminal_83, p_StateReducsOnTerminal_84, p_StateReducsOnTerminal_85, p_StateReducsOnTerminal_86, p_StateReducsOnTerminal_87, p_StateReducsOnTerminal_88, p_StateReducsOnTerminal_89, p_StateReducsOnTerminal_8A, p_StateReducsOnTerminal_8B, p_StateReducsOnTerminal_8C, p_StateReducsOnTerminal_8D, p_StateReducsOnTerminal_8E, p_StateReducsOnTerminal_8F, p_StateReducsOnTerminal_90, p_StateReducsOnTerminal_91, p_StateReducsOnTerminal_92, p_StateReducsOnTerminal_93, p_StateReducsOnTerminal_94, p_StateReducsOnTerminal_95, p_StateReducsOnTerminal_96, p_StateReducsOnTerminal_97, p_StateReducsOnTerminal_98, p_StateReducsOnTerminal_99, p_StateReducsOnTerminal_9A, p_StateReducsOnTerminal_9B, p_StateReducsOnTerminal_9C, p_StateReducsOnTerminal_9D, p_StateReducsOnTerminal_9E, p_StateReducsOnTerminal_9F, p_StateReducsOnTerminal_A0, p_StateReducsOnTerminal_A1, p_StateReducsOnTerminal_A2, p_StateReducsOnTerminal_A3, p_StateReducsOnTerminal_A4, p_StateReducsOnTerminal_A5, p_StateReducsOnTerminal_A6, p_StateReducsOnTerminal_A7, p_StateReducsOnTerminal_A8, p_StateReducsOnTerminal_A9, p_StateReducsOnTerminal_AA, p_StateReducsOnTerminal_AB, p_StateReducsOnTerminal_AC, p_StateReducsOnTerminal_AD, p_StateReducsOnTerminal_AE, p_StateReducsOnTerminal_AF, p_StateReducsOnTerminal_B0, p_StateReducsOnTerminal_B1, p_StateReducsOnTerminal_B2, p_StateReducsOnTerminal_B3, p_StateReducsOnTerminal_B4, p_StateReducsOnTerminal_B5, p_StateReducsOnTerminal_B6, p_StateReducsOnTerminal_B7, p_StateReducsOnTerminal_B8, p_StateReducsOnTerminal_B9, p_StateReducsOnTerminal_BA, p_StateReducsOnTerminal_BB, p_StateReducsOnTerminal_BC, p_StateReducsOnTerminal_BD, p_StateReducsOnTerminal_BE, p_StateReducsOnTerminal_BF, p_StateReducsOnTerminal_C0, p_StateReducsOnTerminal_C1, p_StateReducsOnTerminal_C2, p_StateReducsOnTerminal_C3, p_StateReducsOnTerminal_C4, p_StateReducsOnTerminal_C5, p_StateReducsOnTerminal_C6, p_StateReducsOnTerminal_C7, p_StateReducsOnTerminal_C8, p_StateReducsOnTerminal_C9, p_StateReducsOnTerminal_CA, p_StateReducsOnTerminal_CB, p_StateReducsOnTerminal_CC, p_StateReducsOnTerminal_CD, p_StateReducsOnTerminal_CE, p_StateReducsOnTerminal_CF, p_StateReducsOnTerminal_D0, p_StateReducsOnTerminal_D1, p_StateReducsOnTerminal_D2, p_StateReducsOnTerminal_D3, p_StateReducsOnTerminal_D4, p_StateReducsOnTerminal_D5, p_StateReducsOnTerminal_D6, p_StateReducsOnTerminal_D7, p_StateReducsOnTerminal_D8, p_StateReducsOnTerminal_D9, p_StateReducsOnTerminal_DA, p_StateReducsOnTerminal_DB, p_StateReducsOnTerminal_DC, p_StateReducsOnTerminal_DD, p_StateReducsOnTerminal_DE, p_StateReducsOnTerminal_DF, p_StateReducsOnTerminal_E0, p_StateReducsOnTerminal_E1, p_StateReducsOnTerminal_E2, p_StateReducsOnTerminal_E3, p_StateReducsOnTerminal_E4, p_StateReducsOnTerminal_E5, p_StateReducsOnTerminal_E6, p_StateReducsOnTerminal_E7, p_StateReducsOnTerminal_E8, p_StateReducsOnTerminal_E9, p_StateReducsOnTerminal_EA, p_StateReducsOnTerminal_EB, p_StateReducsOnTerminal_EC, p_StateReducsOnTerminal_ED, p_StateReducsOnTerminal_EE, p_StateReducsOnTerminal_EF, p_StateReducsOnTerminal_F0, p_StateReducsOnTerminal_F1, p_StateReducsOnTerminal_F2, p_StateReducsOnTerminal_F3, p_StateReducsOnTerminal_F4, p_StateReducsOnTerminal_F5, p_StateReducsOnTerminal_F6, p_StateReducsOnTerminal_F7, p_StateReducsOnTerminal_F8, p_StateReducsOnTerminal_F9, p_StateReducsOnTerminal_FA, p_StateReducsOnTerminal_FB, p_StateReducsOnTerminal_FC, p_StateReducsOnTerminal_FD, p_StateReducsOnTerminal_FE, p_StateReducsOnTerminal_FF, p_StateReducsOnTerminal_100, p_StateReducsOnTerminal_101 };
        private static int p_ErrorSimulationLength = 3;

        private System.Collections.Generic.List<Hime.Kernel.Parsers.ParserError> p_Errors;
        private Lexer_Hime_Earth_CIL_GrammarCSharp p_Lexer;
        private Hime.Kernel.Parsers.SyntaxTreeNodeCollection p_Nodes;
        private System.Collections.Generic.Stack<ushort> p_Stack;
        private Hime.Kernel.Parsers.SymbolToken p_NextToken;
        private ushort p_CurrentState;

        public System.Collections.Generic.List<Hime.Kernel.Parsers.ParserError> Errors { get { return p_Errors; } }

        private static ushort Analyse_GetNextByShiftOnTerminal(ushort state, ushort sid)
        {
            for (int i = 0; i != p_StateShiftsOnTerminal[state].Length; i++)
            {
                if (p_StateShiftsOnTerminal[state][i][0] == sid)
                    return p_StateShiftsOnTerminal[state][i][1];
            }
            return 0xFFFF;
        }
        private static ushort Analyse_GetNextByShiftOnVariable(ushort state, ushort sid)
        {
            for (int i = 0; i != p_StateShiftsOnVariable[state].Length; i++)
            {
                if (p_StateShiftsOnVariable[state][i][0] == sid)
                    return p_StateShiftsOnVariable[state][i][1];
            }
            return 0xFFFF;
        }
        private static ushort Analyse_GetProductionOnTerminal(ushort state, ushort sid)
        {
            for (int i = 0; i != p_StateReducsOnTerminal[state].Length; i++)
            {
                if (p_StateReducsOnTerminal[state][i][0] == sid)
                    return p_StateReducsOnTerminal[state][i][1];
            }
            return 0xFFFF;
        }


        public Parser_Hime_Earth_CIL_GrammarCSharp(Lexer_Hime_Earth_CIL_GrammarCSharp input)
        {
            p_Errors = new System.Collections.Generic.List<Hime.Kernel.Parsers.ParserError>();
            p_Lexer = input;
            p_Nodes = new Hime.Kernel.Parsers.SyntaxTreeNodeCollection();
            p_Stack = new System.Collections.Generic.Stack<ushort>();
            p_CurrentState = 0x0;
            p_NextToken = null;
        }


        private void Analyse_HandleUnexpectedToken()
        {
            p_Errors.Add(new Hime.Kernel.Parsers.ParserErrorUnexpectedToken(p_NextToken, p_StateExpectedNames[p_CurrentState]));

            if (p_Errors.Count >= 100)
                throw new Hime.Kernel.Parsers.ParserException("Too much errors, parsing stopped.");

            if (Analyse_HandleUnexpectedToken_SimpleRecovery()) return;
            throw new Hime.Kernel.Parsers.ParserException("Unrecoverable error encountered");
        }
        private bool Analyse_HandleUnexpectedToken_SimpleRecovery()
        {
            if (Analyse_HandleUnexpectedToken_SimpleRecovery_RemoveUnexpected()) return true;
            if (Analyse_HandleUnexpectedToken_SimpleRecovery_InsertExpected()) return true;
            if (Analyse_HandleUnexpectedToken_SimpleRecovery_ReplaceUnexpectedByExpected()) return true;
            return false;
        }
        private bool Analyse_HandleUnexpectedToken_SimpleRecovery_RemoveUnexpected()
        {
            Lexer_Hime_Earth_CIL_GrammarCSharp TestLexer = p_Lexer.Clone_Hime_Earth_CIL_GrammarCSharp();
            System.Collections.Generic.List<ushort> TempStack = new System.Collections.Generic.List<ushort>(p_Stack);
            TempStack.Reverse();
            System.Collections.Generic.Stack<ushort> TestStack = new System.Collections.Generic.Stack<ushort>(TempStack);
            if (Analyse_Simulate(TestStack, TestLexer))
            {
                p_NextToken = p_Lexer.GetNextToken();
                return true;
            }
            return false;
        }
        private bool Analyse_HandleUnexpectedToken_SimpleRecovery_InsertExpected()
        {
            for (int i = 0; i != p_StateExpectedIDs[p_CurrentState].Length; i++)
            {
                Lexer_Hime_Earth_CIL_GrammarCSharp TestLexer = p_Lexer.Clone_Hime_Earth_CIL_GrammarCSharp();
                System.Collections.Generic.List<ushort> TempStack = new System.Collections.Generic.List<ushort>(p_Stack);
                TempStack.Reverse();
                System.Collections.Generic.Stack<ushort> TestStack = new System.Collections.Generic.Stack<ushort>(TempStack);
                System.Collections.Generic.List<Hime.Kernel.Parsers.SymbolToken> Inserted = new System.Collections.Generic.List<Hime.Kernel.Parsers.SymbolToken>();
                Inserted.Add(new Hime.Kernel.Parsers.SymbolTokenText(p_StateExpectedNames[p_CurrentState][i], p_StateExpectedIDs[p_CurrentState][i], string.Empty, p_Lexer.CurrentLine));
                Inserted.Add(p_NextToken);
                if (Analyse_Simulate(TestStack, TestLexer, Inserted))
                {
                    Analyse_RunForToken(Inserted[0]);
                    Analyse_RunForToken(Inserted[1]);
                    p_NextToken = p_Lexer.GetNextToken();
                    return true;
                }
            }
            return false;
        }
        private bool Analyse_HandleUnexpectedToken_SimpleRecovery_ReplaceUnexpectedByExpected()
        {
            for (int i = 0; i != p_StateExpectedIDs[p_CurrentState].Length; i++)
            {
                Lexer_Hime_Earth_CIL_GrammarCSharp TestLexer = p_Lexer.Clone_Hime_Earth_CIL_GrammarCSharp();
                System.Collections.Generic.List<ushort> TempStack = new System.Collections.Generic.List<ushort>(p_Stack);
                TempStack.Reverse();
                System.Collections.Generic.Stack<ushort> TestStack = new System.Collections.Generic.Stack<ushort>(TempStack);
                System.Collections.Generic.List<Hime.Kernel.Parsers.SymbolToken> Inserted = new System.Collections.Generic.List<Hime.Kernel.Parsers.SymbolToken>();
                Inserted.Add(new Hime.Kernel.Parsers.SymbolTokenText(p_StateExpectedNames[p_CurrentState][i], p_StateExpectedIDs[p_CurrentState][i], string.Empty, p_Lexer.CurrentLine));
                if (Analyse_Simulate(TestStack, TestLexer, Inserted))
                {
                    Analyse_RunForToken(Inserted[0]);
                    p_NextToken = p_Lexer.GetNextToken();
                    return true;
                }
            }
            return false;
        }

        private bool Analyse_Simulate(System.Collections.Generic.Stack<ushort> stack, Lexer_Hime_Earth_CIL_GrammarCSharp lexer, System.Collections.Generic.List<Hime.Kernel.Parsers.SymbolToken> inserted)
        {
            int InsertedIndex = 0;
            ushort CurrentState = stack.Peek();
            Hime.Kernel.Parsers.SymbolToken NextToken = null;
            if (inserted.Count != 0)
            {
                NextToken = inserted[0];
                InsertedIndex++;
            }
            else
                NextToken = lexer.GetNextToken();

            for (int i = 0; i != p_ErrorSimulationLength + inserted.Count; i++)
            {
                ushort NextState = Analyse_GetNextByShiftOnTerminal(CurrentState, NextToken.SymbolID);
                if (NextState != 0xFFFF)
                {
                    CurrentState = NextState;
                    stack.Push(CurrentState);
                    if (InsertedIndex != inserted.Count)
                    {
                        NextToken = inserted[InsertedIndex];
                        InsertedIndex++;
                    }
                    else
                        NextToken = lexer.GetNextToken();
                    continue;
                }
                ushort ReductionIndex = Analyse_GetProductionOnTerminal(CurrentState, NextToken.SymbolID);
                if (ReductionIndex != 0xFFFF)
                {
                    Production Reduce = p_Rules[ReductionIndex];
                    ushort HeadID = p_RulesHeadID[ReductionIndex];
                    for (ushort j = 0; j != p_RulesParserLength[ReductionIndex]; j++)
                        stack.Pop();
                    // If next symbol is ε (after $) : return
                    if (NextToken.SymbolID == 0x1)
                        return true;
                    // Shift to next state on the reduce variable
                    NextState = Analyse_GetNextByShiftOnVariable(stack.Peek(), HeadID);
                    // Handle error here : no transition for symbol HeadID
                    if (NextState == 0xFFFF)
                        return false;
                    CurrentState = NextState;
                    stack.Push(CurrentState);
                    continue;
                }
                // Handle error here : no action for symbol NextToken.SymbolID
                return false;
            }
            return true;
        }
        private bool Analyse_Simulate(System.Collections.Generic.Stack<ushort> stack, Lexer_Hime_Earth_CIL_GrammarCSharp lexer)
        {
            return Analyse_Simulate(stack, lexer, new System.Collections.Generic.List<Hime.Kernel.Parsers.SymbolToken>());
        }

        private bool Analyse_RunForToken(Hime.Kernel.Parsers.SymbolToken token)
        {
            while (true)
            {
                ushort NextState = Analyse_GetNextByShiftOnTerminal(p_CurrentState, token.SymbolID);
                if (NextState != 0xFFFF)
                {
                    p_Nodes.Add(new Hime.Kernel.Parsers.SyntaxTreeNode(token));
                    p_CurrentState = NextState;
                    p_Stack.Push(p_CurrentState);
                    return true;
                }
                ushort ReductionIndex = Analyse_GetProductionOnTerminal(p_CurrentState, token.SymbolID);
                if (ReductionIndex != 0xFFFF)
                {
                    Production Reduce = p_Rules[ReductionIndex];
                    ushort HeadID = p_RulesHeadID[ReductionIndex];
                    Reduce(p_Nodes);
                    for (ushort j = 0; j != p_RulesParserLength[ReductionIndex]; j++)
                        p_Stack.Pop();
                    // Shift to next state on the reduce variable
                    NextState = Analyse_GetNextByShiftOnVariable(p_Stack.Peek(), HeadID);
                    if (NextState == 0xFFFF)
                        return false;
                    p_CurrentState = NextState;
                    p_Stack.Push(p_CurrentState);
                    continue;
                }
                return false;
            }
        }
        public Hime.Kernel.Parsers.SyntaxTreeNode Analyse()
        {
            p_Stack.Push(p_CurrentState);
            p_NextToken = p_Lexer.GetNextToken();

            while (true)
            {
                if (Analyse_RunForToken(p_NextToken))
                {
                    p_NextToken = p_Lexer.GetNextToken();
                    continue;
                }
                else if (p_NextToken.SymbolID == 0x0001)
                    return p_Nodes[0];
                else
                    Analyse_HandleUnexpectedToken();
            }
        }

    }


}
